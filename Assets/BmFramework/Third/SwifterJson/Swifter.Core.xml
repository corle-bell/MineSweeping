<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Swifter.Core</name>
    </assembly>
    <members>
        <member name="T:Swifter.Formatters.FormatterHelper">
            <summary>
            提供字符类文档的格式的扩展方法。
            </summary>
        </member>
        <member name="M:Swifter.Formatters.FormatterHelper.DeserializeToAsync``1(Swifter.Formatters.ITextFormatter,System.IO.TextReader,``0)">
            <summary>
            异步将文档字符串反序列化到指定的对象中。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="textFormatter">文档反序列化器</param>
            <param name="textReader">文档字符串读取器</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Swifter.Formatters.FormatterHelper.DeserializeToAsync``1(Swifter.Formatters.ITextFormatter,System.IO.Stream,``0)">
            <summary>
            异步将字节码内容反序列化到指定的对象中。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="textFormatter">字节码反序列化器</param>
            <param name="stream">字节码内容读取器</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.ITextFormatter,System.String,``0)">
            <summary>
            将文档字符串反序列化到指定的对象中。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="textFormatter">文档反序列化器</param>
            <param name="text">文档字符串</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.ITextFormatter,System.IO.TextReader,``0)">
            <summary>
            将文档字符串反序列化到指定的对象中。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="textFormatter">文档反序列化器</param>
            <param name="textReader">文档字符串读取器</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.ITextFormatter,Swifter.Tools.HGlobalCache{System.Char},``0)">
            <summary>
            将文档字符串反序列化到指定的对象中。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="textFormatter">文档反序列化器</param>
            <param name="hGCache">文档字符串缓存</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.IBinaryFormatter,System.Byte[],``0)">
            <summary>
            将字节码内容反序列化到指定的对象中。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="binaryFormatter">字节码反序列化器</param>
            <param name="bytes">字节码内容</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.IBinaryFormatter,System.IO.Stream,``0)">
            <summary>
            将字节码内容反序列化到指定的对象中。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="binaryFormatter">字节码反序列化器</param>
            <param name="stream">字节码读取器</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.IBinaryFormatter,Swifter.Tools.HGlobalCache{System.Byte},``0)">
            <summary>
            将字节码内容反序列化到指定的对象中。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="binaryFormatter">字节码序列化器</param>
            <param name="hGCache">字节码缓存</param>
            <param name="obj">对象</param>
        </member>
        <member name="T:Swifter.Formatters.IBinaryFormatter">
            <summary>
            提供字节类数据格式的反序列化和序列化接口。
            </summary>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeAsync``1(System.IO.Stream)">
            <summary>
            异步将字节数据源反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="stream">字节数据源读取流</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeAsync(System.IO.Stream,System.Type)">
            <summary>
            异步将字节数据源反序列化为指定类型的值。
            </summary>
            <param name="stream">字节码数据源读取流</param>
            <param name="type">指定类型</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeToAsync(System.IO.Stream,Swifter.RW.IDataWriter)">
            <summary>
            异步将字节数据源反序列化到指定的数据写入器中。
            </summary>
            <param name="stream">字节码数据源读取流</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.SerializeAsync``1(``0,System.IO.Stream)">
            <summary>
            异步将指定类型的实例序列化为字节数据格式。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的值</param>
            <param name="stream">字节数据源写入流</param>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize``1(System.ArraySegment{System.Byte})">
            <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="bytes">字节数据源</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize``1(System.IO.Stream)">
            <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="stream">字节数据源读取流</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize``1(Swifter.Tools.HGlobalCache{System.Byte})">
            <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="hGCache">字节数据源缓存</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize(System.ArraySegment{System.Byte},System.Type)">
            <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
            <param name="bytes">文档字符串</param>
            <param name="type">字节数据源</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
            <param name="stream">字节数据源读取流</param>
            <param name="type">指定类型</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize(Swifter.Tools.HGlobalCache{System.Byte},System.Type)">
            <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
            <param name="hGCache">字节数据源缓存</param>
            <param name="type">指定类型</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeTo(System.ArraySegment{System.Byte},Swifter.RW.IDataWriter)">
            <summary>
            将字节数据源反序列化到指定的数据写入器中。
            </summary>
            <param name="bytes">字节数据源</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeTo(System.IO.Stream,Swifter.RW.IDataWriter)">
            <summary>
            将字节数据源反序列化到指定的数据写入器中。
            </summary>
            <param name="stream">字节数据源读取器</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeTo(Swifter.Tools.HGlobalCache{System.Byte},Swifter.RW.IDataWriter)">
            <summary>
            将字节数据源反序列化到指定的数据写入器中。
            </summary>
            <param name="hGCache">字节数据源缓存</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.Serialize``1(``0)">
            <summary>
            将指定类型的实例序列化为字节码数据格式。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的值</param>
            <returns>返回当前文档字符串</returns>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.Serialize``1(``0,System.IO.Stream)">
            <summary>
            将指定类型的实例序列化为字节码数据格式。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的值</param>
            <param name="stream">字节数据源写入流</param>
        </member>
        <member name="M:Swifter.Formatters.IBinaryFormatter.Serialize``1(``0,Swifter.Tools.HGlobalCache{System.Byte})">
            <summary>
            将指定类型的实例序列化为字节码数据格式。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的值</param>
            <param name="hGCache">字节码数据缓存</param>
        </member>
        <member name="T:Swifter.Formatters.IFormatterReader">
            <summary>
            表示格式化读取器，继承此接口以得到格式化强大的扩展功能。
            </summary>
        </member>
        <member name="T:Swifter.Formatters.IFormatterWriter">
            <summary>
            表示格式化写入器，继承此接口以得到格式化强大的扩展功能。
            </summary>
        </member>
        <member name="T:Swifter.Formatters.ITextFormatter">
            <summary>
            提供字符类文档的序列化和反序列化接口
            </summary>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.DeserializeAsync``1(System.IO.TextReader)">
            <summary>
            异步将文档字符串反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="textReader">文档字符串读取器</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.DeserializeAsync(System.IO.TextReader,System.Type)">
            <summary>
            异步将文档字符串反序列化为指定类型的值。
            </summary>
            <param name="textReader">文档字符串读取器</param>
            <param name="type">指定类型</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.DeserializeToAsync(System.IO.TextReader,Swifter.RW.IDataWriter)">
            <summary>
            异步将文档字符串反序列化到指定的数据写入器中。
            </summary>
            <param name="textReader">文档字符串读取器</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.SerializeAsync``1(``0,System.IO.TextWriter)">
            <summary>
            异步将指定类型的实例序列化为文档字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的值</param>
            <param name="textWriter">文档字符串写入器</param>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.Deserialize``1(System.String)">
            <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="text">文档字符串</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.Deserialize``1(System.IO.TextReader)">
            <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="textReader">文档字符串读取器</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.Deserialize``1(Swifter.Tools.HGlobalCache{System.Char})">
            <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="hGCache">文档字符串缓存</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.DeserializeTo(System.String,Swifter.RW.IDataWriter)">
            <summary>
            将文档字符串反序列化到指定的数据写入器中。
            </summary>
            <param name="text">文档字符串</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.DeserializeTo(System.IO.TextReader,Swifter.RW.IDataWriter)">
            <summary>
            将文档字符串反序列化到指定的数据写入器中。
            </summary>
            <param name="textReader">文档字符串读取器</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.DeserializeTo(Swifter.Tools.HGlobalCache{System.Char},Swifter.RW.IDataWriter)">
            <summary>
            将文档字符串反序列化到指定的数据写入器中。
            </summary>
            <param name="hGCache">文档字符串缓存</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.Deserialize(System.String,System.Type)">
            <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
            <param name="text">文档字符串</param>
            <param name="type">指定类型</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
            <param name="textReader">文档字符串读取器</param>
            <param name="type">指定类型</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.Deserialize(Swifter.Tools.HGlobalCache{System.Char},System.Type)">
            <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
            <param name="hGCache">文档字符串缓存</param>
            <param name="type">指定类型</param>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.Serialize``1(``0)">
            <summary>
            将指定类型的实例序列化为文档字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的值</param>
            <returns>返回当前文档字符串</returns>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.Serialize``1(``0,System.IO.TextWriter)">
            <summary>
            将指定类型的实例序列化为文档字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的值</param>
            <param name="textWriter">文档字符串写入器</param>
        </member>
        <member name="M:Swifter.Formatters.ITextFormatter.Serialize``1(``0,Swifter.Tools.HGlobalCache{System.Char})">
            <summary>
            将指定类型的实例序列化为文档字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的值</param>
            <param name="hGCache">文档字符串缓存</param>
        </member>
        <member name="T:Swifter.Reflection.XClassFieldInfo`1">
            <summary>
            表示一个类类型中的实例字段信息。
            </summary>
            <typeparam name="TValue">字段类型</typeparam>
        </member>
        <member name="M:Swifter.Reflection.XClassFieldInfo`1.GetReference(System.Object)">
            <summary>
            获取字段的值的引用。注意：此方法不会检查对象的类型，请确保对象是该字段的定义类的类型。
            </summary>
            <param name="obj">对象</param>
            <returns>返回字段的值的引用</returns>
        </member>
        <member name="M:Swifter.Reflection.XClassFieldInfo`1.GetReferenceCheck(System.Object)">
            <summary>
            获取字段的值的引用。
            </summary>
            <param name="obj">对象实例</param>
            <returns>返回字段的值的引用</returns>
            <exception cref="T:System.InvalidCastException">对象实例不是字段的定义类的类型</exception>
        </member>
        <member name="M:Swifter.Reflection.XClassFieldInfo`1.GetValue(System.Object)">
            <summary>
            获取字段的值。
            </summary>
            <param name="obj">对象实例</param>
            <returns>返回字段的值</returns>
            <exception cref="T:System.InvalidCastException">对象实例不是字段的定义类的类型</exception>
        </member>
        <member name="M:Swifter.Reflection.XClassFieldInfo`1.SetValue(System.Object,System.Object)">
            <summary>
            设置字段的值。
            </summary>
            <param name="obj">对象</param>
            <param name="value">值</param>
            <exception cref="T:System.InvalidCastException">对象实例不是字段的定义类的类型或值得类型错误</exception>
        </member>
        <member name="T:Swifter.Reflection.XFieldInfo">
            <summary>
            XFieldInfo 字段信息。
            此 XFieldInfo 的提供读写方法比 .Net 自带的 FieldInfo 快很多。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XFieldInfo.Create(System.Reflection.FieldInfo,Swifter.Reflection.XBindingFlags)">
            <summary>
            创建 XFieldInfo 字段信息。
            </summary>
            <param name="fieldInfo">.Net 自带的 FieldInfo 字段信息。</param>
            <param name="flags">绑定标识</param>
            <returns>返回一个 XFieldInfo 字段信息。</returns>
        </member>
        <member name="P:Swifter.Reflection.XFieldInfo.FieldInfo">
            <summary>
            获取 .Net 自带的 FieldInfo 字段信息。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XFieldInfo.Name">
            <summary>
            获取此字段的名称。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XFieldInfo.GetValue(System.Object)">
            <summary>
            获取该实例字段的值。
            </summary>
            <param name="obj">类型的实例</param>
            <returns>返回该字段的值</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldInfo.SetValue(System.Object,System.Object)">
            <summary>
            设置该实例字段的值。
            </summary>
            <param name="obj">类型的实例</param>
            <param name="value">该字段的值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldInfo.GetValue">
            <summary>
            获取该静态字段的值。
            </summary>
            <returns>返回该字段的值</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldInfo.SetValue(System.Object)">
            <summary>
            设置该静态字段的值。
            </summary>
            <param name="value">返回该字段的值</param>
        </member>
        <member name="T:Swifter.Reflection.XStaticFieldInfo`1">
            <summary>
            表示静态字段的信息。
            </summary>
            <typeparam name="TValue">字段类型</typeparam>
        </member>
        <member name="P:Swifter.Reflection.XStaticFieldInfo`1.Value">
            <summary>
            获取字段值的引用。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XStaticFieldInfo`1.GetValue">
            <summary>
            获取字段的值。
            </summary>
            <returns>返回字段的值</returns>
        </member>
        <member name="M:Swifter.Reflection.XStaticFieldInfo`1.SetValue(System.Object)">
            <summary>
            设置字段的值。
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:Swifter.Reflection.XStructFieldInfo`2">
            <summary>
            表示一个结构类型中的实例字段信息
            </summary>
            <typeparam name="TStruct">结构类型</typeparam>
            <typeparam name="TValue">字段类型</typeparam>
        </member>
        <member name="M:Swifter.Reflection.XStructFieldInfo`2.GetReference(`0@)">
            <summary>
            获取字段的值的引用。
            </summary>
            <param name="obj">对象的引用</param>
            <returns>返回字段的值的引用</returns>
        </member>
        <member name="M:Swifter.Reflection.XStructFieldInfo`2.GetReference(System.Object)">
            <summary>
            获取字段的值的引用。注意：此方法不会检查对象的类型，请确保对象是该字段的定义类的类型。
            </summary>
            <param name="obj">对象</param>
            <returns>返回字段的值的引用</returns>
        </member>
        <member name="M:Swifter.Reflection.XStructFieldInfo`2.GetReferenceCheck(System.Object)">
            <summary>
            获取字段的值的引用。
            </summary>
            <param name="obj">对象</param>
            <returns>返回字段的值的引用</returns>
            <exception cref="T:System.ArgumentException">对象不是字段的定义类的类型</exception>
        </member>
        <member name="M:Swifter.Reflection.XStructFieldInfo`2.GetValue(System.Object)">
            <summary>
            获取字段的值。
            </summary>
            <param name="obj">对象</param>
            <returns>返回字段的值</returns>
            <exception cref="T:System.ArgumentException">对象不是字段的定义类的类型</exception>
        </member>
        <member name="M:Swifter.Reflection.XStructFieldInfo`2.SetValue(System.Object,System.Object)">
            <summary>
            设置字段的值。
            </summary>
            <param name="obj">对象</param>
            <param name="value">值</param>
            <exception cref="T:System.ArgumentException">对象不是字段的定义类的类型</exception>
        </member>
        <member name="T:Swifter.Reflection.XClassPropertyInfo`2">
            <summary>
            表示一个类类型中的实例属性信息。
            </summary>
            <typeparam name="TClass">类类型</typeparam>
            <typeparam name="TValue">属性类型</typeparam>
        </member>
        <member name="P:Swifter.Reflection.XClassPropertyInfo`2.CanRead">
            <summary>
            获取一个值，表示属性能否读取。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XClassPropertyInfo`2.CanWrite">
            <summary>
            获取一个值，表示属性能否写入。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XClassPropertyInfo`2.GetValue(System.Object)">
            <summary>
            获取属性的值。
            </summary>
            <param name="obj">对象实例</param>
            <returns>返回属性的值</returns>
            <exception cref="T:System.InvalidCastException">对象实例不是字段的定义类的类型</exception>
            <exception cref="T:System.MissingMethodException"><see cref="P:Swifter.Reflection.XClassPropertyInfo`2.CanRead"/> 为 False</exception>
        </member>
        <member name="M:Swifter.Reflection.XClassPropertyInfo`2.SetValue(System.Object,System.Object)">
            <summary>
            设置属性的值。
            </summary>
            <param name="obj">对象实例</param>
            <param name="value">值</param>
            <exception cref="T:System.InvalidCastException">对象实例不是字段的定义类的类型或值的类型错误</exception>
            <exception cref="T:System.MissingMethodException"><see cref="P:Swifter.Reflection.XClassPropertyInfo`2.CanWrite"/> 为 False</exception>
        </member>
        <member name="M:Swifter.Reflection.XClassPropertyInfo`2.GetValue(`0)">
            <summary>
            获取属性的值。
            </summary>
            <param name="obj">对象实例</param>
            <returns>返回属性的值</returns>
            <exception cref="T:System.MissingMethodException"><see cref="P:Swifter.Reflection.XClassPropertyInfo`2.CanRead"/> 为 False</exception>
        </member>
        <member name="M:Swifter.Reflection.XClassPropertyInfo`2.SetValue(`0,`1)">
            <summary>
            设置属性的值。
            </summary>
            <param name="obj">对象实例</param>
            <param name="value">值</param>
            <exception cref="T:System.MissingMethodException"><see cref="P:Swifter.Reflection.XClassPropertyInfo`2.CanWrite"/> 为 False</exception>
        </member>
        <member name="T:Swifter.Reflection.XPropertyInfo">
            <summary>
            XPropertyInfo 属性信息。
            此属性信息提供的读写方法比 .Net 自带的 PropertyInfo 属性信息快很多。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XPropertyInfo.Create(System.Reflection.PropertyInfo,Swifter.Reflection.XBindingFlags)">
            <summary>
            创建 XPropertyInfo 属性信息。
            </summary>
            <param name="propertyInfo">.Net 自带的 PropertyInfo 属性信息</param>
            <param name="flags">绑定标识</param>
            <returns>返回 XPropertyInfo 属性信息。</returns>
        </member>
        <member name="P:Swifter.Reflection.XPropertyInfo.PropertyInfo">
            <summary>
            获取 .Net 自带的 PropertyInfo 属性信息。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XPropertyInfo.Name">
            <summary>
            获取此属性的名称。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XPropertyInfo.GetValue(System.Object)">
            <summary>
            获取该实例属性的值。
            </summary>
            <param name="obj">类型的实例</param>
            <returns>返回该属性的值</returns>
        </member>
        <member name="M:Swifter.Reflection.XPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            设置该实例属性的值。
            </summary>
            <param name="obj">类型的实例</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Reflection.XPropertyInfo.GetValue">
            <summary>
            获取该静态属性的值。
            </summary>
            <returns>返回该属性的值</returns>
        </member>
        <member name="M:Swifter.Reflection.XPropertyInfo.SetValue(System.Object)">
            <summary>
            设置该静态属性的值。
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:Swifter.Reflection.XStaticPropertyInfo`1">
            <summary>
            表示静态属性的信息。
            </summary>
            <typeparam name="TValue">属性类型</typeparam>
        </member>
        <member name="P:Swifter.Reflection.XStaticPropertyInfo`1.Value">
            <summary>
            获取或设置属性的值。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XStaticPropertyInfo`1.GetValue">
            <summary>
            获取属性的值。
            </summary>
            <returns>返回属性的值</returns>
        </member>
        <member name="M:Swifter.Reflection.XStaticPropertyInfo`1.SetValue(System.Object)">
            <summary>
            设置属性的值。
            </summary>
            <param name="value">值</param>
        </member>
        <member name="P:Swifter.Reflection.XStaticPropertyInfo`1.CanRead">
            <summary>
            获取一个值，表示属性能否读取。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XStaticPropertyInfo`1.CanWrite">
            <summary>
            获取一个值，表示属性能否写入。
            </summary>
        </member>
        <member name="T:Swifter.Reflection.XStructPropertyInfo`2">
            <summary>
            表示一个结构类型中的实例属性的信息。
            </summary>
            <typeparam name="TStruct"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Swifter.Reflection.XStructPropertyInfo`2.CanRead">
            <summary>
            获取一个值，表示属性能否读取。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XStructPropertyInfo`2.CanWrite">
            <summary>
            获取一个值，表示属性能否写入。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XStructPropertyInfo`2.GetValue(`0@)">
            <summary>
            获取属性的值。
            </summary>
            <param name="obj">结构引用</param>
            <returns>返回属性的值</returns>
            <exception cref="T:System.MissingMethodException"><see cref="P:Swifter.Reflection.XStructPropertyInfo`2.CanRead"/> 为 False</exception>
        </member>
        <member name="M:Swifter.Reflection.XStructPropertyInfo`2.SetValue(`0@,`1)">
            <summary>
            设置属性的值。
            </summary>
            <param name="obj">结构引用</param>
            <param name="value">值</param>
            <exception cref="T:System.MissingMethodException"><see cref="P:Swifter.Reflection.XStructPropertyInfo`2.CanWrite"/> 为 False</exception>
        </member>
        <member name="M:Swifter.Reflection.XStructPropertyInfo`2.GetValue(System.Object)">
            <summary>
            获取属性的值。
            </summary>
            <param name="obj">结构已装箱的实例</param>
            <returns>返回属性的值</returns>
            <exception cref="T:System.InvalidCastException">对象不是字段的定义类的类型</exception>
            <exception cref="T:System.MissingMethodException"><see cref="P:Swifter.Reflection.XStructPropertyInfo`2.CanRead"/> 为 False</exception>
        </member>
        <member name="M:Swifter.Reflection.XStructPropertyInfo`2.SetValue(System.Object,System.Object)">
            <summary>
            设置属性的值。
            </summary>
            <param name="obj">结构已装箱的实例</param>
            <param name="value">值</param>
            <exception cref="T:System.InvalidCastException">对象不是字段的定义类的类型</exception>
            <exception cref="T:System.MissingMethodException"><see cref="P:Swifter.Reflection.XStructPropertyInfo`2.CanWrite"/> 为 False</exception>
        </member>
        <member name="T:Swifter.Reflection.SerializationBox">
            <summary>
            提供对象序列化的工具方法。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.SerializationBox.DefaultFormatterConverter">
            <summary>
            格式化器所使用的的转换器。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.SerializationBox.DefaultStreamingContextStates">
            <summary>
            指定创建序列化流上下文的标志。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.SerializationBox.DefaultBindingFlags">
            <summary>
            在获取类成员信息时指定的标记。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.SerializationBox.Write(Swifter.RW.IValueWriter,System.Object,System.Type)">
            <summary>
            写入入口。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.SerializationBox.Read(Swifter.RW.IValueReader,System.Type)">
            <summary>
            读取入口。
            </summary>
        </member>
        <member name="T:Swifter.Reflection.SerializationBox`1">
            <summary>
            对象序列化盒子。
            </summary>
            <typeparam name="T">序列化的声明类型</typeparam>
        </member>
        <member name="F:Swifter.Reflection.SerializationBox`1.Value">
            <summary>
            需要序列化的对象。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.SerializationBox`1.op_Implicit(`0)~Swifter.Reflection.SerializationBox{`0}">
            <summary>
            将对象隐式转换为对象序列化盒子。
            </summary>
            <param name="value">对象</param>
        </member>
        <member name="M:Swifter.Reflection.SerializationBox`1.op_Implicit(Swifter.Reflection.SerializationBox{`0})~`0">
            <summary>
            将对象序列化盒子隐式转换为对象。
            </summary>
            <param name="value">对象序列化盒子</param>
        </member>
        <member name="F:Swifter.Reflection.SerializationRW.declaringType">
            <summary>
            定义类型。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.SerializationRW.actualType">
            <summary>
            实际类型。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.SerializationRW.isInitialized">
            <summary>
            是否初始化过。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.SerializationRW.obj">
            <summary>
            当前对象。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.SerializationRW.serializationInfo">
            <summary>
            当前序列化信息。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.SerializationRW.xTypeInfo">
            <summary>
            对象的类型信息。
            </summary>
        </member>
        <member name="T:Swifter.Reflection.XBindingFlags">
            <summary>
            创建 <see cref="T:Swifter.Reflection.XTypeInfo"/> 或 <see cref="T:Swifter.Reflection.XObjectRW"/> 时指示要获取成员的标识。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.UseDefault">
            <summary>
            没有任何标识，表示使用默认标识。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Field">
            <summary>
            表示要获取类型的字段。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Property">
            <summary>
            表示要获取类型的属性。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Event">
            <summary>
            表示要获取类型的事件。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Method">
            <summary>
            表示要获取类型的方法。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Indexer">
            <summary>
            表示要获取类型的索引器。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Public">
            <summary>
            表示要获取类型的公开成员。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.NonPublic">
            <summary>
            表示要获取类型的非公开成员。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Static">
            <summary>
            表示要获取类型的静态成员。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Instance">
            <summary>
            表示要获取类型的实例成员。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWCannotSetException">
            <summary>
            表示当属性或索引器调用 set 方法失败时是否抛出异常。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWCannotGetException">
            <summary>
            表示当属性或索引器调用 get 方法失败时是否抛出异常。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWIgnoreCase">
            <summary>
            表示数据读取器的成员名称匹配是否区分大小写。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWNotFoundException">
            <summary>
            表示数据读取器的成员名称无匹配时是否抛出异常。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWSkipDefaultValue">
            <summary>
            在 <see cref="M:Swifter.Reflection.XObjectRW.OnReadAll(Swifter.RW.IDataWriter{System.String})"/> 中跳过具有类型默认值的成员。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWMembersOptIn">
            <summary>
            在 <see cref="M:Swifter.Reflection.XObjectRW.OnReadAll(Swifter.RW.IDataWriter{System.String})"/> 时只读取已定义 <see cref="T:Swifter.RW.RWFieldAttribute"/> 特性的成员（包括继承的类）。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWAllocate">
            <summary>
            在 <see cref="M:Swifter.Reflection.XObjectRW.Initialize"/> 时，不调用构造方法初始化，而是直接从内存中分配这个对象的实例。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.RWAutoPropertyDirectRW">
            <summary>
            当属性为自动属性时，直接对该属性对应的字段进行读写。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.InheritedMembers">
            <summary>
            表示要包含继承的成员。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XBindingFlags.Default">
            <summary>
            XTypeInfo 创建时默认的标识。
            </summary>
        </member>
        <member name="T:Swifter.Reflection.XEventInfo">
            <summary>
            XEventInfo 事件信息
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XEventInfo.Create(System.Reflection.EventInfo,Swifter.Reflection.XBindingFlags)">
            <summary>
            创建 XEventInfo 事件信息。
            </summary>
            <param name="eventInfo">.Net 自带的 EventInfo 事件信息</param>
            <param name="flags">绑定标识</param>
            <returns>返回 XEventInfo 事件信息。</returns>
        </member>
        <member name="F:Swifter.Reflection.XEventInfo.EventInfo">
            <summary>
            获取 .Net 自带的 EventInfo 事件信息。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XEventInfo.Name">
            <summary>
            获取此事件名称。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XEventInfo.AddEventHandler(System.Object,System.Delegate)">
            <summary>
            添加该实例事件的处理器。
            </summary>
            <param name="obj">类型的实例</param>
            <param name="delegate">事件处理器</param>
        </member>
        <member name="M:Swifter.Reflection.XEventInfo.AddEventHandler(System.TypedReference,System.Delegate)">
            <summary>
            添加该实例事件的处理器。
            </summary>
            <param name="reference">类型的实例引用</param>
            <param name="delegate">事件处理器</param>
        </member>
        <member name="M:Swifter.Reflection.XEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
            <summary>
            移除该实例事件的处理器。
            </summary>
            <param name="obj">类型的实例</param>
            <param name="delegate">事件处理器</param>
        </member>
        <member name="M:Swifter.Reflection.XEventInfo.RemoveEventHandler(System.TypedReference,System.Delegate)">
            <summary>
            移除该实例事件的处理器。
            </summary>
            <param name="reference">类型的实例引用</param>
            <param name="delegate">事件处理器</param>
        </member>
        <member name="M:Swifter.Reflection.XEventInfo.AddEventHandler(System.Delegate)">
            <summary>
            添加该静态事件的处理器。
            </summary>
            <param name="delegate">事件处理器</param>
        </member>
        <member name="M:Swifter.Reflection.XEventInfo.RemoveEventHandler(System.Delegate)">
            <summary>
            移除该静态事件的处理器。
            </summary>
            <param name="delegate">事件处理器</param>
        </member>
        <member name="T:Swifter.Reflection.XFieldValueRW">
            <summary>
            提供 XObjectRW 的字段读写器。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.DirectRead">
            <summary>
            直接读取值。
            </summary>
            <returns>值</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.DirectWrite(System.Object)">
            <summary>
            直接写入值。
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
            <summary>
            读取一个数组结构。
            </summary>
            <param name="valueWriter">数组结构写入器</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadBoolean">
            <summary>
            读取一个 Boolean 值。
            </summary>
            <returns>返回 bool 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadByte">
            <summary>
            读取一个 Byte 值。
            </summary>
            <returns>返回 byte 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadChar">
            <summary>
            读取一个 Char 值。
            </summary>
            <returns>返回 char 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadDateTime">
            <summary>
            读取一个 DateTime 值。
            </summary>
            <returns>返回 DateTime 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadDecimal">
            <summary>
            读取一个 Decimal 值。
            </summary>
            <returns>返回 decimal 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadDouble">
            <summary>
            读取一个 Double 值。
            </summary>
            <returns>返回 double 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadInt16">
            <summary>
            读取一个 Int16 值。
            </summary>
            <returns>返回 short 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadInt32">
            <summary>
            读取一个 Int32 值。
            </summary>
            <returns>返回 int 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadInt64">
            <summary>
            读取一个 Int64 值。
            </summary>
            <returns>返回 long 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadObject(Swifter.RW.IDataWriter{System.String})">
            <summary>
            读取一个对象结构数据。
            </summary>
            <param name="valueWriter">对象结构数据写入器</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadSByte">
            <summary>
            读取一个 SByte 值。
            </summary>
            <returns>返回 sbyte 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadSingle">
            <summary>
            读取一个 Single 值。
            </summary>
            <returns>返回 float 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadString">
            <summary>
            读取一个 String 值。
            </summary>
            <returns>返回 string 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadUInt16">
            <summary>
            读取一个 UInt16 值。
            </summary>
            <returns>返回 ushort 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadUInt32">
            <summary>
            读取一个 UInt32 值。
            </summary>
            <returns>返回 uint 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadUInt64">
            <summary>
            读取一个 UInt64 值。
            </summary>
            <returns>返回 ulong 值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteArray(Swifter.RW.IDataReader{System.Int32})">
            <summary>
            写入一个数组结构数据。
            </summary>
            <param name="dataReader">数组结构数据读取器</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteBoolean(System.Boolean)">
            <summary>
            写入一个 Boolean 值。
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteByte(System.Byte)">
            <summary>
            写入一个 Byte 值。
            </summary>
            <param name="value">byte 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteChar(System.Char)">
            <summary>
            写入一个 Char 值。
            </summary>
            <param name="value">char 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteDateTime(System.DateTime)">
            <summary>
            写入一个 DateTime 值。
            </summary>
            <param name="value">DateTime 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteDecimal(System.Decimal)">
            <summary>
            写入一个 Decimal 值。
            </summary>
            <param name="value">decimal 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteDouble(System.Double)">
            <summary>
            写入一个 Double 值。
            </summary>
            <param name="value">double 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteInt16(System.Int16)">
            <summary>
            写入一个 Int16 值。
            </summary>
            <param name="value">short 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteInt32(System.Int32)">
            <summary>
            写入一个 Int32 值。
            </summary>
            <param name="value">int 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteInt64(System.Int64)">
            <summary>
            写入一个 Int64 值。
            </summary>
            <param name="value">long 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteObject(Swifter.RW.IDataReader{System.String})">
            <summary>
            写入一个对象结构数据。
            </summary>
            <param name="dataReader">对象结构数据读取器</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteSByte(System.SByte)">
            <summary>
            写入一个 SByte 值。
            </summary>
            <param name="value">sbyte 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteSingle(System.Single)">
            <summary>
            写入一个 Single 值。
            </summary>
            <param name="value">float 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteString(System.String)">
            <summary>
            写入一个 String 值。
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteUInt16(System.UInt16)">
            <summary>
            写入一个 UInt16 值。
            </summary>
            <param name="value">ushort 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteUInt32(System.UInt32)">
            <summary>
            写入一个 UInt32 值。
            </summary>
            <param name="value">uint 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteUInt64(System.UInt64)">
            <summary>
            写入一个 UInt64 值。
            </summary>
            <param name="value">ulong 值</param>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadNullable``1">
            <summary>
            获取一个可空类型的值。
            </summary>
            <typeparam name="T">值类型</typeparam>
            <returns>获取 Null 或该值类型的值。</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.ReadEnum``1">
            <summary>
            获取一个枚举值。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>返回一个枚举值</returns>
        </member>
        <member name="M:Swifter.Reflection.XFieldValueRW.WriteEnum``1(``0)">
            <summary>
            写入一个枚举值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="value">枚举值</param>
        </member>
        <member name="T:Swifter.Reflection.XIndexerInfo">
            <summary>
            XIndexerInfo 索引器信息。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.Create(System.Reflection.PropertyInfo,Swifter.Reflection.XBindingFlags)">
            <summary>
            创建索引器信息。
            </summary>
            <param name="propertyInfo">.Net 自带的索引器信息</param>
            <param name="flags">绑定标识</param>
            <returns>返回 XIndexerInfo 索引器信息</returns>
        </member>
        <member name="F:Swifter.Reflection.XIndexerInfo.PropertyInfo">
            <summary>
            获取 .Net 自带的索引器信息。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XIndexerInfo.GetValueMethod">
            <summary>
            获取该索引器的 get 方法的委托。
            </summary>
        </member>
        <member name="F:Swifter.Reflection.XIndexerInfo.SetValueMethod">
            <summary>
            获取该索引器的 set 方法的委托。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.GetValue(System.Object,System.Object[])">
            <summary>
            获取该索引器指定参数的值。
            </summary>
            <param name="obj">类型的实例。如果该索引器是静态的，则指定为 Null</param>
            <param name="parameters">索引器的参数</param>
            <returns>返回该值</returns>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.GetValue(System.Object[])">
            <summary>
            获取静态索引器指定参数的值。
            </summary>
            <param name="parameters">索引器的参数</param>
            <returns>返回该值</returns>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.SetValue(System.Object,System.Object[],System.Object)">
            <summary>
            设置该索引器指定参数的值。
            </summary>
            <param name="obj">类型的实例。如果该索引器是静态的，则指定为 Null</param>
            <param name="parameters">索引器的参数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Reflection.XIndexerInfo.SetValue(System.Object[],System.Object)">
            <summary>
            设置静态索引器指定参数的值。
            </summary>
            <param name="parameters">索引器的参数</param>
            <param name="value">值</param>
        </member>
        <member name="T:Swifter.Reflection.XMethodInfo">
            <summary>
            XMethodInfo 方法信息。
            此方法提供的动态调用都比 .Net 自带的要快很多。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XMethodInfo.Create(System.Reflection.MethodInfo,Swifter.Reflection.XBindingFlags)">
            <summary>
            创建 XMethodInfo 方法信息。
            </summary>
            <param name="methodInfo">.Net 自带 MethodInfo 方法信息</param>
            <param name="flags">绑定标识</param>
            <returns>返回一个 XMethodInfo 方法信息。</returns>
        </member>
        <member name="P:Swifter.Reflection.XMethodInfo.MethodInfo">
            <summary>
            获取 .Net 自带的 MethodInfo 方法信息。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XMethodInfo.Delegate">
            <summary>
            获取该方法的委托。
            该委托比普通的委托占用更大的内存，但动态执行的效率更高。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XMethodInfo.Invoke(System.Object,System.Object[])">
            <summary>
            以实例方式动态执行方法。
            </summary>
            <param name="obj">调用实例</param>
            <param name="parameters">方法的参数</param>
            <returns>返回该方法的返回值。如果返回值类型为 Void，则返回 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XMethodInfo.Invoke(System.Object[])">
            <summary>
            以静态方式动态执行方法。
            </summary>
            <param name="parameters">方法的参数</param>
            <returns>返回该方法的返回值。如果返回值类型为 Void，则返回 Null</returns>
        </member>
        <member name="T:Swifter.Reflection.XObjectInterface`1">
            <summary>
            提供 XObjectRW 的读写接口。
            Swifter 默认的对象读写器是 FastObjectRW.
            FastObjectRW 对比 XObjectRW：
                FastObjectRW 的优势是：效率几乎完美，内存占用也不是很大。
                XObjectRW 的优势是：内存占用非常小，效率也不错，可以调用非共有成员。
            如果要改为使用 XObjectRW，在程序初始化代码中添加 Swifter.RW.ValueInterface.DefaultObjectInterfaceType = typeof(Swifter.Reflection.XObjectInterface&lt;T&gt;);
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Swifter.Reflection.XObjectInterface`1.CheckDerivedInstance">
            <summary>
            表示是否需要进行派生类检查。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectInterface`1.DefaultBindingFlags">
            <summary>
            读取或设置默认的绑定标识。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XObjectInterface`1.ReadValue(Swifter.RW.IValueReader)">
            <summary>
            在值读取器中读取该类型的实例。
            </summary>
            <param name="valueReader">值读取器</param>
            <returns>返回该类型的实例</returns>
        </member>
        <member name="M:Swifter.Reflection.XObjectInterface`1.WriteValue(Swifter.RW.IValueWriter,`0)">
            <summary>
            在数据写入器中写入该类型的实例。
            </summary>
            <param name="valueWriter">值写入器</param>
            <param name="value">该类型的实例</param>
        </member>
        <member name="T:Swifter.Reflection.XObjectRWExtensions">
            <summary>
            提供新反射工具的扩展方法。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XObjectRWExtensions.SetXObjectRWFlags(Swifter.RW.ITargetedBind,Swifter.Reflection.XBindingFlags)">
            <summary>
            设置对象读写器接口为 XObjectInterface，并设置一个支持针对性接口的对象的默认绑定标识。
            </summary>
            <param name="targeted">支持针对性接口的对象</param>
            <param name="flags">默认绑定标识</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRWExtensions.GetXObjectRWFlags(Swifter.RW.ITargetedBind)">
            <summary>
            获取一个支持针对性接口的对象的默认绑定标识。
            </summary>
            <param name="targeted">支持针对性接口的对象</param>
            <returns>返回绑定标识</returns>
        </member>
        <member name="T:Swifter.Reflection.XObjectRW">
            <summary>
            XObjectRW 一个强大，高效，内存小的对象读写器。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.DefaultBindingFlags">
            <summary>
            读取或设置默认的绑定标识。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.Create(System.Type,Swifter.Reflection.XBindingFlags)">
            <summary>
            创建 XObjectRW 对象读写器。
            </summary>
            <param name="type">类型</param>
            <param name="flags">绑定标识</param>
            <returns>返回 XObjectRW 对象读写器</returns>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.Create``1(Swifter.Reflection.XBindingFlags)">
            <summary>
            读取或设置默认的绑定标识。
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="flags">绑定标识</param>
            <returns>返回 XObjectRW 对象读写器</returns>
        </member>
        <member name="F:Swifter.Reflection.XObjectRW.xTypeInfo">
            <summary>
            获取对象读写器所使用的 XTypeInfo 实例。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.Item(System.String)">
            <summary>
            获取指定成员名称的成员值的读写器。
            </summary>
            <param name="key">成员名称</param>
            <returns>返回值的读写器</returns>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.OnReadValue(System.String,Swifter.RW.IValueWriter)">
            <summary>
            将指定成员名称的值写入到值写入器中。
            </summary>
            <param name="key">成员的名称</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.OnReadAll(Swifter.RW.IDataWriter{System.String})">
            <summary>
            将数据源中的所有成员的名称和值写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.OnWriteValue(System.String,Swifter.RW.IValueReader)">
            <summary>
            将数据读取器中的值设置到指定名称的成员中。
            </summary>
            <param name="key">成员的名称</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.Initialize">
            <summary>
            调用默认构造函数初始化数据源对象。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.Initialize(System.Int32)">
            <summary>
            调用默认构造函数初始化数据源对象。
            </summary>
            <param name="capacity">不处理此参数</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.Initialize(System.Object)">
            <summary>
            初始化数据源。
            </summary>
            <param name="obj">数据源。</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.OnWriteAll(Swifter.RW.IDataReader{System.String})">
            <summary>
            从数据读取器中读取所有数据源字段到数据源的值
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.GetKey(System.Int32)">
            <summary>
            获取指定索引处的字段名称。
            </summary>
            <param name="ordinal">指定索引</param>
            <returns>返回字段名称</returns>
        </member>
        <member name="M:Swifter.Reflection.XObjectRW.GetOrdinal(System.String)">
            <summary>
            获取指定字段名称的序号。
            </summary>
            <param name="key">指定字段名称</param>
            <returns>返回序号</returns>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.Keys">
            <summary>
            获取该对象读写器的成员名称集合。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.Count">
            <summary>
            获取该对象读写器的成员名称的数量
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.Content">
            <summary>
            获取数据源。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XObjectRW.ContentType">
            <summary>
            获取数据源类型。
            </summary>
        </member>
        <member name="T:Swifter.Reflection.XTypeInfo">
            <summary>
            XTypeInfo 类型信息。
            此类型信息主要提供该类型的成员的缓存。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.Create(System.Type,Swifter.Reflection.XBindingFlags)">
            <summary>
            创建 XTypeInfo 类型信息。
            </summary>
            <param name="type">需要创建 XTypeInfo 类型信息的类型</param>
            <param name="flags">绑定参数</param>
            <returns>返回一个 XTypeInfo 类型信息</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.Create``1(Swifter.Reflection.XBindingFlags)">
            <summary>
            创建 XTypeInfo 类型信息。
            </summary>
            <typeparam name="T">需要创建 XTypeInfo 类型信息的类型</typeparam>
            <param name="flags">绑定参数</param>
            <returns>返回一个 XTypeInfo 类型信息</returns>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.Type">
            <summary>
            获取表示当前 XTypeInfo 的类型。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.Flags">
            <summary>
            获取创建 XTypeInfo 的绑定标识。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.FieldsCount">
            <summary>
            获取字段数量。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.PropertiesCount">
            <summary>
            获取属性数量。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.EventsCount">
            <summary>
            获取事件数量。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.IndexersCount">
            <summary>
            获取索引器数量。
            </summary>
        </member>
        <member name="P:Swifter.Reflection.XTypeInfo.MethodsCount">
            <summary>
            获取方法数量。
            </summary>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetField(System.String)">
            <summary>
            获取指定名称的字段信息。
            </summary>
            <param name="name">指定名称</param>
            <returns>返回字段信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetField(System.Int32)">
            <summary>
            获取指定索引处的字段信息。
            </summary>
            <param name="index">指定索引</param>
            <returns>返回字段信息</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetProperty(System.String)">
            <summary>
            获取指定名称的属性信息。
            </summary>
            <param name="name">指定名称</param>
            <returns>返回属性信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetProperty(System.Int32)">
            <summary>
            获取指定索引处的属性信息。
            </summary>
            <param name="index">指定索引</param>
            <returns>返回属性信息</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetEvent(System.String)">
            <summary>
            获取指定名称的事件信息。
            </summary>
            <param name="name">指定名称</param>
            <returns>返回事件信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetEvent(System.Int32)">
            <summary>
            获取指定索引处的事件信息。
            </summary>
            <param name="index">指定索引</param>
            <returns>返回事件信息</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetIndexer(System.Type[])">
            <summary>
            获取指定参数类型的索引器。
            </summary>
            <param name="types">指定参数类型</param>
            <returns>返回索引器信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetIndexer(System.Object[])">
            <summary>
            获取指定参数的索引器信息。
            </summary>
            <param name="parameters">指定参数</param>
            <returns>返回索引器信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetIndexer(System.Int32)">
            <summary>
            获取指定索引处的索引器信息。
            </summary>
            <param name="index">指定索引</param>
            <returns>返回索引器信息</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetMethod(System.String,System.Type[])">
            <summary>
            获取指定名称和参数类型的方法信息。
            </summary>
            <param name="name">方法名称</param>
            <param name="types">方法参数类型</param>
            <returns>返回方法信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetMethod(System.String,System.Object[])">
            <summary>
            获取指定名称和参数的方法信息。
            </summary>
            <param name="name">方法名称</param>
            <param name="parameters">方法参数</param>
            <returns>返回方法信息或 Null</returns>
        </member>
        <member name="M:Swifter.Reflection.XTypeInfo.GetMethod(System.Int32)">
            <summary>
            获取指定索引处的方法信息。
            </summary>
            <param name="index">指定索引</param>
            <returns>返回索方法信息</returns>
        </member>
        <member name="T:Swifter.RW.ArrayRW`1">
            <summary>
            数组（向量）读写器。
            </summary>
            <typeparam name="TElement">数组元素类型</typeparam>
        </member>
        <member name="F:Swifter.RW.ArrayRW`1.DefaultCapacity">
            <summary>
            默认容量。
            </summary>
        </member>
        <member name="M:Swifter.RW.ArrayRW`1.#ctor(`0[])">
            <summary>
            创建数组（向量）读写器并初始化。
            </summary>
            <param name="obj">数组</param>
        </member>
        <member name="M:Swifter.RW.ArrayRW`1.#ctor">
            <summary>
            创建数组（向量）读写器。
            </summary>
        </member>
        <member name="P:Swifter.RW.ArrayRW`1.Item(System.Int32)">
            <summary>
            获取指定索引器的值读写器。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Swifter.RW.ArrayRW`1.Keys">
            <summary>
            获取所有索引。
            </summary>
        </member>
        <member name="P:Swifter.RW.ArrayRW`1.Count">
            <summary>
            获取数组长度。
            </summary>
        </member>
        <member name="M:Swifter.RW.ArrayRW`1.GetContent">
            <summary>
            获取数据源。
            </summary>
        </member>
        <member name="P:Swifter.RW.ArrayRW`1.Content">
            <summary>
            获取或设置数据源。
            </summary>
        </member>
        <member name="P:Swifter.RW.ArrayRW`1.ContentType">
            <summary>
            获取数据类型。
            </summary>
        </member>
        <member name="M:Swifter.RW.ArrayRW`1.Initialize">
            <summary>
            初始化一个具有默认容量的数组。
            </summary>
        </member>
        <member name="M:Swifter.RW.ArrayRW`1.Initialize(System.Int32)">
            <summary>
            初始化一个指定容量的数组。
            </summary>
            <param name="capacity">指定容量</param>
        </member>
        <member name="M:Swifter.RW.ArrayRW`1.Initialize(`0[])">
            <summary>
            设置数据源。
            </summary>
            <param name="obj">数据源</param>
        </member>
        <member name="M:Swifter.RW.ArrayRW`1.OnReadAll(Swifter.RW.IDataWriter{System.Int32})">
            <summary>
            将所有元素写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.ArrayRW`1.OnReadValue(System.Int32,Swifter.RW.IValueWriter)">
            <summary>
            将指定索引处的值写入到值写入器中。
            </summary>
            <param name="key">指定索引</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.RW.ArrayRW`1.OnWriteAll(Swifter.RW.IDataReader{System.Int32})">
            <summary>
            在数据读取器中读取所有元素。
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="M:Swifter.RW.ArrayRW`1.Expand">
            <summary>
            扩容数组。
            </summary>
        </member>
        <member name="M:Swifter.RW.ArrayRW`1.OnWriteValue(System.Int32,Swifter.RW.IValueReader)">
            <summary>
            读取值读取器的值到指定索引处。
            </summary>
            <param name="key">指定索引</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="T:Swifter.RW.IArrayCollectionRW">
            <summary>
            标识数组读写器的接口。
            </summary>
        </member>
        <member name="M:Swifter.RW.IArrayCollectionRW.InvokeElementType(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行元素类型。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="T:Swifter.RW.BaseDirectRW">
            <summary>
            提供直接读写器的基本实现。
            </summary>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.DirectRead">
            <summary>
            子类需要实现的直接读取。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.DirectWrite(System.Object)">
            <summary>
            子类需要实现的直接写入。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
            <summary>
            读取一个数组。
            </summary>
            <param name="valueWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadObject(Swifter.RW.IDataWriter{System.String})">
            <summary>
            读取一个对象。
            </summary>
            <param name="valueWriter">对象写入器</param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadBoolean">
            <summary>
            读取一个布尔值。
            </summary>
            <returns>返回一个 <see cref="T:System.Boolean"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadByte">
            <summary>
            读取一个单字节无符号整数。
            </summary>
            <returns>返回一个 <see cref="T:System.Byte"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadChar">
            <summary>
            读取一个字符。
            </summary>
            <returns>返回一个 <see cref="T:System.Char"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadDateTime">
            <summary>
            读取一个日期和时间。
            </summary>
            <returns>返回一个 <see cref="T:System.DateTime"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadDecimal">
            <summary>
            读取一个十进制数字。
            </summary>
            <returns>返回一个 <see cref="T:System.Decimal"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadDouble">
            <summary>
            读取一个双精度浮点数。
            </summary>
            <returns>返回一个 <see cref="T:System.Double"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadInt16">
            <summary>
            读取一个双字节有符号整数。
            </summary>
            <returns>返回一个 <see cref="T:System.Int16"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadInt32">
            <summary>
            读取一个四字节有符号整数。
            </summary>
            <returns>返回一个 <see cref="T:System.Int32"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadInt64">
            <summary>
            读取一个八字节有符号整数。
            </summary>
            <returns>返回一个 <see cref="T:System.Int64"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadSByte">
            <summary>
            读取一个单字节有符号整数。
            </summary>
            <returns>返回一个 <see cref="T:System.SByte"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadSingle">
            <summary>
            读取一个单精度浮点数。
            </summary>
            <returns>返回一个 <see cref="T:System.Single"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadString">
            <summary>
            读取一个字符串。
            </summary>
            <returns>返回一个 <see cref="T:System.String"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadUInt16">
            <summary>
            读取一个双字节无符号整数。
            </summary>
            <returns>返回一个 <see cref="T:System.UInt16"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadUInt32">
            <summary>
            读取一个四字节无符号整数。
            </summary>
            <returns>返回一个 <see cref="T:System.UInt32"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadUInt64">
            <summary>
            读取一个八字节无符号整数。
            </summary>
            <returns>返回一个 <see cref="T:System.UInt64"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadEnum``1">
            <summary>
            读取一个枚举。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>返回该枚举类型的值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadGuid">
            <summary>
            读取一个全局唯一标识符。
            </summary>
            <returns>返回一个 <see cref="T:System.Guid"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadDateTimeOffset">
            <summary>
            读取一个包含偏移量的日期和时间。
            </summary>
            <returns>返回一个 <see cref="T:System.DateTimeOffset"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadTimeSpan">
            <summary>
            读取一个时间间隔。
            </summary>
            <returns>返回一个 <see cref="T:System.TimeSpan"/> 值</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.ReadNullable``1">
            <summary>
            读取一个可空值。
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <returns>该类型的值或 Null</returns>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteBoolean(System.Boolean)">
            <summary>
            写入一个布尔值。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteByte(System.Byte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteSByte(System.SByte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteInt16(System.Int16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteChar(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteUInt16(System.UInt16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteInt32(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteSingle(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteUInt32(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteInt64(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteDouble(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteUInt64(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteString(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteDateTime(System.DateTime)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteDecimal(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteObject(Swifter.RW.IDataReader{System.String})">
            <summary>
            
            </summary>
            <param name="dataReader"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteArray(Swifter.RW.IDataReader{System.Int32})">
            <summary>
            
            </summary>
            <param name="dataReader"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteEnum``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteGuid(System.Guid)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteDateTimeOffset(System.DateTimeOffset)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.RW.BaseDirectRW.WriteTimeSpan(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:Swifter.RW.EnumInterface`1.TypeCode">
            <summary>
            枚举的 TypeCode。
            </summary>
        </member>
        <member name="F:Swifter.RW.EnumInterface`1.IsFlags">
            <summary>
            表示此枚举是否是标识符。
            </summary>
        </member>
        <member name="F:Swifter.RW.EnumInterface`1.Items">
            <summary>
            枚举值和名称的集合。
            </summary>
        </member>
        <member name="T:Swifter.RW.ListRW`2">
            <summary>
            列表读写器。
            </summary>
            <typeparam name="T">列表类型</typeparam>
            <typeparam name="TValue">元素类型</typeparam>
        </member>
        <member name="F:Swifter.RW.ListRW`2.DefaultCapacity">
            <summary>
            默认容量。
            </summary>
        </member>
        <member name="F:Swifter.RW.ListRW`2.content">
            <summary>
            列表实例。
            </summary>
        </member>
        <member name="P:Swifter.RW.ListRW`2.Item(System.Int32)">
            <summary>
            获取指定索引处值的读写器。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Swifter.RW.ListRW`2.Keys">
            <summary>
            获取所有索引。
            </summary>
        </member>
        <member name="P:Swifter.RW.ListRW`2.Count">
            <summary>
            获取列表长度。
            </summary>
        </member>
        <member name="P:Swifter.RW.ListRW`2.Content">
            <summary>
            获取或设置数据源。
            </summary>
        </member>
        <member name="P:Swifter.RW.ListRW`2.ContentType">
            <summary>
            获取数据源类型。
            </summary>
        </member>
        <member name="M:Swifter.RW.ListRW`2.Initialize">
            <summary>
            初始化一个具有默认容量的列表。
            </summary>
        </member>
        <member name="M:Swifter.RW.ListRW`2.Initialize(System.Int32)">
            <summary>
            初始化一个指定容量的数组。
            </summary>
            <param name="capacity">指定容量</param>
        </member>
        <member name="M:Swifter.RW.ListRW`2.OnReadAll(Swifter.RW.IDataWriter{System.Int32})">
            <summary>
            将所有元素写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.ListRW`2.OnReadValue(System.Int32,Swifter.RW.IValueWriter)">
            <summary>
            将指定索引处的值写入到值写入器中。
            </summary>
            <param name="key">指定索引</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.RW.ListRW`2.OnWriteValue(System.Int32,Swifter.RW.IValueReader)">
            <summary>
            读取值读取器的值到指定索引处。
            </summary>
            <param name="key">指定索引</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="M:Swifter.RW.ListRW`2.OnWriteAll(Swifter.RW.IDataReader{System.Int32})">
            <summary>
            在数据读取器中读取所有元素。
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="T:Swifter.RW.DataRowRW`1">
            <summary>
            System.Data.DataRow Reader impl.
            </summary>
        </member>
        <member name="T:Swifter.RW.DataSetRW`1">
            <summary>
            System.Data.DataSet Reader impl.
            </summary>
        </member>
        <member name="T:Swifter.RW.DataTableRW`1">
            <summary>
            System.Data.DataTable Reader impl.
            </summary>
        </member>
        <member name="T:Swifter.RW.DataTableRW">
            <summary>
            提供 DataTable 读写器的扩展方法。
            </summary>
        </member>
        <member name="P:Swifter.RW.DataTableRW.DefaultOptions">
            <summary>
            读取或设置 DataTableRW 默认配置项
            </summary>
        </member>
        <member name="M:Swifter.RW.DataTableRW.SetDataTableRWOptions(Swifter.RW.ITargetedBind,Swifter.RW.DataTableRWOptions)">
            <summary>
            设置一个支持针对性接口的 DataTableRW 默认配置项。
            </summary>
            <param name="targeted">支持针对性接口的对象</param>
            <param name="options">默认配置项</param>
        </member>
        <member name="M:Swifter.RW.DataTableRW.ReadDataTable(Swifter.RW.IValueReader,Swifter.RW.DataTableRWOptions)">
            <summary>
            读取一个数据表。
            </summary>
            <param name="valueReader">值读取器</param>
            <param name="options">配置项</param>
            <returns>返回一个数据表</returns>
        </member>
        <member name="M:Swifter.RW.DataTableRW.WriteDataTable(Swifter.RW.IValueWriter,System.Data.DataTable,Swifter.RW.DataTableRWOptions)">
            <summary>
            写入一个数据表。
            </summary>
            <param name="valueWriter">值写入器</param>
            <param name="dataTable">数据表</param>
            <param name="options">配置项</param>
        </member>
        <member name="M:Swifter.RW.DataTableRW.IdentifyColumnTypes(System.Data.DataTable,System.Type)">
            <summary>
            识别数据表的列类型。
            </summary>
            <param name="dataTable">要识别的数据表</param>
            <param name="anyType">当识别为 <see cref="T:System.Object"/> 类型时的类型，默认为 <see cref="T:System.Object"/></param>
            <returns></returns>
        </member>
        <member name="T:Swifter.RW.DataTableRWOptions">
            <summary>
            DataTable 读写器的配置。
            </summary>
        </member>
        <member name="F:Swifter.RW.DataTableRWOptions.None">
            <summary>
            默认配置项。
            </summary>
        </member>
        <member name="F:Swifter.RW.DataTableRWOptions.SetFirstRowsTypeToColumnTypes">
            <summary>
            设置第一行的数据类型为各个 Column 的类型。否则将设置 Object 为各个 Column 的类型。默认不开启。
            </summary> 
        </member>
        <member name="F:Swifter.RW.DataTableRWOptions.WriteToArrayFromBeginningSecondRows">
            <summary>
            设置第二行开始的数据写入为数组。
            </summary>
        </member>
        <member name="F:Swifter.RW.DataTableRWOptions.AutoIdentifyColumnTypes">
            <summary>
            在填充完表格数据后自动识别每一列的数据类型。
            </summary>
        </member>
        <member name="T:Swifter.RW.DbDataReaderReader">
            <summary>
            DB 读取器的读取器。
            </summary>
        </member>
        <member name="F:Swifter.RW.DbDataReaderReader.dbDataReader">
            <summary>
            数据源。
            </summary>
        </member>
        <member name="M:Swifter.RW.DbDataReaderReader.#ctor(System.Data.IDataReader,Swifter.RW.DataTableRWOptions)">
            <summary>
            初始化数据读取器。
            </summary>
            <param name="dbDataReader">数据源</param>
            <param name="options">配置项</param>
        </member>
        <member name="P:Swifter.RW.DbDataReaderReader.Item(System.Int32)">
            <summary>
            获取位于指定索引处的值读取器。
            </summary>
            <param name="key">指定索引</param>
            <returns>返回值读取器</returns>
        </member>
        <member name="P:Swifter.RW.DbDataReaderReader.Count">
            <summary>
            获取表格列的数量。
            </summary>
        </member>
        <member name="P:Swifter.RW.DbDataReaderReader.Keys">
            <summary>
            获取表格列的名称集合。
            </summary>
        </member>
        <member name="P:Swifter.RW.DbDataReaderReader.ContentType">
            <summary>
            获取数据源的类型。
            </summary>
        </member>
        <member name="P:Swifter.RW.DbDataReaderReader.Content">
            <summary>
            获取或设置数据源。
            </summary>
        </member>
        <member name="M:Swifter.RW.DbDataReaderReader.OnReadAll(Swifter.RW.IDataWriter{System.Int32})">
            <summary>
            读取所有值当前行的所有值，然后写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.DbDataReaderReader.OnReadValue(System.Int32,Swifter.RW.IValueWriter)">
            <summary>
            读取指定位置的值，然后写入到值写入器中。
            </summary>
            <param name="key">指定位置</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="F:Swifter.RW.DbDataReaderReader.RowReader.dbDataReader">
            <summary>
            数据源。
            </summary>
        </member>
        <member name="T:Swifter.RW.FastObjectInterface`1">
            <summary>
            FastObjectRW 基于 Emit 实现的几乎完美效率的对象读写接口。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Swifter.RW.FastObjectInterface`1.CheckDerivedInstance">
            <summary>
            表示是否需要进行派生类检查。
            </summary>
        </member>
        <member name="M:Swifter.RW.FastObjectInterface`1.ReadValue(Swifter.RW.IValueReader)">
            <summary>
            读取一个对象。
            </summary>
            <param name="valueReader">值读取器</param>
            <returns>返回一个对象</returns>
        </member>
        <member name="M:Swifter.RW.FastObjectInterface`1.WriteValue(Swifter.RW.IValueWriter,`0)">
            <summary>
            写入一个对象。
            </summary>
            <param name="valueWriter">值写入器</param>
            <param name="value">对象</param>
        </member>
        <member name="T:Swifter.RW.FastObjectRW">
            <summary>
            FastObjectRW 基于 Emit 实现的几乎完美效率的对象读写器。
            </summary>
        </member>
        <member name="P:Swifter.RW.FastObjectRW.DefaultOptions">
            <summary>
            FastObjectRW 全局默认配置。
            </summary>
        </member>
        <member name="T:Swifter.RW.FastObjectRW`1">
            <summary>
            FastObjectRW 基于 Emit 实现的几乎完美效率的对象读写器。
            </summary>
            <typeparam name="T">数据源对象的类型</typeparam>
        </member>
        <member name="P:Swifter.RW.FastObjectRW`1.IsFastObjectInterface">
            <summary>
            获取当前类型的读写接口是否为 FastObjectInterface。
            </summary>
        </member>
        <member name="P:Swifter.RW.FastObjectRW`1.CurrentOptions">
            <summary>
            读取或设置该类型的 FastObjectRWOptions 枚举配置项。
            如果该类型已经初始化完成，则无法设置该值，且发生异常。
            此属性不是高性能的，请不要多次读写。
            </summary>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.Create">
            <summary>
            创建 FastObjectRW 实例。
            </summary>
            <returns>返回 FastObjectRW 实例</returns>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.GetValueInterfaceInstance(System.Int32)">
            <summary>
            获取指定索引处字段的值读写接口的实例。
            此方法供内部使用。
            </summary>
            <param name="index">索引</param>
            <returns>返回读写接口实例</returns>
        </member>
        <member name="F:Swifter.RW.FastObjectRW`1.content">
            <summary>
            数据源。
            </summary>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.Initialize">
            <summary>
            调用默认无参的构造函数初始化数据源。
            </summary>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.Initialize(System.Int32)">
            <summary>
            调用默认无参的构造函数初始化数据源。
            </summary>
            <param name="capacity">不使用此参数</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnReadValue(System.String,Swifter.RW.IValueWriter)">
            <summary>
            将指定名称的成员的值写入到值写入器中。
            </summary>
            <param name="key">指定名称</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnWriteValue(System.String,Swifter.RW.IValueReader)">
            <summary>
            将值读取器中的值写入到指定名称的成员中。
            </summary>
            <param name="key">指定名称</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnReadAll(Swifter.RW.IDataWriter{System.String})">
            <summary>
            将数据源中的所有成员写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnWriteAll(Swifter.RW.IDataReader{System.String})">
            <summary>
            从数据读取器中读取所有数据源字段到数据源的值
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="P:Swifter.RW.FastObjectRW`1.Item(System.String)">
            <summary>
            获取指定名称的成员的值读写器。
            </summary>
            <param name="key">指定名称</param>
            <returns>返回值读写器</returns>
        </member>
        <member name="P:Swifter.RW.FastObjectRW`1.Item(Swifter.Tools.Ps{System.Char})">
            <summary>
            获取指定名称的成员的值读写器。
            </summary>
            <param name="key">指定名称</param>
            <returns>返回值读写器</returns>
        </member>
        <member name="P:Swifter.RW.FastObjectRW`1.Item(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte})">
            <summary>
            获取指定名称的成员的值读写器。
            </summary>
            <param name="key">指定名称</param>
            <returns>返回值读写器</returns>
        </member>
        <member name="P:Swifter.RW.FastObjectRW`1.Item(System.Int32)">
            <summary>
            获取指定索引处的成员的值读写器。
            </summary>
            <param name="index">指定索引</param>
            <returns>返回值读写器</returns>
        </member>
        <member name="P:Swifter.RW.FastObjectRW`1.Keys">
            <summary>
            获取该类型所有的成员。
            </summary>
        </member>
        <member name="P:Swifter.RW.FastObjectRW`1.Count">
            <summary>
            获取该类型所有的成员的数量。
            </summary>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnReadValue(Swifter.Tools.Ps{System.Char},Swifter.RW.IValueWriter)">
            <summary>
            将指定名称的成员的值写入到值写入器中。
            </summary>
            <param name="key">指定名称</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnReadAll(Swifter.RW.IDataWriter{Swifter.Tools.Ps{System.Char}})">
            <summary>
            将数据源中的所有成员写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnWriteValue(Swifter.Tools.Ps{System.Char},Swifter.RW.IValueReader)">
            <summary>
            将值读取器中的值写入到指定名称的成员中。
            </summary>
            <param name="key">指定名称</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnWriteAll(Swifter.RW.IDataReader{Swifter.Tools.Ps{System.Char}})">
            <summary>
            从数据读取器中读取所有数据源字段到数据源的值
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnReadValue(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte},Swifter.RW.IValueWriter)">
            <summary>
            将指定名称的成员的值写入到值写入器中。
            </summary>
            <param name="key">指定名称</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnReadAll(Swifter.RW.IDataWriter{Swifter.Tools.Ps{Swifter.Tools.Utf8Byte}})">
            <summary>
            将数据源中的所有成员写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnWriteValue(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte},Swifter.RW.IValueReader)">
            <summary>
            将值读取器中的值写入到指定名称的成员中。
            </summary>
            <param name="key">指定名称</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnWriteAll(Swifter.RW.IDataReader{Swifter.Tools.Ps{Swifter.Tools.Utf8Byte}})">
            <summary>
            从数据读取器中读取所有数据源字段到数据源的值
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnReadValue(System.Int32,Swifter.RW.IValueWriter)">
            <summary>
            将指定索引处的成员的值写入到值写入器中。
            </summary>
            <param name="key">指定索引处</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnReadAll(Swifter.RW.IDataWriter{System.Int32})">
            <summary>
            将数据源中的所有成员写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnWriteValue(System.Int32,Swifter.RW.IValueReader)">
            <summary>
            将值读取器中的值写入到指定索引处的成员中。
            </summary>
            <param name="key">指定索引处</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.OnWriteAll(Swifter.RW.IDataReader{System.Int32})">
            <summary>
            从数据读取器中读取所有数据源字段到数据源的值
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.GetOrdinal(System.String)">
            <summary>
            获取指定名称的字段的序号。
            </summary>
            <param name="name">指定名称</param>
            <returns>返回序号，如果没有该字段，则返回 -1</returns>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.GetOrdinal(Swifter.Tools.Ps{System.Char})">
            <summary>
            获取指定名称的字段的序号。
            </summary>
            <param name="name">指定名称</param>
            <returns>返回序号，如果没有该字段，则返回 -1</returns>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.GetOrdinal(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte})">
            <summary>
            获取指定名称的字段的序号。
            </summary>
            <param name="name">指定名称</param>
            <returns>返回序号，如果没有该字段，则返回 -1</returns>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.GetKey(System.Int32,System.String@)">
            <summary>
            获取指定索引处的字段名称。
            </summary>
            <param name="ordinal">指定索引</param>
            <param name="name">返回字段名称</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.GetKey(System.Int32,Swifter.Tools.Ps{System.Char}@)">
            <summary>
            获取指定索引处的字段名称。
            </summary>
            <param name="ordinal">指定索引</param>
            <param name="name">返回字段名称</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.GetKey(System.Int32,Swifter.Tools.Ps{Swifter.Tools.Utf8Byte}@)">
            <summary>
            获取指定索引处的字段名称。
            </summary>
            <param name="ordinal">指定索引</param>
            <param name="name">返回字段名称</param>
        </member>
        <member name="M:Swifter.RW.FastObjectRW`1.ToString">
            <summary>
            获取该读写器的名称。
            </summary>
            <returns>返回该读写器的名称</returns>
        </member>
        <member name="P:Swifter.RW.FastObjectRW`1.Content">
            <summary>
            读取或设置该读写器的数据源。
            </summary>
        </member>
        <member name="P:Swifter.RW.FastObjectRW`1.ContentType">
            <summary>
            获取该读写器数据源的类型。
            </summary>
        </member>
        <member name="T:Swifter.RW.FastObjectRWOptions">
            <summary>
            FastObjectRW 初始化配置。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.IgnoreCase">
            <summary>
            忽略大小写。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.NotFoundException">
            <summary>
            字段未找到时发生异常。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.CannotGetException">
            <summary>
            不能读取时发生异常。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.CannotSetException">
            <summary>
            不能写入时发送异常。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.BasicTypeDirectCallMethod">
            <summary>
            基础类型直接调用方法读写，不经过 <see cref="T:Swifter.RW.ValueInterface`1"/>。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.Property">
            <summary>
            读写器包含属性。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.Field">
            <summary>
            读写器包含字段。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.InheritedMembers">
            <summary>
            读写器包含继承的成员。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.SkipDefaultValue">
            <summary>
            在 OnReadAll 中跳过具有类型默认值的成员。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.MembersOptIn">
            <summary>
            在 OnReadAll 时只读取已定义 <see cref="T:Swifter.RW.RWFieldAttribute"/> 特性的成员（包括继承的类）。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.Allocate">
            <summary>
            在 Initialize 时，不调用构造方法初始化，而是直接从内存中分配这个对象的实例。
            </summary>
        </member>
        <member name="F:Swifter.RW.FastObjectRWOptions.AutoPropertyDirectRW">
            <summary>
            当属性为自动属性时，直接对该属性对应的字段进行读写。
            </summary>
        </member>
        <member name="T:Swifter.RW.IFastObjectRWCreater`1">
            <summary>
            FastObjectRW 创建接口。
            此接口由 Emit 实现。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Swifter.RW.IFastObjectRWCreater`1.Create">
            <summary>
            创建该类型的对象读写器。
            </summary>
            <returns>返回该类型</returns>
        </member>
        <member name="T:Swifter.RW.IAsDataReader">
            <summary>
            数据读取器键类型转换的接口。
            </summary>
        </member>
        <member name="P:Swifter.RW.IAsDataReader.Original">
            <summary>
            原始数据读取器。
            </summary>
        </member>
        <member name="M:Swifter.RW.IAsDataReader.InvokeTIn(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输入类型。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="M:Swifter.RW.IAsDataReader.InvokeTOut(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输出类型方法。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="T:Swifter.RW.AsDataReader`2">
            <summary>
            数据读取器键类型转换的类型。
            </summary>
            <typeparam name="TIn">输入类型</typeparam>
            <typeparam name="TOut">输出类型</typeparam>
        </member>
        <member name="F:Swifter.RW.AsDataReader`2.dataReader">
            <summary>
            原始数据读取器。
            </summary>
        </member>
        <member name="M:Swifter.RW.AsDataReader`2.#ctor(Swifter.RW.IDataReader{`0})">
            <summary>
            创建数据读取器键类型转换类的实例。
            </summary>
            <param name="dataReader">原始数据读取器</param>
        </member>
        <member name="P:Swifter.RW.AsDataReader`2.Item(`1)">
            <summary>
            转换键，并返回该键对应的值读取器。
            </summary>
            <param name="key">键</param>
            <returns>返回值读取器</returns>
        </member>
        <member name="P:Swifter.RW.AsDataReader`2.Keys">
            <summary>
            获取转换后的键集合。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataReader`2.Count">
            <summary>
            获取数据源键的数量。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataReader`2.Original">
            <summary>
            获取原始数据读取器。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataReader`2.ContentType">
            <summary>
            获取原数据读取器的数据源类型。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataReader`2.Content">
            <summary>
            获取或设置原数据读取器的数据源。
            </summary>
        </member>
        <member name="M:Swifter.RW.AsDataReader`2.OnReadAll(Swifter.RW.IDataWriter{`1})">
            <summary>
            将数据中的所有转换后的键与值写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.AsDataReader`2.OnReadValue(`1,Swifter.RW.IValueWriter)">
            <summary>
            转换键，并将该键对应的值写入到值写入器中。
            </summary>
            <param name="key">指定键</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.RW.AsDataReader`2.InvokeTIn(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输入类型方法。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="M:Swifter.RW.AsDataReader`2.InvokeTOut(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输出类型方法。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="T:Swifter.RW.IAsDataRW">
            <summary>
            数据读写器键类型转换的接口。
            </summary>
        </member>
        <member name="P:Swifter.RW.IAsDataRW.Original">
            <summary>
            原始数据读写器。
            </summary>
        </member>
        <member name="M:Swifter.RW.IAsDataRW.InvokeTIn(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输入类型。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="M:Swifter.RW.IAsDataRW.InvokeTOut(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输出类型方法。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="T:Swifter.RW.AsDataRW`2">
            <summary>
            数据读写器键类型转换的类型。
            </summary>
            <typeparam name="TIn">输入类型</typeparam>
            <typeparam name="TOut">输出类型</typeparam>
        </member>
        <member name="F:Swifter.RW.AsDataRW`2.dataRW">
            <summary>
            原始数据读写器。
            </summary>
        </member>
        <member name="M:Swifter.RW.AsDataRW`2.#ctor(Swifter.RW.IDataRW{`0})">
            <summary>
            创建数据读写器键类型转换类的实例。
            </summary>
            <param name="dataRW">原始数据读写器</param>
        </member>
        <member name="P:Swifter.RW.AsDataRW`2.Item(`1)">
            <summary>
            转换键，并返回该键对应的值读写器。
            </summary>
            <param name="key">键</param>
            <returns>返回值读写器</returns>
        </member>
        <member name="P:Swifter.RW.AsDataRW`2.Keys">
            <summary>
            获取转换后的键集合。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataRW`2.Count">
            <summary>
            获取数据源键的数量。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataRW`2.Original">
            <summary>
            获取原数据读写器。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataRW`2.Content">
            <summary>
            获取或设置原数据读写器的数据源。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataRW`2.ContentType">
            <summary>
            获取原数据读写器的数据源类型。
            </summary>
        </member>
        <member name="M:Swifter.RW.AsDataRW`2.Initialize">
            <summary>
            初始化数据源。
            </summary>
        </member>
        <member name="M:Swifter.RW.AsDataRW`2.Initialize(System.Int32)">
            <summary>
            初始化具有指定容量的数据源。
            </summary>
            <param name="capacity">指定容量</param>
        </member>
        <member name="M:Swifter.RW.AsDataRW`2.InvokeTIn(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输入类型方法。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="M:Swifter.RW.AsDataRW`2.InvokeTOut(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输出类型方法。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="M:Swifter.RW.AsDataRW`2.OnReadAll(Swifter.RW.IDataWriter{`1})">
            <summary>
            将数据中的所有转换后的键与值写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.AsDataRW`2.OnReadValue(`1,Swifter.RW.IValueWriter)">
            <summary>
            转换键，并将该键对应的值写入到值写入器中。
            </summary>
            <param name="key">指定键</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.RW.AsDataRW`2.OnWriteAll(Swifter.RW.IDataReader{`1})">
            <summary>
            将数据中的所有转换后的键从读取器中读取所有值写入到数据源中。
            </summary>
            <param name="dataReader"></param>
        </member>
        <member name="M:Swifter.RW.AsDataRW`2.OnWriteValue(`1,Swifter.RW.IValueReader)">
            <summary>
            从值读取器中读取一个值设置到指定键的值中。
            </summary>
            <param name="key">指定键</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="T:Swifter.RW.IAsDataWriter">
            <summary>
            数据写入器键类型转换的接口。
            </summary>
        </member>
        <member name="P:Swifter.RW.IAsDataWriter.Original">
            <summary>
            原始数据写入器。
            </summary>
        </member>
        <member name="M:Swifter.RW.IAsDataWriter.InvokeTIn(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输入类型。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="M:Swifter.RW.IAsDataWriter.InvokeTOut(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输出类型方法。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="T:Swifter.RW.AsDataWriter`2">
            <summary>
            数据写入器键类型转换的类型。
            </summary>
            <typeparam name="TIn">输入类型</typeparam>
            <typeparam name="TOut">输出类型</typeparam>
        </member>
        <member name="F:Swifter.RW.AsDataWriter`2.dataWriter">
            <summary>
            原始数据写入器。
            </summary>
        </member>
        <member name="M:Swifter.RW.AsDataWriter`2.#ctor(Swifter.RW.IDataWriter{`0})">
            <summary>
            创建数据写入器键类型转换类的实例。
            </summary>
            <param name="dataWriter">原始数据写入器</param>
        </member>
        <member name="P:Swifter.RW.AsDataWriter`2.Item(`1)">
            <summary>
            转换键，并返回该键对应的值写入器。
            </summary>
            <param name="key">键</param>
            <returns>返回值写入器</returns>
        </member>
        <member name="P:Swifter.RW.AsDataWriter`2.Keys">
            <summary>
            获取转换后的键集合。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataWriter`2.Count">
            <summary>
            获取数据源键的数量。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataWriter`2.Original">
            <summary>
            获取原数据写入器。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataWriter`2.Content">
            <summary>
            获取或设置原数据写入器的数据源。
            </summary>
        </member>
        <member name="P:Swifter.RW.AsDataWriter`2.ContentType">
            <summary>
            获取原数据写入器的数据源类型。
            </summary>
        </member>
        <member name="M:Swifter.RW.AsDataWriter`2.Initialize">
            <summary>
            初始化数据源。
            </summary>
        </member>
        <member name="M:Swifter.RW.AsDataWriter`2.Initialize(System.Int32)">
            <summary>
            初始化具有指定容量的数据源。
            </summary>
            <param name="capacity">指定容量</param>
        </member>
        <member name="M:Swifter.RW.AsDataWriter`2.InvokeTIn(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输入类型方法。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="M:Swifter.RW.AsDataWriter`2.InvokeTOut(Swifter.Tools.IGenericInvoker)">
            <summary>
            执行输出类型方法。
            </summary>
            <param name="invoker">泛型执行器</param>
        </member>
        <member name="M:Swifter.RW.AsDataWriter`2.OnWriteValue(`1,Swifter.RW.IValueReader)">
            <summary>
            从值读取器中读取一个值设置到指定键的值中。
            </summary>
            <param name="key">指定键</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="M:Swifter.RW.AsDataWriter`2.OnWriteAll(Swifter.RW.IDataReader{`1})">
            <summary>
            从数据读取器中读取所有数据源字段到数据源的值。
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="T:Swifter.RW.DataFilterWriter`1">
            <summary>
            数据筛选的辅助数据写入器。
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="F:Swifter.RW.DataFilterWriter`1.ValueInfo">
            <summary>
            内部筛选器信息。
            </summary>
        </member>
        <member name="F:Swifter.RW.DataFilterWriter`1.DataWriter">
            <summary>
            内部写入器。
            </summary>
        </member>
        <member name="F:Swifter.RW.DataFilterWriter`1.ValueFilter">
            <summary>
            内部筛选器。
            </summary>
        </member>
        <member name="M:Swifter.RW.DataFilterWriter`1.#ctor(Swifter.RW.IDataWriter{`0},Swifter.RW.IValueFilter{`0})">
            <summary>
            初始化辅助数据写入器。
            </summary>
            <param name="dataWriter">原始数据写入器</param>
            <param name="valueFilter">数据筛选器</param>
        </member>
        <member name="P:Swifter.RW.DataFilterWriter`1.Item(`0)">
            <summary>
            获取指定键对应的值写入器。
            </summary>
            <param name="key">指定键</param>
            <returns>返回值写入器</returns>
        </member>
        <member name="P:Swifter.RW.DataFilterWriter`1.Keys">
            <summary>
            获取原始数据写入器的键集合。
            </summary>
        </member>
        <member name="P:Swifter.RW.DataFilterWriter`1.Count">
            <summary>
            获取原始数据写入器的键的数量。
            </summary>
        </member>
        <member name="P:Swifter.RW.DataFilterWriter`1.ContentType">
            <summary>
            获取数据源的类型。
            </summary>
        </member>
        <member name="P:Swifter.RW.DataFilterWriter`1.Content">
            <summary>
            获取或设置数据源。
            </summary>
        </member>
        <member name="M:Swifter.RW.DataFilterWriter`1.Initialize">
            <summary>
            初始化原始写入器。
            </summary>
        </member>
        <member name="M:Swifter.RW.DataFilterWriter`1.Initialize(System.Int32)">
            <summary>
            初始化具有指定容量的原始写入器。
            </summary>
            <param name="capacity">指定容量</param>
        </member>
        <member name="M:Swifter.RW.DataFilterWriter`1.OnWriteValue(`0,Swifter.RW.IValueReader)">
            <summary>
            从值读取器中读取一个值设置到原始写入器的指定键的值中。
            </summary>
            <param name="key">指定键</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="M:Swifter.RW.DataFilterWriter`1.OnFilter">
            <summary>
            当在筛选器时的处理函数。
            </summary>
        </member>
        <member name="M:Swifter.RW.DataFilterWriter`1.OnWriteAll(Swifter.RW.IDataReader{`0})">
            <summary>
            从数据读取器中读取所有数据源字段到数据源的值
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="T:Swifter.RW.RWHelper">
            <summary>
            读写器帮助类。
            </summary>
        </member>
        <member name="F:Swifter.RW.RWHelper.DefaultValueReader">
            <summary>
            获取一个所有方法均为获取 default 值的值读取器。
            </summary>
        </member>
        <member name="F:Swifter.RW.RWHelper.DefaultValueRW">
            <summary>
            获取一个所有方法均为获取 default 值或空实现的值读写器。
            </summary>
        </member>
        <member name="M:Swifter.RW.RWHelper.CreateReader``1(``0,System.Boolean)">
            <summary>
            为实例创建读取器。
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="throwException">是否抛出异常</param>
            <param name="obj">实例</param>
            <returns>返回一个读取器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.CreateRW``1(``0,System.Boolean)">
            <summary>
            为实例创建读写器。
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="throwException">是否抛出异常</param>
            <param name="obj">实例</param>
            <returns>返回一个读写器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.CreateWriter``1(System.Boolean)">
            <summary>
            为类型创建一个写入器。
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="throwException">是否抛出异常</param>
            <returns>返回一个写入器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.CreateWriter``1(``0,System.Boolean)">
            <summary>
            为一个实例创建数据写入器。
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="throwException">是否抛出异常</param>
            <param name="obj">实例</param>
            <returns>返回一个写入器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.CreateReader(System.Object,System.Boolean)">
            <summary>
            为实例创建一个读取器。
            </summary>
            <param name="obj">实例</param>
            <param name="throwException">是否抛出异常</param>
            <returns>返回一个读取器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.CreateRW(System.Object,System.Boolean)">
            <summary>
            为实例创建一个读写器。
            </summary>
            <param name="obj">实例</param>
            <param name="throwException">是否抛出异常</param>
            <returns>返回一个读写器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.CreateWriter(System.Type,System.Boolean)">
            <summary>
            为类型创建一个写入器。
            </summary>
            <param name="type">类型</param>
            <param name="throwException">是否抛出异常</param>
            <returns>返回一个写入器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.CreateWriter(System.Object,System.Boolean)">
            <summary>
            为一个实例创建数据写入器。
            </summary>
            <param name="obj">实例</param>
            <param name="throwException">是否抛出异常</param>
            <returns>返回一个写入器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.CreateItemReader``1(Swifter.RW.IDataReader{``0},``0,System.Boolean)">
            <summary>
            为读取器中的字段创建数据读取器。
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
            <param name="dataReader">数据读取器</param>
            <param name="key">字段的键</param>
            <param name="throwException">是否抛出异常</param>
            <returns>返回一个读取器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.CreateItemRW``1(Swifter.RW.IDataReader{``0},``0,System.Boolean)">
            <summary>
            为读取器中的字段创建数据读写器。
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
            <param name="dataReader">数据读取器</param>
            <param name="key">字段的键</param>
            <param name="throwException">是否抛出异常</param>
            <returns>返回一个读写器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.GetItemType``1(Swifter.RW.IDataRW{``0},``0)">
            <summary>
            获取数据读写器中指定键的值的类型。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <param name="dataRW">数据读写器</param>
            <param name="key">指定键</param>
            <returns>返回一个类型</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.GetItemType``1(Swifter.RW.IDataReader{``0},``0)">
            <summary>
            获取数据读取器中指定键的值的类型。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <param name="dataReader">数据读取器</param>
            <param name="key">指定键</param>
            <returns>返回一个类型</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.GetItemType``1(Swifter.RW.IDataWriter{``0},``0)">
            <summary>
            获取数据写入器中指定键的值的类型。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <param name="dataWriter">数据写入器</param>
            <param name="key">指定键</param>
            <returns>返回一个类型</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.As``1(Swifter.RW.IDataReader)">
            <summary>
            将数据读取器转换为具有键的类型的具体数据读取器。
            </summary>
            <param name="dataReader">数据读取器</param>
            <typeparam name="T">键的类型</typeparam>
            <returns>返回具体数据读取器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.As``1(Swifter.RW.IDataWriter)">
            <summary>
            将数据写入器转换为具有键的类型的具体数据写入器。
            </summary>
            <param name="dataWriter">数据写入器</param>
            <typeparam name="T">键的类型</typeparam>
            <returns>返回具体数据写入器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.As``1(Swifter.RW.IDataRW)">
            <summary>
            将数据写入器转换为具有键的类型的具体数据写入器。
            </summary>
            <param name="dataRW">数据写入器</param>
            <typeparam name="T">键的类型</typeparam>
            <returns>返回具体数据写入器</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.IsArrayKey``1">
            <summary>
            获取一个 键类型 是否可作为数组索引。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <returns>返回一个 bool 值。</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.ReadDictionary``2(Swifter.RW.IValueReader)">
            <summary>
            从值读取器中读取一个字典。
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
            <typeparam name="TValue">值的类型</typeparam>
            <param name="valueReader">值读取器</param>
            <returns>返回一个字典</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.WriteDictionary``2(Swifter.RW.IValueWriter,System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            往值写入器中写入一个字典。
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
            <typeparam name="TValue">值的类型</typeparam>
            <param name="valueWriter">值读取器</param>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Swifter.RW.RWHelper.ReadList``1(Swifter.RW.IValueReader)">
            <summary>
            从值读取器中读取一个列表。
            </summary>
            <typeparam name="TValue">值的类型</typeparam>
            <param name="valueReader">值读取器</param>
            <returns>返回一个列表</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.WriteList``1(Swifter.RW.IValueWriter,System.Collections.Generic.List{``0})">
            <summary>
            往值写入器中写入一个列表。
            </summary>
            <typeparam name="TValue">值的类型</typeparam>
            <param name="valueWriter">值读取器</param>
            <param name="list">列表</param>
        </member>
        <member name="M:Swifter.RW.RWHelper.ReadArray``1(Swifter.RW.IValueReader)">
            <summary>
            从值读取器中读取一个数组。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="valueReader">值读取器</param>
            <returns>返回一个数组</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.WriteArray``1(Swifter.RW.IValueWriter,``0[])">
            <summary>
            往值写入器中写入一个数组。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="valueWriter">值写入器</param>
            <param name="array">数组</param>
        </member>
        <member name="M:Swifter.RW.RWHelper.FastReadObject``1(Swifter.RW.IValueReader)">
            <summary>
            使用 <see cref="T:Swifter.RW.FastObjectRW`1"/> 从值读取器中读取一个对象。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="valueReader">值读取器</param>
            <returns>返回一个对象</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.FastWriteObject``1(Swifter.RW.IValueWriter,``0)">
            <summary>
            使用 <see cref="T:Swifter.RW.FastObjectRW`1"/> 往值写入器中写入一个对象。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="valueWriter">值写入器</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Swifter.RW.RWHelper.XReadObject``1(Swifter.RW.IValueReader,Swifter.Reflection.XBindingFlags)">
            <summary>
            使用 <see cref="T:Swifter.Reflection.XObjectRW"/> 从值读取器中读取一个对象。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="valueReader">值读取器</param>
            <param name="flags">创建 <see cref="T:Swifter.Reflection.XObjectRW"/> 的标识符</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:Swifter.RW.RWHelper.XWriteObject``1(Swifter.RW.IValueWriter,``0,Swifter.Reflection.XBindingFlags)">
            <summary>
            使用 <see cref="T:Swifter.Reflection.XObjectRW"/> 往值写入器中写入一个对象。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="valueWriter">值写入器</param>
            <param name="obj">对象</param>
            <param name="flags">创建 <see cref="T:Swifter.Reflection.XObjectRW"/> 的标识符</param>
        </member>
        <member name="T:Swifter.RW.ValueInterfaceExtensions">
            <summary>
            提供 ValueInterface 的扩展方法。
            </summary>
        </member>
        <member name="M:Swifter.RW.ValueInterfaceExtensions.SetValueInterface``1(Swifter.RW.ITargetedBind,Swifter.RW.IValueInterface{``0})">
            <summary>
            设置支持针对性接口的对象指定类型的值读写接口。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="targeted">支持针对性接口的对象</param>
            <param name="valueInterface">值读写接口</param>
        </member>
        <member name="M:Swifter.RW.ValueInterfaceExtensions.SetValueFormat``1(Swifter.RW.ITargetedBind,System.String)">
            <summary>
            设置支持针对性接口的对象指定类型的格式。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="targeted">支持针对性接口的对象</param>
            <param name="format">格式</param>
        </member>
        <member name="M:Swifter.RW.ValueInterfaceExtensions.SetDateTimeFormat(Swifter.RW.ITargetedBind,System.String)">
            <summary>
            设置支持针对性接口的对象的 DateTime 格式。
            </summary>
            <param name="targeted">支持针对性接口的对象</param>
            <param name="format">格式</param>
        </member>
        <member name="M:Swifter.RW.ValueInterfaceExtensions.SetDateTimeOffsetFormat(Swifter.RW.ITargetedBind,System.String)">
            <summary>
            设置支持针对性接口的对象的 DateTimeOffset 格式。
            </summary>
            <param name="targeted">支持针对性接口的对象</param>
            <param name="format">格式</param>
        </member>
        <member name="T:Swifter.RW.IDataReader`1">
            <summary>
            提供数据的读取方法。
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
        </member>
        <member name="P:Swifter.RW.IDataReader`1.Keys">
            <summary>
            获取键的集合。
            </summary>
        </member>
        <member name="P:Swifter.RW.IDataReader`1.Item(`0)">
            <summary>
            获取指定键的值读取器实例。
            </summary>
            <param name="key">指定键</param>
            <returns>返回值读取器实例</returns>
        </member>
        <member name="M:Swifter.RW.IDataReader`1.OnReadValue(`0,Swifter.RW.IValueWriter)">
            <summary>
            将指定键对应的值写入到值写入器中。
            </summary>
            <param name="key">指定键</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.RW.IDataReader`1.OnReadAll(Swifter.RW.IDataWriter{`0})">
            <summary>
            将数据中的所有键与值写入到数据写入器中。
            </summary>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="T:Swifter.RW.IDataReader">
            <summary>
            表示一个数据读取器。
            </summary>
        </member>
        <member name="P:Swifter.RW.IDataReader.Count">
            <summary>
            获取数据源键的数量。
            -1 表示未知数量。
            </summary>
        </member>
        <member name="P:Swifter.RW.IDataReader.ContentType">
            <summary>
            获取数据源的类型。
            </summary>
        </member>
        <member name="P:Swifter.RW.IDataReader.Content">
            <summary>
            获取或设置数据源。
            </summary>
        </member>
        <member name="T:Swifter.RW.IDataRW`1">
            <summary>
            数据读写器
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
        </member>
        <member name="P:Swifter.RW.IDataRW`1.Keys">
            <summary>
            获取键集合。
            </summary>
        </member>
        <member name="P:Swifter.RW.IDataRW`1.Item(`0)">
            <summary>
            获取指定键的值读写器实例。
            </summary>
            <param name="key">指定键</param>
            <returns>返回值读写器实例</returns>
        </member>
        <member name="T:Swifter.RW.IDataRW">
            <summary>
            表示数据读写器
            </summary>
        </member>
        <member name="P:Swifter.RW.IDataRW.Count">
            <summary>
            获取读写器的键的数量。
            </summary>
        </member>
        <member name="P:Swifter.RW.IDataRW.ContentType">
            <summary>
            获取数据源的类型。
            </summary>
        </member>
        <member name="P:Swifter.RW.IDataRW.Content">
            <summary>
            获取或设置数据源。
            </summary>
        </member>
        <member name="T:Swifter.RW.IDataWriter`1">
            <summary>
            提供数据的写入方法。
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
        </member>
        <member name="P:Swifter.RW.IDataWriter`1.Keys">
            <summary>
            获取键的集合。
            </summary>
        </member>
        <member name="M:Swifter.RW.IDataWriter`1.OnWriteValue(`0,Swifter.RW.IValueReader)">
            <summary>
            从值读取器中读取一个值设置到指定键的值中。
            </summary>
            <param name="key">指定键</param>
            <param name="valueReader">值读取器</param>
        </member>
        <member name="M:Swifter.RW.IDataWriter`1.OnWriteAll(Swifter.RW.IDataReader{`0})">
            <summary>
            从数据读取器中读取所有数据源字段到数据源的值。
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="P:Swifter.RW.IDataWriter`1.Item(`0)">
            <summary>
            获取指定键的值写入器实例。
            </summary>
            <param name="key">指定键</param>
            <returns>返回值写入器实例</returns>
        </member>
        <member name="T:Swifter.RW.IDataWriter">
            <summary>
            表示一个数据写入器。
            </summary>
        </member>
        <member name="M:Swifter.RW.IDataWriter.Initialize">
            <summary>
            初始化数据源。
            </summary>
        </member>
        <member name="M:Swifter.RW.IDataWriter.Initialize(System.Int32)">
            <summary>
            初始化具有指定容量的数据源。
            </summary>
            <param name="capacity">指定容量</param>
        </member>
        <member name="P:Swifter.RW.IDataWriter.Count">
            <summary>
            获取数据源键的数量。
            -1 表示未知数量。
            </summary>
        </member>
        <member name="P:Swifter.RW.IDataWriter.ContentType">
            <summary>
            获取数据源的类型。
            </summary>
        </member>
        <member name="P:Swifter.RW.IDataWriter.Content">
            <summary>
            获取或设置数据源。
            </summary>
        </member>
        <member name="T:Swifter.RW.IObjectField">
            <summary>
            对象读写器的字段信息。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.Name">
            <summary>
            字段名称。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.BeforeType">
            <summary>
            字段的初始类型。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.AfterType">
            <summary>
            字段在经过处理之后的类型。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.CanRead">
            <summary>
            能否读取。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.CanWrite">
            <summary>
            能否写入。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.IsPublic">
            <summary>
            是否公开的字段。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.IsStatic">
            <summary>
            是否时静态字段。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.Order">
            <summary>
            字段排序值。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.Original">
            <summary>
            字段原始信息。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.SkipDefaultValue">
            <summary>
            该字段在 OnReadAll 时是否忽略默认值。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.CannotGetException">
            <summary>
            当无法获取该字段的值时是否引发异常。
            </summary>
        </member>
        <member name="P:Swifter.RW.IObjectField.CannotSetException">
            <summary>
            当无法设置该字段的值时是否引发异常。
            </summary>
        </member>
        <member name="T:Swifter.RW.ITargetedBind">
            <summary>
            表示支持针对性接口的对象。
            </summary>
        </member>
        <member name="P:Swifter.RW.ITargetedBind.TargetedId">
            <summary>
            获取针对目标的 Id。
            </summary>
        </member>
        <member name="M:Swifter.RW.ITargetedBind.MakeTargetedId">
            <summary>
            分配针对目标的 Id。
            </summary>
        </member>
        <member name="T:Swifter.RW.IValueFilter`1">
            <summary>
            数据读取器的值筛选接口。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
        </member>
        <member name="M:Swifter.RW.IValueFilter`1.Filter(Swifter.RW.ValueFilterInfo{`0})">
            <summary>
            值筛选方法。
            </summary>
            <param name="valueInfo">值信息。</param>
            <returns>返回读取或不读取该值。</returns>
        </member>
        <member name="T:Swifter.RW.IValueInterface`1">
            <summary>
            提供某一类型在 IValueReader 中读取值和在 IValueWriter 写入值的方法。
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Swifter.RW.IValueInterface`1.ReadValue(Swifter.RW.IValueReader)">
            <summary>
            在 IValueReader 中读取该类型的值。
            </summary>
            <param name="valueReader">值读取器</param>
            <returns>返回该类型的值</returns>
        </member>
        <member name="M:Swifter.RW.IValueInterface`1.WriteValue(Swifter.RW.IValueWriter,`0)">
            <summary>
            在 IValueWriter 中写入该类型的值。
            </summary>
            <param name="valueWriter">值写入器</param>
            <param name="value">该类型的值</param>
        </member>
        <member name="T:Swifter.RW.IValueInterfaceMaper">
            <summary>
            提供类型与 IValueInterface 的匹配器。
            实现它，并使用 ValueInterface.AddMaper 添加它的实例即可自定义类型的读写方法。
            </summary>
        </member>
        <member name="M:Swifter.RW.IValueInterfaceMaper.TryMap``1">
            <summary>
            类型与 IValueInterface 的匹配方法。
            匹配成功则返回实例，不成功则返回 Null。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回一个 IValueInterface/<T/> 实例</returns>
        </member>
        <member name="T:Swifter.RW.IValueReader">
            <summary>
            提供基础类型的值的读取器
            </summary>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadInt64">
            <summary>
            读取 Int64 值。
            </summary>
            <returns>返回一个 long 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadDouble">
            <summary>
            读取 Double 值。
            </summary>
            <returns>返回一个 double 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadString">
            <summary>
            读取 String 值。
            </summary>
            <returns>返回一个 string 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadBoolean">
            <summary>
            读取 Boolean 值。
            </summary>
            <returns>返回一个 bool 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadByte">
            <summary>
            读取 Byte 值。
            </summary>
            <returns>返回一个 byte 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadChar">
            <summary>
            读取 Char 值。
            </summary>
            <returns>返回一个 char 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadDateTime">
            <summary>
            读取 DateTime 值。
            </summary>
            <returns>返回一个 DateTime 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadDecimal">
            <summary>
            读取 Decimal 值。
            </summary>
            <returns>返回一个 decimal 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadInt16">
            <summary>
            读取 Int16 值。
            </summary>
            <returns>返回一个 short 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadInt32">
            <summary>
            读取 Int32 值。
            </summary>
            <returns>返回一个 int 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadSByte">
            <summary>
            读取 SByte 值。
            </summary>
            <returns>返回一个 sbyte 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadSingle">
            <summary>
            读取 Single 值。
            </summary>
            <returns>返回一个 float 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadUInt16">
            <summary>
            读取 UInt16 值。
            </summary>
            <returns>返回一个 ushort 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadUInt32">
            <summary>
            读取 UInt32 值。
            </summary>
            <returns>返回一个 uint 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadUInt64">
            <summary>
            读取 UInt64 值。
            </summary>
            <returns>返回一个 ulong 值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadObject(Swifter.RW.IDataWriter{System.String})">
            <summary>
            读取一个对象数据结构。
            </summary>
            <param name="valueWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
            <summary>
            读取一个数组数据结构。
            </summary>
            <param name="valueWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.IValueReader.DirectRead">
            <summary>
            直接读取一个值。
            </summary>
            <returns>返回一个未知类型的值。</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadNullable``1">
            <summary>
            读取一个可空类型。注意：不可依赖此方法读取非空类型的值。
            </summary>
            <typeparam name="T">一个值类型</typeparam>
            <returns>返回一个可空类型的值</returns>
        </member>
        <member name="M:Swifter.RW.IValueReader.ReadEnum``1">
            <summary>
            读取一个枚举。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>返回一个枚举值</returns>
        </member>
        <member name="T:Swifter.RW.IValueReader`1">
            <summary>
            提供具体类型的值的读取方法。
            </summary>
            <typeparam name="T">具体类型</typeparam>
        </member>
        <member name="M:Swifter.RW.IValueReader`1.ReadValue">
            <summary>
            读取该类型的值。
            </summary>
            <returns>返回该类型的值</returns>
        </member>
        <member name="T:Swifter.RW.IValueRW">
            <summary>
            基础类型的值读写器
            </summary>
        </member>
        <member name="T:Swifter.RW.IValueRW`1">
            <summary>
            自定义类型的值读写器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Swifter.RW.IValueWriter">
            <summary>
            基础类型的值写入器。
            </summary>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteBoolean(System.Boolean)">
            <summary>
            写入一个 Boolean 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteByte(System.Byte)">
            <summary>
            写入一个 Byte 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteSByte(System.SByte)">
            <summary>
            写入一个 SByte 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteInt16(System.Int16)">
            <summary>
            写入一个 Int16 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteChar(System.Char)">
            <summary>
            写入一个 Char 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteUInt16(System.UInt16)">
            <summary>
            写入一个 UInt16 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteInt32(System.Int32)">
            <summary>
            写入一个 Int32 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteSingle(System.Single)">
            <summary>
            写入一个 Boolean 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteUInt32(System.UInt32)">
            <summary>
            写入一个 UInt32 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteInt64(System.Int64)">
            <summary>
            写入一个 Int64 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteDouble(System.Double)">
            <summary>
            写入一个 Double 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteUInt64(System.UInt64)">
            <summary>
            写入一个 UInt64 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteString(System.String)">
            <summary>
            写入一个 String 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteDateTime(System.DateTime)">
            <summary>
            写入一个 DateTime 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteDecimal(System.Decimal)">
            <summary>
            写入一个 Decimal 值
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteObject(Swifter.RW.IDataReader{System.String})">
            <summary>
            写入一个对象结构的值
            </summary>
            <param name="dataReader">对象结构读取器</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteArray(Swifter.RW.IDataReader{System.Int32})">
            <summary>
            写入一个数组结构的值
            </summary>
            <param name="dataReader">数组结构读取器</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.WriteEnum``1(``0)">
            <summary>
            写入一个枚举值。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="value">枚举值</param>
        </member>
        <member name="M:Swifter.RW.IValueWriter.DirectWrite(System.Object)">
            <summary>
            直接写入一个对象。
            </summary>
            <param name="value">对象 值</param>
        </member>
        <member name="T:Swifter.RW.IValueWriter`1">
            <summary>
            指定类型的值写入器
            </summary>
            <typeparam name="T">指定类型</typeparam>
        </member>
        <member name="M:Swifter.RW.IValueWriter`1.WriteValue(`0)">
            <summary>
            写入该类型的值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:Swifter.RW.RWBoolean">
            <summary>
            表示具有三个值的 Bool 配置项。
            </summary>
        </member>
        <member name="F:Swifter.RW.RWBoolean.None">
            <summary>
            未定义
            </summary>
        </member>
        <member name="F:Swifter.RW.RWBoolean.Yes">
            <summary>
            是
            </summary>
        </member>
        <member name="F:Swifter.RW.RWBoolean.No">
            <summary>
            否
            </summary>
        </member>
        <member name="T:Swifter.RW.RWFieldAccess">
            <summary>
            对象读写器的字段可访问性。
            </summary>
        </member>
        <member name="F:Swifter.RW.RWFieldAccess.RW">
            <summary>
            表示此字段允许读写。
            </summary>
        </member>
        <member name="F:Swifter.RW.RWFieldAccess.Ignore">
            <summary>
            表示忽略此字段。
            </summary>
        </member>
        <member name="F:Swifter.RW.RWFieldAccess.ReadOnly">
            <summary>
            表示此字段只能读。
            </summary>
        </member>
        <member name="F:Swifter.RW.RWFieldAccess.WriteOnly">
            <summary>
            表示此字段只能写。
            </summary>
        </member>
        <member name="T:Swifter.RW.RWFieldAttribute">
            <summary>
            表示对象读取器的一个字段的特性。
            </summary>
        </member>
        <member name="F:Swifter.RW.RWFieldAttribute.DefaultOrder">
            <summary>
            默认排序值。
            </summary>
        </member>
        <member name="M:Swifter.RW.RWFieldAttribute.GetBestMatchInterfaceMethod(System.Type,System.Type,System.Reflection.MethodInfo@,System.Reflection.MethodInfo@)">
            <summary>
            获取与指定类型匹配的值读写接口方法。
            </summary>
            <param name="interfaceType">实现 IValueInterface 接口的类型</param>
            <param name="fieldType">指定类型</param>
            <param name="readValueMethod">值读取接口</param>
            <param name="writeValueMethod">值写入接口</param>
        </member>
        <member name="M:Swifter.RW.RWFieldAttribute.GetBestMatchRWMethod(System.Type,System.Type,System.Reflection.MethodInfo@,System.Reflection.MethodInfo@)">
            <summary>
            获取与指定类型匹配的读写方法。
            </summary>
            <param name="interfaceType">实现读写接口的类型</param>
            <param name="fieldType">指定类型</param>
            <param name="readValueMethod">值读取接口</param>
            <param name="writeValueMethod">值写入接口</param>
        </member>
        <member name="M:Swifter.RW.RWFieldAttribute.GetBestMatchInterfaceMethod(System.Type,System.Object@,System.Reflection.MethodInfo@,System.Reflection.MethodInfo@)">
            <summary>
            获取与指定类型匹配的值读写接口方法。
            </summary>
            <param name="fieldType">指定类型</param>
            <param name="firstArgument">值读写接口实例</param>
            <param name="readValueMethod">值读取接口</param>
            <param name="writeValueMethod">值写入接口</param>
        </member>
        <member name="M:Swifter.RW.RWFieldAttribute.GetInterfaceType(System.Type)">
            <summary>
            获取当前 Field 类型的 InterfaceType。
            </summary>
            <param name="fieldType">指定类型</param>
            <returns></returns>
        </member>
        <member name="P:Swifter.RW.RWFieldAttribute.InterfaceType">
            <summary>
            获取或设置字段的值读写接口类型。
            </summary>
        </member>
        <member name="M:Swifter.RW.RWFieldAttribute.#ctor">
            <summary>
            初始化对象读取器的一个字段的特性。
            </summary>
        </member>
        <member name="M:Swifter.RW.RWFieldAttribute.#ctor(System.String)">
            <summary>
            初始化具有指定名称的对象读取器的一个字段的特性。
            </summary>
            <param name="name">指定名称</param>
        </member>
        <member name="P:Swifter.RW.RWFieldAttribute.Name">
            <summary>
            此字段的名称。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWFieldAttribute.Order">
            <summary>
            此字段的排序值。约小越靠前，默认值为最靠后。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWFieldAttribute.Access">
            <summary>
            字段的可访问性。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWFieldAttribute.SkipDefaultValue">
            <summary>
            是否在 OnReadAll 中跳过当前成员的默认值。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWFieldAttribute.CannotGetException">
            <summary>
            是否字段不能读取值时发生异常。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWFieldAttribute.CannotSetException">
            <summary>
            是否字段不能写入值时发生异常。
            </summary>
        </member>
        <member name="T:Swifter.RW.RWFormatAttribute">
            <summary>
            表示字段格式的读写器特性。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWFormatAttribute.Format">
            <summary>
            格式化参数。
            </summary>
        </member>
        <member name="M:Swifter.RW.RWFormatAttribute.#ctor(System.String)">
            <summary>
            初始化字段格式特性。
            </summary>
            <param name="format">格式化参数</param>
        </member>
        <member name="M:Swifter.RW.RWFormatAttribute.GetBestMatchInterfaceMethod(System.Type,System.Object@,System.Reflection.MethodInfo@,System.Reflection.MethodInfo@)">
            <summary>
            获取最匹配字段类型的值读写器和方法。
            </summary>
            <param name="fieldType">字段类型</param>
            <param name="firstArgument">值读写器实例</param>
            <param name="readValueMethod">值读取方法</param>
            <param name="writeValueMethod">值写入方法</param>
        </member>
        <member name="T:Swifter.RW.RWObjectAttribute">
            <summary>
            对象读写器的特性形式配置项。
            </summary>
        </member>
        <member name="M:Swifter.RW.RWObjectAttribute.OnCreate(System.Type,System.Collections.Generic.List{Swifter.RW.IObjectField}@)">
            <summary>
            在创建对象读写器时的处理方法。
            </summary>
            <param name="type">对象类型</param>
            <param name="fields">对象字段集合</param>
        </member>
        <member name="M:Swifter.RW.RWObjectAttribute.OnLoadMember(System.Type,System.Reflection.MemberInfo,System.Collections.Generic.List{Swifter.RW.RWFieldAttribute}@)">
            <summary>
            在加载成员时的处理方法
            </summary>
            <param name="type">对象类型</param>
            <param name="memberInfo">成员信息</param>
            <param name="attributes">成员的特性</param>
        </member>
        <member name="P:Swifter.RW.RWObjectAttribute.IgnoreCace">
            <summary>
            是否忽略大小写。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWObjectAttribute.NotFoundException">
            <summary>
            是否字段未找到时发生异常。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWObjectAttribute.CannotGetException">
            <summary>
            是否字段不能读取值时发生异常。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWObjectAttribute.CannotSetException">
            <summary>
            是否字段不能写入值时发生异常。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWObjectAttribute.IncludeProperties">
            <summary>
            是否包含属性。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWObjectAttribute.IncludeFields">
            <summary>
            是否包含字段。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWObjectAttribute.IncludeInherited">
            <summary>
            是否包含继承的成员。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWObjectAttribute.SkipDefaultValue">
            <summary>
            是否在 OnReadAll 中跳过具有类型默认值的成员。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWObjectAttribute.MembersOptIn">
            <summary>
            是否在 OnReadAll 时只读取已定义 RWField(包括继承的类) 特性的成员。
            </summary>
        </member>
        <member name="T:Swifter.RW.RWPathInfo">
            <summary>
            表示对象路径信息。
            </summary>
        </member>
        <member name="F:Swifter.RW.RWPathInfo.Root">
            <summary>
            表示根路径对象。
            </summary>
        </member>
        <member name="F:Swifter.RW.RWPathInfo.RootToken">
            <summary>
            根路径名称。
            </summary>
        </member>
        <member name="F:Swifter.RW.RWPathInfo.PathSeparator">
            <summary>
            路径分隔符。
            </summary>
        </member>
        <member name="M:Swifter.RW.RWPathInfo.Create``1(``0,Swifter.RW.RWPathInfo)">
            <summary>
            创建一个对象路径信息。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <param name="key">键</param>
            <param name="parent">父级路径</param>
            <returns>返回一个新的路径信息</returns>
        </member>
        <member name="M:Swifter.RW.RWPathInfo.SetPath``1(Swifter.RW.RWPathInfo@,``0)">
            <summary>
            设置路径键。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <param name="path">要设置的路径</param>
            <param name="key">键</param>
        </member>
        <member name="F:Swifter.RW.RWPathInfo.Parent">
            <summary>
            父级路径。
            </summary>
        </member>
        <member name="P:Swifter.RW.RWPathInfo.IsRoot">
            <summary>
            是否为根路径。
            </summary>
        </member>
        <member name="M:Swifter.RW.RWPathInfo.GetKey">
            <summary>
            获取键。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Swifter.RW.RWPathInfo.GetValueReader(Swifter.RW.IDataReader)">
            <summary>
            获取一个数据读取器该路径的值读取器。
            </summary>
            <param name="dataReader">数据读取器</param>
            <returns>返回一个值读取器</returns>
        </member>
        <member name="M:Swifter.RW.RWPathInfo.GetValueWriter(Swifter.RW.IDataWriter)">
            <summary>
            设置一个数据写入器该路径的值写入器。
            </summary>
            <param name="dataWriter">数据写入器</param>
            <returns>返回一个值写入器</returns>
        </member>
        <member name="M:Swifter.RW.RWPathInfo.OnReadValue(Swifter.RW.IDataReader,Swifter.RW.IValueWriter)">
            <summary>
            让数据读取器读取该路径的值到写入器中。
            </summary>
            <param name="dataReader">数据读取器</param>
            <param name="valueWriter">值写入器</param>
            <returns>返回是否到达</returns>
        </member>
        <member name="M:Swifter.RW.RWPathInfo.OnWriteValue(Swifter.RW.IDataWriter,Swifter.RW.IValueReader)">
            <summary>
            让数据写入器写入读取器中的值到该路径的值中。
            </summary>
            <param name="dataWriter">数据写入器</param>
            <param name="valueReader">值读取器</param>
            <returns>返回是否到达</returns>
        </member>
        <member name="M:Swifter.RW.RWPathInfo.GetDataReader(Swifter.RW.IDataReader)">
            <summary>
            获取数据读取器的值的数据读取器。
            </summary>
            <param name="dataReader">数据读取器</param>
            <returns>返回数据读取器</returns>
        </member>
        <member name="M:Swifter.RW.RWPathInfo.GetDataWriter(Swifter.RW.IDataWriter)">
            <summary>
            获取数据写入器的值的数据写入器。
            </summary>
            <param name="dataWriter">数据写入器</param>
            <returns>返回数据读取器</returns>
        </member>
        <member name="M:Swifter.RW.RWPathInfo.Clone">
            <summary>
            创建副本。
            </summary>
            <returns>返回克隆实例</returns>
        </member>
        <member name="M:Swifter.RW.RWPathInfo.Equals(Swifter.RW.RWPathInfo)">
            <summary>
            比较当前路径是否与指定的路径相同。
            </summary>
            <param name="other">指定的路径</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="T:Swifter.RW.ReadCopyer`1">
            <summary>
            值读取暂存器。
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.#ctor(Swifter.RW.IDataReader{`0},`0)">
            <summary>
            初始化值读取暂存器。
            </summary>
            <param name="dataReader">数据读写器</param>
            <param name="key">键</param>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
            <summary>
            读取一个数组结构数据。
            </summary>
            <param name="valueWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadBoolean">
            <summary>
            读取一个 Boolean 值。
            </summary>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadByte">
            <summary>
            读取一个 Byte 值。
            </summary>
            <returns>返回一个 byte 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadChar">
            <summary>
            读取一个 Char 值。
            </summary>
            <returns>返回一个 char 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadDateTime">
            <summary>
            读取一个 DateTime 值。
            </summary>
            <returns>返回一个 DateTime 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadDecimal">
            <summary>
            读取一个 Decimal 值。
            </summary>
            <returns>返回一个 decimal 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.DirectRead">
            <summary>
            读取一个未知类型的值。
            </summary>
            <returns>返回一个未知类型的值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadDouble">
            <summary>
            读取一个 Double 值。
            </summary>
            <returns>返回一个 double 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadInt16">
            <summary>
            读取一个 Int16 值。
            </summary>
            <returns>返回一个 short 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadInt32">
            <summary>
            读取一个 Int32 值。
            </summary>
            <returns>返回一个 int 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadInt64">
            <summary>
            读取一个 Int64 值。
            </summary>
            <returns>返回一个 long 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadObject(Swifter.RW.IDataWriter{System.String})">
            <summary>
            读取一个对象结构数据。
            </summary>
            <param name="valueWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadSByte">
            <summary>
            读取一个 SByte 值。
            </summary>
            <returns>返回一个 sbyte 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadSingle">
            <summary>
            读取一个 Single 值。
            </summary>
            <returns>返回一个 flaot 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadString">
            <summary>
            读取一个 String 值。
            </summary>
            <returns>返回一个 string 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadUInt16">
            <summary>
            读取一个 UInt16 值。
            </summary>
            <returns>返回一个 ushort 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadUInt32">
            <summary>
            读取一个 UInt32 值。
            </summary>
            <returns>返回一个 uint 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadUInt64">
            <summary>
            读取一个 UInt64 值。
            </summary>
            <returns>返回一个 ulong 值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadNullable``1">
            <summary>
            读取一个可空类型的值。
            </summary>
            <typeparam name="T">值类型</typeparam>
            <returns>返回 Null 或该值类型的值</returns>
        </member>
        <member name="M:Swifter.RW.ReadCopyer`1.ReadEnum``1">
            <summary>
            读取一个枚举值。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>返回一个枚举</returns>
        </member>
        <member name="T:Swifter.RW.ValueCopyer`1">
            <summary>
            值暂存器。
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.#ctor(Swifter.RW.IDataRW{`0},`0)">
            <summary>
            初始化值暂存器。
            </summary>
            <param name="dataRW">数据读写器</param>
            <param name="key">键</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
            <summary>
            读取一个数组结构数据。
            </summary>
            <param name="valueWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadBoolean">
            <summary>
            读取一个 Boolean 值。
            </summary>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadByte">
            <summary>
            读取一个 Byte 值。
            </summary>
            <returns>返回一个 byte 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadChar">
            <summary>
            读取一个 Char 值。
            </summary>
            <returns>返回一个 char 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadDateTime">
            <summary>
            读取一个 DateTime 值。
            </summary>
            <returns>返回一个 DateTime 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadDecimal">
            <summary>
            读取一个 Decimal 值。
            </summary>
            <returns>返回一个 decimal 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.DirectRead">
            <summary>
            读取一个未知类型的值。
            </summary>
            <returns>返回一个未知类型的值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadDouble">
            <summary>
            读取一个 Double 值。
            </summary>
            <returns>返回一个 double 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadInt16">
            <summary>
            读取一个 Int16 值。
            </summary>
            <returns>返回一个 short 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadInt32">
            <summary>
            读取一个 Int32 值。
            </summary>
            <returns>返回一个 int 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadInt64">
            <summary>
            读取一个 Int64 值。
            </summary>
            <returns>返回一个 long 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadObject(Swifter.RW.IDataWriter{System.String})">
            <summary>
            读取一个对象结构数据。
            </summary>
            <param name="valueWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadSByte">
            <summary>
            读取一个 SByte 值。
            </summary>
            <returns>返回一个 sbyte 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadSingle">
            <summary>
            读取一个 Single 值。
            </summary>
            <returns>返回一个 flaot 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadString">
            <summary>
            读取一个 String 值。
            </summary>
            <returns>返回一个 string 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadUInt16">
            <summary>
            读取一个 UInt16 值。
            </summary>
            <returns>返回一个 ushort 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadUInt32">
            <summary>
            读取一个 UInt32 值。
            </summary>
            <returns>返回一个 uint 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadUInt64">
            <summary>
            读取一个 UInt64 值。
            </summary>
            <returns>返回一个 ulong 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadNullable``1">
            <summary>
            读取一个可空类型的值。
            </summary>
            <typeparam name="T">值类型</typeparam>
            <returns>返回 Null 或该值类型的值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.ReadEnum``1">
            <summary>
            读取一个枚举值。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>返回枚举值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteArray(Swifter.RW.IDataReader{System.Int32})">
            <summary>
            写入一个数组结构数据。
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteBoolean(System.Boolean)">
            <summary>
            写入一个 Boolean 值。
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteByte(System.Byte)">
            <summary>
            写入一个 Byte 值。
            </summary>
            <param name="value">byte 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteChar(System.Char)">
            <summary>
            写入一个 Char 值。
            </summary>
            <param name="value">char 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteDateTime(System.DateTime)">
            <summary>
            写入一个 DateTime 值。
            </summary>
            <param name="value">DateTime 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteDecimal(System.Decimal)">
            <summary>
            写入一个 Decimal 值。
            </summary>
            <param name="value">decimal 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.DirectWrite(System.Object)">
            <summary>
            写入一个未知类型的值。
            </summary>
            <param name="value">未知类型的值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteDouble(System.Double)">
            <summary>
            写入一个 Double 值。
            </summary>
            <param name="value">double 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteInt16(System.Int16)">
            <summary>
            写入一个 Int16 值。
            </summary>
            <param name="value">short 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteInt32(System.Int32)">
            <summary>
            写入一个 Int32 值。
            </summary>
            <param name="value">int 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteInt64(System.Int64)">
            <summary>
            写入一个 Int64 值。
            </summary>
            <param name="value">long 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteObject(Swifter.RW.IDataReader{System.String})">
            <summary>
            写入一个对象结构数据。
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteSByte(System.SByte)">
            <summary>
            写入一个 SByte 值。
            </summary>
            <param name="value">sbyte 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteSingle(System.Single)">
            <summary>
            写入一个 Single 值。
            </summary>
            <param name="value">float 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteString(System.String)">
            <summary>
            写入一个 String 值。
            </summary>
            <param name="value">string 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteUInt16(System.UInt16)">
            <summary>
            写入一个 UInt16 值。
            </summary>
            <param name="value">ushort 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteUInt32(System.UInt32)">
            <summary>
            写入一个 UInt32 值。
            </summary>
            <param name="value">uint 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteUInt64(System.UInt64)">
            <summary>
            写入一个 UInt64 值。
            </summary>
            <param name="value">ulong 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer`1.WriteEnum``1(``0)">
            <summary>
            写入一个枚举值。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="value">枚举值</param>
        </member>
        <member name="T:Swifter.RW.ValueCopyer">
            <summary>
            值暂存器。
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueCopyer.DefaultCapacity">
            <summary>
            默认容量。
            </summary>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ValueOf``1(``0)">
            <summary>
            创建一个具有指定初始值的值暂存器。
            </summary>
            <typeparam name="T">初始值类型</typeparam>
            <param name="value">初始值</param>
            <returns>返回一个值暂存器</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.#ctor">
            <summary>
            初始化值暂存器。
            </summary>
        </member>
        <member name="P:Swifter.RW.ValueCopyer.TypeCode">
            <summary>
            获取值的 TypeCode。
            </summary>
        </member>
        <member name="P:Swifter.RW.ValueCopyer.InternalObject">
            <summary>
            获取值暂存器的内部对象。
            </summary>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
            <summary>
            读取一个数组结构数据。
            </summary>
            <param name="valueWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadBoolean">
            <summary>
            读取一个 Boolean 值。
            </summary>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.IsEmptyValue">
            <summary>
            获取值是否为空。
            </summary>
            <returns>返回一个 bool 值。</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadByte">
            <summary>
            读取一个 Byte 值。
            </summary>
            <returns>返回一个 byte 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadChar">
            <summary>
            读取一个 Char 值。
            </summary>
            <returns>返回一个 char 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadDateTime">
            <summary>
            读取一个 DateTime 值。
            </summary>
            <returns>返回一个 DateTime 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadDecimal">
            <summary>
            读取一个 Decimal 值。
            </summary>
            <returns>返回一个 decimal 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.DirectRead">
            <summary>
            读取一个未知类型的值。
            </summary>
            <returns>返回一个未知类型的值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadDouble">
            <summary>
            读取一个 Double 值。
            </summary>
            <returns>返回一个 double 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadInt16">
            <summary>
            读取一个 Int16 值。
            </summary>
            <returns>返回一个 short 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadInt32">
            <summary>
            读取一个 Int32 值。
            </summary>
            <returns>返回一个 int 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadInt64">
            <summary>
            读取一个 Int64 值。
            </summary>
            <returns>返回一个 long 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadObject(Swifter.RW.IDataWriter{System.String})">
            <summary>
            读取一个对象结构数据。
            </summary>
            <param name="valueWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadSByte">
            <summary>
            读取一个 SByte 值。
            </summary>
            <returns>返回一个 sbyte 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadSingle">
            <summary>
            读取一个 Single 值。
            </summary>
            <returns>返回一个 flaot 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadString">
            <summary>
            读取一个 String 值。
            </summary>
            <returns>返回一个 string 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadUInt16">
            <summary>
            读取一个 UInt16 值。
            </summary>
            <returns>返回一个 ushort 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadUInt32">
            <summary>
            读取一个 UInt32 值。
            </summary>
            <returns>返回一个 uint 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadUInt64">
            <summary>
            读取一个 UInt64 值。
            </summary>
            <returns>返回一个 ulong 值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadEnum``1">
            <summary>
            读取一个枚举值。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>返回枚举值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.ReadNullable``1">
            <summary>
            读取一个可空类型的值。
            </summary>
            <typeparam name="T">值类型</typeparam>
            <returns>返回 Null 或该值类型的值</returns>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteTo(Swifter.RW.IValueWriter)">
            <summary>
            将值写入到值写入器中。
            </summary>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteArray(Swifter.RW.IDataReader{System.Int32})">
            <summary>
            写入一个数组结构数据。
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteBoolean(System.Boolean)">
            <summary>
            写入一个 Boolean 值。
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteByte(System.Byte)">
            <summary>
            写入一个 Byte 值。
            </summary>
            <param name="value">byte 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteChar(System.Char)">
            <summary>
            写入一个 Char 值。
            </summary>
            <param name="value">char 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteDateTime(System.DateTime)">
            <summary>
            写入一个 DateTime 值。
            </summary>
            <param name="value">DateTime 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteDecimal(System.Decimal)">
            <summary>
            写入一个 Decimal 值。
            </summary>
            <param name="value">decimal 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.DirectWrite(System.Object)">
            <summary>
            写入一个未知类型的值。
            </summary>
            <param name="value">未知类型的值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteDouble(System.Double)">
            <summary>
            写入一个 Double 值。
            </summary>
            <param name="value">double 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteInt16(System.Int16)">
            <summary>
            写入一个 Int16 值。
            </summary>
            <param name="value">short 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteInt32(System.Int32)">
            <summary>
            写入一个 Int32 值。
            </summary>
            <param name="value">int 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteInt64(System.Int64)">
            <summary>
            写入一个 Int64 值。
            </summary>
            <param name="value">long 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteObject(Swifter.RW.IDataReader{System.String})">
            <summary>
            写入一个对象结构数据。
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteSByte(System.SByte)">
            <summary>
            写入一个 SByte 值。
            </summary>
            <param name="value">sbyte 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteSingle(System.Single)">
            <summary>
            写入一个 Single 值。
            </summary>
            <param name="value">float 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteString(System.String)">
            <summary>
            写入一个 String 值。
            </summary>
            <param name="value">string 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteUInt16(System.UInt16)">
            <summary>
            写入一个 UInt16 值。
            </summary>
            <param name="value">ushort 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteUInt32(System.UInt32)">
            <summary>
            写入一个 UInt32 值。
            </summary>
            <param name="value">uint 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteUInt64(System.UInt64)">
            <summary>
            写入一个 UInt64 值。
            </summary>
            <param name="value">ulong 值</param>
        </member>
        <member name="M:Swifter.RW.ValueCopyer.WriteEnum``1(``0)">
            <summary>
            写入一个枚举值。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="value">枚举值</param>
        </member>
        <member name="T:Swifter.RW.ValueTypeCodes">
            <summary>
            基础类型枚举，此枚举不能按位合并值。
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Boolean">
            <summary>
            Boolean, bool
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.SByte">
            <summary>
            SByte, sbyte
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Int16">
            <summary>
            Int16, short
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Int32">
            <summary>
            Int32, int
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Int64">
            <summary>
            Int64, long
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Byte">
            <summary>
            Byte, byte
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.UInt16">
            <summary>
            UInt16, ushort
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.UInt32">
            <summary>
            UInt32, uint
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.UInt64">
            <summary>
            UInt64, ulong
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Single">
            <summary>
            Single, float
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Double">
            <summary>
            Double, double
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Decimal">
            <summary>
            Decimal, decimal
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Char">
            <summary>
            Char, char
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.String">
            <summary>
            String, string
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Direct">
            <summary>
            Direct
            
            表示可以直接读写值的类型。
            通常是可以用字符串表示的值的类型。
            
            Represents a type that can read and write value directly.
            is typically the type of a value that can be represented by a string.
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Array">
            <summary>
            Array
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Object">
            <summary>
            Object
            其他类型
            Other types
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueTypeCodes.Null">
            <summary>
            Null, DBNull
            </summary>
        </member>
        <member name="T:Swifter.RW.WriteCopyer`1">
            <summary>
            值写入暂存器。
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.#ctor(Swifter.RW.IDataWriter{`0},`0)">
            <summary>
            初始化值写入暂存器。
            </summary>
            <param name="dataWriter">数据读写器</param>
            <param name="key">键</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteArray(Swifter.RW.IDataReader{System.Int32})">
            <summary>
            写入一个数组结构数据。
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteBoolean(System.Boolean)">
            <summary>
            写入一个 Boolean 值。
            </summary>
            <param name="value">bool 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteByte(System.Byte)">
            <summary>
            写入一个 Byte 值。
            </summary>
            <param name="value">byte 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteChar(System.Char)">
            <summary>
            写入一个 Char 值。
            </summary>
            <param name="value">char 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteDateTime(System.DateTime)">
            <summary>
            写入一个 DateTime 值。
            </summary>
            <param name="value">DateTime 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteDecimal(System.Decimal)">
            <summary>
            写入一个 Decimal 值。
            </summary>
            <param name="value">decimal 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.DirectWrite(System.Object)">
            <summary>
            写入一个未知类型的值。
            </summary>
            <param name="value">未知类型的值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteDouble(System.Double)">
            <summary>
            写入一个 Double 值。
            </summary>
            <param name="value">double 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteInt16(System.Int16)">
            <summary>
            写入一个 Int16 值。
            </summary>
            <param name="value">short 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteInt32(System.Int32)">
            <summary>
            写入一个 Int32 值。
            </summary>
            <param name="value">int 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteInt64(System.Int64)">
            <summary>
            写入一个 Int64 值。
            </summary>
            <param name="value">long 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteObject(Swifter.RW.IDataReader{System.String})">
            <summary>
            写入一个对象结构数据。
            </summary>
            <param name="dataReader">数据读取器</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteSByte(System.SByte)">
            <summary>
            写入一个 SByte 值。
            </summary>
            <param name="value">sbyte 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteSingle(System.Single)">
            <summary>
            写入一个 Single 值。
            </summary>
            <param name="value">float 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteString(System.String)">
            <summary>
            写入一个 String 值。
            </summary>
            <param name="value">string 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteUInt16(System.UInt16)">
            <summary>
            写入一个 UInt16 值。
            </summary>
            <param name="value">ushort 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteUInt32(System.UInt32)">
            <summary>
            写入一个 UInt32 值。
            </summary>
            <param name="value">uint 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteUInt64(System.UInt64)">
            <summary>
            写入一个 UInt64 值。
            </summary>
            <param name="value">ulong 值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.WriteEnum``1(``0)">
            <summary>
            写入一个枚举值。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="value">枚举值</param>
        </member>
        <member name="M:Swifter.RW.WriteCopyer`1.ToString">
            <summary>
            获取值读写器的名称。
            </summary>
            <returns>返回一个名称</returns>
        </member>
        <member name="T:Swifter.RW.ValueFilterInfo`1">
            <summary>
            值筛选时的值信息。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="M:Swifter.RW.ValueFilterInfo`1.#ctor">
            <summary>
            初始化默认实例。
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueFilterInfo`1.Key">
            <summary>
            读取或设置字段名。
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueFilterInfo`1.Type">
            <summary>
            读取值的定义类型。
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueFilterInfo`1.ValueCopyer">
            <summary>
            获取值的读写器。
            </summary>
        </member>
        <member name="T:Swifter.RW.ValueInterface`1">
            <summary>
            <see cref="T:Swifter.RW.ValueInterface`1"/> 提供在 ValueReader 中读取指定类型的值或在 ValueWriter 中写入指定类型的值。
            此类型提供泛型方法，效率更高。
            </summary>
            <typeparam name="T">值的类型</typeparam>
        </member>
        <member name="F:Swifter.RW.ValueInterface`1.Content">
            <summary>
            此类型的具体读写方法实现。
            </summary>
        </member>
        <member name="P:Swifter.RW.ValueInterface`1.IsNotModified">
            <summary>
            表示是否使用用户自定义的读写方法，如果为 True, FastObjectRW 将不优化基础类型的读写。
            </summary>
        </member>
        <member name="P:Swifter.RW.ValueInterface`1.InterfaceIsNotModified">
            <summary>
            表示是否使用用户自定义的读写方法，如果为 True, FastObjectRW 将不优化基础类型的读写。
            </summary>
        </member>
        <member name="P:Swifter.RW.ValueInterface`1.Interface">
            <summary>
            获取值读写器接口。
            </summary>
        </member>
        <member name="P:Swifter.RW.ValueInterface`1.Type">
            <summary>
            获取值的类型。
            </summary>
        </member>
        <member name="M:Swifter.RW.ValueInterface`1.WriteValue(Swifter.RW.IValueWriter,`0)">
            <summary>
            往写入器中写入该类型值的方法。
            </summary>
            <param name="value">T 类型的值</param>
            <param name="valueWriter">值写入器</param>
        </member>
        <member name="M:Swifter.RW.ValueInterface`1.ReadValue(Swifter.RW.IValueReader)">
            <summary>
            在读取器中读取该类型值的方法。
            </summary>
            <param name="valueReader">值读取器</param>
            <returns>返回该类型的值</returns>
        </member>
        <member name="M:Swifter.RW.ValueInterface`1.SetInterface(Swifter.RW.IValueInterface{`0})">
            <summary>
            设置该类型的值读写接口实例。
            </summary>
            <param name="valueInterface">值读写接口实例</param>
        </member>
        <member name="M:Swifter.RW.ValueInterface`1.GetInterface">
            <summary>
            获取该类型的值读写接口实例。
            </summary>
            <returns>值读写接口实例</returns>
        </member>
        <member name="M:Swifter.RW.ValueInterface`1.SetTargetedInterface(Swifter.RW.ITargetedBind,Swifter.RW.IValueInterface{`0})">
            <summary>
            设置针对某一目标值读写器的读写接口实例。
            </summary>
            <param name="targeted">目标</param>
            <param name="valueInterface">读写接口实例</param>
        </member>
        <member name="M:Swifter.RW.ValueInterface`1.GetTargetedInterface(Swifter.RW.ITargetedBind)">
            <summary>
            获取针对某一目标值读写器的读写接口实例。
            </summary>
            <param name="targeted">目标</param>
            <returns>返回读写接口实例</returns>
        </member>
        <member name="M:Swifter.RW.ValueInterface`1.Read(Swifter.RW.IValueReader)">
            <summary>
            非泛型读取值方法。
            </summary>
            <param name="valueReader">值读取器。</param>
            <returns>返回一个 T 类型的值。</returns>
        </member>
        <member name="M:Swifter.RW.ValueInterface`1.Write(Swifter.RW.IValueWriter,System.Object)">
            <summary>
            非泛型写入值方法。
            </summary>
            <param name="valueWriter">值写入器</param>
            <param name="value">T 类型的值</param>
        </member>
        <member name="M:Swifter.RW.ValueInterface`1.XConvertFrom``1(``0)">
            <summary>
            将该类型的值通过 <see cref="T:Swifter.Tools.XConvert"/> 转换为指定类型。
            </summary>
            <typeparam name="TSource">指定类型</typeparam>
            <param name="value">该类型的值</param>
            <returns>返回指定类型的值</returns>
        </member>
        <member name="M:Swifter.RW.ValueInterface`1.XConvertTo``1(System.Object)">
            <summary>
            将值类型的值通过 <see cref="T:Swifter.Tools.XConvert"/> 转换为该类型的值。
            </summary>
            <typeparam name="TDestination">指定类型</typeparam>
            <param name="value">指定类型的值</param>
            <returns>返回该类型的值</returns>
        </member>
        <member name="T:Swifter.RW.ValueInterface">
            <summary>
            <see cref="T:Swifter.RW.ValueInterface"/> 提供在 ValueReader 中读取指定类型的值或在 ValueWriter 中写入指定类型的值。
            此类提供非泛型方法。
            </summary>
        </member>
        <member name="P:Swifter.RW.ValueInterface.DefaultObjectInterfaceType">
            <summary>
            获取或设置默认的对象类型读写接口类型。
            如果要设置此类型要满足以下条件
            1: 类型必须是可以实例化并且具有公开的无参构造函数。
            2: 必须继承 IValueInterface/<T/> 接口。
            3: 必须是泛型类型，有且只有一个泛型参数，泛型参数与 IValueInterface/<T/> 的泛型参数对应。
            </summary>
        </member>
        <member name="F:Swifter.RW.ValueInterface.ValueTupleSupport">
            <summary>
            获取或设置是否对元组的支持。
            如果为否，那么元组类型将被当作普通对象处理。
            必须在程序初始化时设置此值才会生效。
            </summary>
        </member>
        <member name="M:Swifter.RW.ValueInterface.SetValueFormat``1(System.String)">
            <summary>
            设置指定类型在 WriteValue 方法中写入为指定格式的字符串。在 ReadValue 方法是依然使用默认方法。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="format">指定指定格式</param>
        </member>
        <member name="M:Swifter.RW.ValueInterface.AddMaper(Swifter.RW.IValueInterfaceMaper)">
            <summary>
            添加一个类型与 ValueInterface 的匹配器。
            此匹配器可以自定义类型的读写方法。
            后加入的匹配器优先级高。
            </summary>
            <param name="maper">类型与 ValueInterface 的匹配器</param>
        </member>
        <member name="M:Swifter.RW.ValueInterface.GetInterface(System.Type)">
            <summary>
            非泛型方式获取指定类型的 <see cref="T:Swifter.RW.ValueInterface"/> ，此方式效率并不高。
            如果是已知类型，请考虑使用泛型方式 <see cref="T:Swifter.RW.ValueInterface`1"/> 获取。
            如果是未知类型的实例，请考虑使用 <see cref="M:Swifter.RW.ValueInterface.GetInterface(System.Object)"/> 获取。
            </summary>
            <param name="type">指定类型</param>
            <returns>返回一个 <see cref="T:Swifter.RW.ValueInterface"/> 实例。</returns>
        </member>
        <member name="M:Swifter.RW.ValueInterface.GetInterface(System.Object)">
            <summary>
            非泛型方式获取实例的类型的 <see cref="T:Swifter.RW.ValueInterface"/> ，此方式效率比 <see cref="M:Swifter.RW.ValueInterface.GetInterface(System.Type)"/> 高，但比 <see cref="T:Swifter.RW.ValueInterface`1"/> 低。
            </summary>
            <param name="obj">指定一个实例，此实例不能为 Null。</param>
            <returns>返回一个 <see cref="T:Swifter.RW.ValueInterface"/> 实例。</returns>
        </member>
        <member name="M:Swifter.RW.ValueInterface.WriteValue(Swifter.RW.IValueWriter,System.Object)">
            <summary>
            往写入器中写入一个未知类型值的方法。
            </summary>
            <param name="valueWriter">写入器</param>
            <param name="value">一个对象值</param>
        </member>
        <member name="M:Swifter.RW.ValueInterface.ReadValue(Swifter.RW.IValueReader,System.Type)">
            <summary>
            在读取器中读取指定类型值的方法。
            </summary>
            <param name="valueReader">读取器</param>
            <param name="type">指定类型</param>
            <returns>返回一个对象值</returns>
        </member>
        <member name="M:Swifter.RW.ValueInterface.ReadValue``1(Swifter.RW.IValueReader)">
            <summary>
            在读取器中读取指定类型值的方法。
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="valueReader">值读取器</param>
            <returns>返回该类型的值</returns>
        </member>
        <member name="M:Swifter.RW.ValueInterface.WriteValue``1(Swifter.RW.IValueWriter,``0)">
            <summary>
            往写入器中写入指定类型值的方法。
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="valueWriter">值写入器</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.RW.ValueInterface.RemoveTargetedInterface(Swifter.RW.ITargetedBind)">
            <summary>
            移除针对某一目标读写器的读写接口实例。
            </summary>
            <param name="targeted">目标</param>
        </member>
        <member name="M:Swifter.RW.ValueInterface.Read(Swifter.RW.IValueReader)">
            <summary>
            在 IValueReader 中读取该类型的值。
            </summary>
            <param name="valueReader">值读取器</param>
            <returns>返回该类型的值</returns>
        </member>
        <member name="M:Swifter.RW.ValueInterface.Write(Swifter.RW.IValueWriter,System.Object)">
            <summary>
            在 IValueWriter 中写入该类型的值。
            </summary>
            <param name="valueWriter">值写入器</param>
            <param name="value">该类型的值</param>
        </member>
        <member name="P:Swifter.RW.ValueInterface.InterfaceIsNotModified">
            <summary>
            表示是否使用用户自定义的读写方法，如果为 True, FastObjectRW 将不优化基础类型的读写。
            </summary>
        </member>
        <member name="P:Swifter.RW.ValueInterface.Interface">
            <summary>
            获取值读写器接口。
            </summary>
        </member>
        <member name="P:Swifter.RW.ValueInterface.Type">
            <summary>
            获取值的类型。
            </summary>
        </member>
        <member name="M:Swifter.RW.ValueInterface.XConvertTo``1(System.Object)">
            <summary>
            将该类型的值通过 <see cref="T:Swifter.Tools.XConvert"/> 转换为指定类型。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">该类型的值</param>
            <returns>返回指定类型的值</returns>
        </member>
        <member name="M:Swifter.RW.ValueInterface.XConvertFrom``1(``0)">
            <summary>
            将值类型的值通过 <see cref="T:Swifter.Tools.XConvert"/> 转换为该类型的值。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的值</param>
            <returns>返回该类型的值</returns>
        </member>
        <member name="T:Swifter.Tools.ArrayHelper">
            <summary>
            提供对数组和集合操作的方法。
            </summary>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.Merge``1(``0[],``0)">
            <summary>
            合并一个数组和一个元素。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="array">数组</param>
            <param name="tail">尾部元素</param>
            <returns>返回一个新的数组</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.Merge``1(``0,``0[])">
            <summary>
            合并一个头部元素和一个数组。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="array">数组</param>
            <param name="head">头部元素</param>
            <returns>返回一个新的数组</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.Merge``1(``0,``0[],``0)">
            <summary>
            合并一个头部元素和一个数组和一个尾部元素。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="array">数组</param>
            <param name="head">头部元素</param>
            <param name="tail">尾部元素</param>
            <returns>返回一个新的数组</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.AddrOfArrayElement``1(System.Array,System.Int32)">
            <summary>
            获取数组的指定索引处的元素引用。可以是多维数组。
            </summary>
            <typeparam name="TElement">需要获取的引用的类型</typeparam>
            <param name="array">数组</param>
            <param name="index">指定索引</param>
            <returns>返回元素引用</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.Copy``1(System.Array,System.Array)">
            <summary>
            将一个多维数组的元素复制到另一个相同维度的多维数组中。从每个维度 0 索引开始，复制这两个数组中该维度较小的长度数量的元素。
            </summary>
            <typeparam name="TElement">元素类型</typeparam>
            <param name="source">源数组</param>
            <param name="destination">目标数组</param>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.ComputeOffset(System.Array,System.Int32*)">
            <summary>
            计算多维数组指定多维索引的元素偏移量。
            </summary>
            <param name="array">多维数组</param>
            <param name="indices">多维索引</param>
            <returns>返回相当于第一个元素的元素偏移量</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.CreateMultiDimArrayOfOneDim(System.Type,System.Int32)">
            <summary>
            创建一个维度的多维数组。
            </summary>
            <param name="elementType">元素类型</param>
            <param name="length">数组长度</param>
            <returns>返回一个维度的多维数组</returns>
            <exception cref="T:System.PlatformNotSupportedException">平台不支持创建一个维度的多维数组</exception>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.CreateInstance``1(System.Int32[])">
            <summary>
            创建多维数组。
            </summary>
            <typeparam name="TElement">元素类型</typeparam>
            <param name="lengths">多维数组每个维度的长度</param>
            <returns>返回一个多维数组</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.Resize``1(System.Array,System.Int32[])">
            <summary>
            重新分配多维数组每个维度的长度。如果每个维度新旧长度都一样，则返回原数组。
            </summary>
            <typeparam name="TElement">元素类型</typeparam>
            <param name="array">多维数组</param>
            <param name="lengths">多维数组每个维度新的长度</param>
            <returns>返回新的多维数组的原数组</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.AsEnumerable(System.Collections.IEnumerator)">
            <summary>
            将迭代器转换为可迭代器。
            </summary>
            <param name="enumerator">迭代器</param>
            <returns>返回一个可迭代器</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.AsEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            将迭代器转换为可迭代器。
            </summary>
            <param name="enumerator">迭代器</param>
            <returns>返回一个可迭代器</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.GetRawData``1(System.Collections.Generic.List{``0})">
            <summary>
            获取列表的数据源。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="list">列表</param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.GetRawData(System.Collections.ArrayList)">
            <summary>
            获取列表的数据源。
            </summary>
            <param name="arrayList">列表</param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            获取或添加一个键值。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="func">生成值的方法</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            尝试添加一个键值。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.GetCount``1(System.Collections.Generic.List{``0})">
            <summary>
            获取列表的长度。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="list">列表</param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.GetCount(System.Collections.ArrayList)">
            <summary>
            获取列表的长度。
            </summary>
            <param name="arrayList">列表</param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.CreateList``1(``0[],System.Int32)">
            <summary>
            创建一个列表。
            </summary>
            <typeparam name="T">列表类型</typeparam>
            <param name="array">列表数据源</param>
            <param name="count">列表数量</param>
            <returns>返回一个列表</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.CreateArrayList(System.Object[],System.Int32)">
            <summary>
            创建一个列表。
            </summary>
            <param name="array">列表数据源</param>
            <param name="count">列表数量</param>
            <returns>返回一个列表</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.Merge``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``1},``1)">
            <summary>
            归并集合。
            </summary>
            <typeparam name="TInput">集合元素类型</typeparam>
            <typeparam name="TOutput">结果类型</typeparam>
            <param name="source">集合</param>
            <param name="selector">选择器</param>
            <param name="output">初始值</param>
            <returns>返回结果值</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.AsOneDim``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            将一个二维集合转换为一维集合。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="tss">二维集合</param>
            <returns>返回一维集合</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.Map``2(``0[],System.Func{``0,``1})">
            <summary>
            返回一个新的数组，数组中的元素为原始数组元素调用函数处理后的值。
            </summary>
            <typeparam name="TInput">原始数组元素类型</typeparam>
            <typeparam name="TOutput">新数组元素类</typeparam>
            <param name="elements">新数组</param>
            <param name="selector">处理函数</param>
            <returns>返回一个数组</returns>
        </member>
        <member name="M:Swifter.Tools.ArrayHelper.IndexOf``1(``0*,System.Int32,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="length"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Swifter.Tools.BasicConvert">
            <summary>
            基础转换函数实现类
            </summary>
        </member>
        <member name="F:Swifter.Tools.BasicConvert.Instance">
            <summary>
            获取基础转换函数实现类的实例。
            </summary>
        </member>
        <member name="M:Swifter.Tools.BasicConvert.GetConvertTypes">
            <summary>
            获取所有可用的类型转换工具类。
            </summary>
            <returns>返回类型集合</returns>
        </member>
        <member name="M:Swifter.Tools.BasicConvert.GetConvertMethods">
            <summary>
            获取所有可用类型转换函数。
            </summary>
            <returns>返回类型转换函数集合</returns>
        </member>
        <member name="M:Swifter.Tools.BasicConvert.GetCodeName(System.Type)">
            <summary>
            获取一个类型在 C# 代码中的标识符。
            </summary>
            <param name="type">指定类型</param>
            <returns>返回一个 stirng 标识符</returns>
        </member>
        <member name="T:Swifter.Tools.XConvert">
            <summary>
            高级类型转换静态工具类。
            </summary>
        </member>
        <member name="M:Swifter.Tools.XConvert.AddImplFactory(Swifter.Tools.IConverterFactory)">
            <summary>
            添加一个类型转换函数实现类工厂。
            </summary>
            <param name="factory">转换函数实现类工厂</param>
        </member>
        <member name="M:Swifter.Tools.XConvert.Convert``2(``0)">
            <summary>
            将指定原类型的实例转换为指定的目标类型的实例。转换失败将引发异常。
            </summary>
            <typeparam name="TSource">指定原类型</typeparam>
            <typeparam name="TDestination">指定目标类型</typeparam>
            <param name="value">原类型的实例</param>
            <returns>返回目标类型的实例</returns>
        </member>
        <member name="M:Swifter.Tools.XConvert.IsImplicitConvert(System.Type,System.Type)">
            <summary>
            判断源类型是否可以隐式转换为目标类型。
            隐式转换包括：
            从小范围的基础类型转换为兼容的大范围基础基础类型；
            从子类型转换为基类型；
            已定义从源类型隐式转换为目标类型函数的类型。
            </summary>
            <param name="sourceType">源类型</param>
            <param name="destinationType">目标类型</param>
            <returns>返回一个 <see cref="T:System.Boolean"/> 值</returns>
        </member>
        <member name="M:Swifter.Tools.XConvert.IsExplicitConvert(System.Type,System.Type)">
            <summary>
            判断源类型是否可以显式转换为目标类型。
            显式转换包括：
            隐式转换；
            从大范围的基础类型转换为兼容的小范围基础基础类型；
            从基类型转换为子类型；
            已定义从源类型显式转换为目标类型函数的类型。
            </summary>
            <param name="sourceType">源类型</param>
            <param name="destinationType">目标类型</param>
            <returns>返回一个 <see cref="T:System.Boolean"/> 值</returns>
        </member>
        <member name="M:Swifter.Tools.XConvert.IsBasicConvert(System.Type,System.Type)">
            <summary>
            判断源类型和目标类型是否为基础类型，并且可以相互转换。
            </summary>
            <param name="sourceType">源类型</param>
            <param name="destinationType">目标类型</param>
            <returns>返回一个 <see cref="T:System.Boolean"/> 值</returns>
        </member>
        <member name="M:Swifter.Tools.XConvert.IsCustomConvert(System.Type,System.Type)">
            <summary>
            判断源类型是否可以通过自定义方式转换为目标类型。
            自定义方式包括：
            使用 <see cref="M:Swifter.Tools.XConvert.AddImplFactory(Swifter.Tools.IConverterFactory)"/> 方法添加的转换方式；
            已定义从源类型转换为目标类型的 Parse, ValueOf To 函数。
            目标类型已定义从源类型构造的构造函数。
            </summary>
            <param name="sourceType">源类型</param>
            <param name="destinationType">目标类型</param>
            <returns>返回一个 <see cref="T:System.Boolean"/> 值</returns>
        </member>
        <member name="M:Swifter.Tools.XConvert.ToObject``1(``0,System.Type)">
            <summary>
            将指定原类型的实例转换为指定的目标类型的实例。转换失败将引发异常。
            </summary>
            <typeparam name="TSource">指定原类型</typeparam>
            <param name="value">原类型的实例</param>
            <param name="outType">指定目标类型</param>
            <returns>返回目标类型的实例</returns>
        </member>
        <member name="M:Swifter.Tools.XConvert.FromObject``1(System.Object)">
            <summary>
            将一个任意实例转换为指定类型的实例。转换失败将引发异常。
            </summary>
            <typeparam name="TDestination">指定目标类型</typeparam>
            <param name="value">任意实例</param>
            <returns>返回目标类型的实例</returns>
        </member>
        <member name="M:Swifter.Tools.XConvert.Cast(System.Object,System.Type)">
            <summary>
            将一个任意实例转换为指定类型的实例。转换失败将引发异常。
            </summary>
            <param name="value">任意实例</param>
            <param name="outType">指定目标类型</param>
            <returns>返回目标类型的实例</returns>
        </member>
        <member name="T:Swifter.Tools.IConverterFactory">
            <summary>
            转换器工厂接口。
            </summary>
        </member>
        <member name="M:Swifter.Tools.IConverterFactory.GetConverter(System.Type,System.Type)">
            <summary>
            获取转换器实例，实例应实现 <see cref="T:Swifter.Tools.IXConverter`2"/> 接口。
            </summary>
            <param name="sourceType">原类型</param>
            <param name="destinationType">目标类型</param>
            <returns>返回转换器实例</returns>
        </member>
        <member name="T:Swifter.Tools.IXConverter`2">
            <summary>
            XConvert 实现接口。
            </summary>
            <typeparam name="TSource">原类型</typeparam>
            <typeparam name="TDestination">目标类型</typeparam>
        </member>
        <member name="M:Swifter.Tools.IXConverter`2.Convert(`0)">
            <summary>
            将原类型的值转换为目标类型的值。
            </summary>
            <param name="value">原类型的值</param>
            <returns>返回目标类型的值</returns>
        </member>
        <member name="T:Swifter.Tools.XConvert`1">
            <summary>
            指定目标类型的高级类型转换工具。
            </summary>
            <typeparam name="TDestination">指定目标类型</typeparam>
        </member>
        <member name="M:Swifter.Tools.XConvert`1.Convert``1(``0)">
            <summary>
            将指定原类型的实例转换为目标类型的实例。
            </summary>
            <typeparam name="TSource">指定原类型</typeparam>
            <param name="value">原类型的实例</param>
            <returns>返回目标类型的实例</returns>
        </member>
        <member name="M:Swifter.Tools.XConvert`1.FromObject(System.Object)">
            <summary>
            将任意类型的实例转换为目标类型的实例。
            </summary>
            <param name="obj">任意类型的实例</param>
            <returns>返回目标类型的实例</returns>
        </member>
        <member name="T:Swifter.Tools.CaseInfo`1">
            <summary>
            表示 Switch 的 Case 块
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Swifter.Tools.CaseInfo`1.Value">
            <summary>
            获取 Case 块的值。
            </summary>
        </member>
        <member name="F:Swifter.Tools.CaseInfo`1.Label">
            <summary>
            获取 Case 块的指令标签。
            </summary>
        </member>
        <member name="F:Swifter.Tools.CaseInfo`1.HashCode">
            <summary>
            获取或设置值的 HashCode 值。
            </summary>
        </member>
        <member name="F:Swifter.Tools.CaseInfo`1.Tag">
            <summary>
            辅助变量。
            </summary>
        </member>
        <member name="M:Swifter.Tools.CaseInfo`1.#ctor(`0,System.Reflection.Emit.Label)">
            <summary>
            实例化 Case 块。
            </summary>
            <param name="value">Case 块的值</param>
            <param name="label">ase 块的指令标签</param>
        </member>
        <member name="M:Swifter.Tools.CaseInfo`1.CompareTo(Swifter.Tools.CaseInfo{`0})">
            <summary>
            与另一个 Case 块信息比较 HashCode 的大小。
            </summary>
            <param name="other">Case 块信息</param>
            <returns>返回大于 0 则比它大，小于 0 则比它小，否则一样大</returns>
        </member>
        <member name="T:Swifter.Tools.EmitHelper">
            <summary>
            提供 Emit 帮助方法。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadClassField``1(System.Object,System.Int32)">
            <summary>
            Emit 内部使用函数。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadClassFieldAddress``1(System.Object,System.Int32)">
            <summary>
            Emit 内部使用函数。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.StoreClassField``1(System.Object,``0,System.Int32)">
            <summary>
            Emit 内部使用函数。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadStructField``1(``0@,System.Int32)">
            <summary>
            Emit 内部使用函数。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadStructFieldAddress``1(``0@,System.Int32)">
            <summary>
            Emit 内部使用函数。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.StoreStructField``1(``0@,``0,System.Int32)">
            <summary>
            Emit 内部使用函数。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadStaticField``1(``0@)">
            <summary>
            Emit 内部使用函数。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadStaticFieldAddress``1(``0@)">
            <summary>
            Emit 内部使用函数。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.StoreStaticField``1(``0,``0@)">
            <summary>
            Emit 内部使用函数。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadField(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            加载字段值。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="fieldInfo">字段信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.UnsafeLoadField(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            跳过字段访问检查加载字段值。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="fieldInfo">字段信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.StoreField(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            设置字段值。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="fieldInfo">字段信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.UnsafeStoreField(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            跳过字段访问检查设置字段值。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="fieldInfo">字段信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadFieldAddress(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            加载字段地址。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="fieldInfo">字段信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.UnsafeLoadFieldAddress(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            跳过字段访问检查加载字段地址。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="fieldInfo">字段信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadToken(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            加载类型的元数据元素。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="type">类型信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            加载类型 Type 到栈顶。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="type">类型信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadLocal(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            加载本地变量值。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="localBuilder">变量信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.StoreLocal(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            设置本地变量值。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="localBuilder">本地变量信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadLocalAddress(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            加载本地变量地址。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="localBuilder">变量信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadConstant(System.Reflection.Emit.ILGenerator,System.Boolean)">
            <summary>
            加载 Boolean 常量。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadConstant(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载 Int32 常量。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadConstant(System.Reflection.Emit.ILGenerator,System.Int64)">
            <summary>
            加载 Int64 常量。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadConstant(System.Reflection.Emit.ILGenerator,System.IntPtr)">
            <summary>
            加载常量地址。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadString(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            加载 String 常量。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="value">值</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.StoreValue(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            设置类型已提供的值到提供的内存上。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="type">值的类型</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadValue(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            在提供的内存上加载一个类型的值。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="type">值的类型</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadArgument(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载参数值。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="index">参数序号</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.StoreArgument(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            设置参数值。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="index">参数序号</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadArgumentAddress(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载参数地址。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="index">参数序号</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadElementAddress(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            加载提供的数组位于提供索引处的元素的地址。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="elementType">元素的类型</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadElement(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            加载提供的数组位于提供索引处的元素。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="elementType">元素的类型</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadReferenceElement(System.Reflection.Emit.ILGenerator)">
            <summary>
            加载引用类型元素数组的元素。
            </summary>
            <param name="ilGen"></param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.SizeOf(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            加载类型值的大小。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LoadNull(System.Reflection.Emit.ILGenerator)">
            <summary>
            加载一个 Null 值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchFalse(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当提供的值为 False 时跳到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchTrue(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当提供的值为 True 时跳到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Branch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            无条件跳转到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchIfLess(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当栈顶第一个值小于第二个值时跳转到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchIfLessOrEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当栈顶第一个值小于或等于第二个值时跳转到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchIfLessUnsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当栈顶第一个值小于第二个值时跳转到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchIfLessOrEqualUnsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当栈顶第一个值小于或等于第二个值时跳转到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchIfEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当栈顶第一个值等于第二个值时跳转到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchIfNotEqualUnsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当栈顶第一个值不等于第二个值时跳转到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchIfGreater(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当栈顶第一个值大于第二个值时跳转到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchIfGreaterOrEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当栈顶第一个值大于或等于第二个值时跳转到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchIfGreaterUnsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当栈顶第一个值大于第二个值时跳转到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchIfGreaterOrEqualUnsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            当栈顶第一个值大于或等于第二个值时跳转到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Box(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            将当前值类型转换为对象引用 (类型 O)。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="type">值类型</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.UnboxAny(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            将指令中指定类型的已装箱的表示形式转换成未装箱形式。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Unbox(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            将值类型的已装箱的表示形式转换为其未装箱的形式。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.CastClass(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            将栈顶的值尝试转化为指定的类型。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.NewObject(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            创建一个新的对象或值类型，并将对象引用的新实例 (类型 O) 到计算堆栈上。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="constructor">对象的构造函数</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.BranchDefaultValue(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.Label)">
            <summary>
            当指定的本地变量值为该类型的默认值时跳到指定块。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="local">本地变量</param>
            <param name="label">代码块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
            调用方法。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="methodBase">方法信息</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.UnsafeCall(System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
            跳过方法访问检查调用方法。
            </summary>
            <param name="ilGen"></param>
            <param name="methodBase"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Calli(System.Reflection.Emit.ILGenerator,System.IntPtr,System.Type,System.Type[])">
            <summary>
            以托管代码默认约定调用方法指针。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="functionPointer">指针底值</param>
            <param name="parameterTypes">调用参数签名</param>
            <param name="returnType">调用返回值前面</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Calli(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.DynamicMethod)">
            <summary>
            以托管代码默认约定调用动态方法。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="dynamicMethod">动态方法</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.ConvertPointer(System.Reflection.Emit.ILGenerator)">
            <summary>
            将值转换为指针类型。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.ConvertInt32(System.Reflection.Emit.ILGenerator)">
            <summary>
            将值转换为 Int32 类型。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.ConvertInt8(System.Reflection.Emit.ILGenerator)">
            <summary>
            将值转换为 Int8 类型。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.ConvertInt16(System.Reflection.Emit.ILGenerator)">
            <summary>
            将值转换为 Int16 类型。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.ConvertInt64(System.Reflection.Emit.ILGenerator)">
            <summary>
            将值转换为 Int64 类型。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Add(System.Reflection.Emit.ILGenerator)">
            <summary>
            从栈中弹出 2 个值进行加法运算，将结果推到栈中。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.AddOverflow(System.Reflection.Emit.ILGenerator)">
            <summary>
            从栈中弹出 2 个进整数行加法运算，并执行溢出检查，将结果推到栈中。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.AddOverflowUnsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            从栈中弹出 2 个无符号整数进行加法运算，并执行溢出检查，将结果推到栈中。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Subtract(System.Reflection.Emit.ILGenerator)">
            <summary>
            对栈顶的两个值进行 减法运算，返回一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Multiply(System.Reflection.Emit.ILGenerator)">
            <summary>
            对栈顶的两个值进行 乘法运算，返回一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Division(System.Reflection.Emit.ILGenerator)">
            <summary>
            对栈顶的两个值进行 除法运算，返回一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Rem(System.Reflection.Emit.ILGenerator)">
            <summary>
            对栈顶的两个值进行 求余运算，返回一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Xor(System.Reflection.Emit.ILGenerator)">
            <summary>
            对栈顶的两个值进行 按位异或，返回一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Or(System.Reflection.Emit.ILGenerator)">
            <summary>
            对栈顶的两个值进行 按位或，返回一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.And(System.Reflection.Emit.ILGenerator)">
            <summary>
            对栈顶的两个值进行 按位与，返回一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.ShiftLeft(System.Reflection.Emit.ILGenerator)">
            <summary>
            对栈顶的两个值进行 左移。返回一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.ShiftRight(System.Reflection.Emit.ILGenerator)">
            <summary>
            对栈顶的两个值进行 右移。返回一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.ShiftRightUnsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            对栈顶的两个值进行 无符号右移。返回一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Throw(System.Reflection.Emit.ILGenerator)">
            <summary>
            抛出位于栈顶的异常。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.ReThrow(System.Reflection.Emit.ILGenerator)">
            <summary>
            再次引发当前异常。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Pop(System.Reflection.Emit.ILGenerator)">
            <summary>
            移除位于栈顶的一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Duplicate(System.Reflection.Emit.ILGenerator)">
            <summary>
            复制位于栈顶的一个值。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.IsInstance(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            判断栈顶的对象是否为指定类型的实例，如果为是则返回该实例。如果为否则为返回 Null。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="type">指定类型</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.LocalAllocate(System.Reflection.Emit.ILGenerator)">
            <summary>
            分配本地内存。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Return(System.Reflection.Emit.ILGenerator)">
            <summary>
            方法返回。
            </summary>
            <param name="ilGen">ilGen</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Switch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label[])">
            <summary>
            实现跳转表。
            </summary>
            <param name="ilGen">ilGen</param>
            <param name="labels">标签集合</param>
        </member>
        <member name="F:Swifter.Tools.EmitHelper.SwitchDoNotVerify">
            <summary>
            生成 Switch 算法时不做 Equals 验证，这是一个极端的性能优化，不建议开启。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Switch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},System.Action{System.Reflection.Emit.ILGenerator,System.String},Swifter.Tools.CaseInfo{System.String}[],System.Reflection.Emit.Label,System.Boolean)">
            <summary>
            生成 Switch(String) 代码块。
            </summary>
            <param name="ilGen">ILGenerator IL 指令生成器</param>
            <param name="emitLoadValue">生成加载 Switch 参数的指令的委托</param>
            <param name="emitLoadItem">生成加载 Switch 项的指令的委托</param>
            <param name="cases">case 标签块集合</param>
            <param name="defaultLabel">默认标签块</param>
            <param name="ignoreCase">是否忽略大小写</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Switch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},System.Action{System.Reflection.Emit.ILGenerator,Swifter.Tools.Ps{System.Char}},Swifter.Tools.CaseInfo{Swifter.Tools.Ps{System.Char}}[],System.Reflection.Emit.Label,System.Boolean)">
            <summary>
            生成 Switch(String) 代码块。
            </summary>
            <param name="ilGen">ILGenerator IL 指令生成器</param>
            <param name="emitLoadValue">生成加载 Switch 参数的指令的委托</param>
            <param name="emitLoadItem">生成加载 Switch 项的指令的委托</param>
            <param name="cases">case 标签块集合</param>
            <param name="defaultLabel">默认标签块</param>
            <param name="ignoreCase">是否忽略大小写</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Switch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},System.Action{System.Reflection.Emit.ILGenerator,Swifter.Tools.Ps{Swifter.Tools.Utf8Byte}},Swifter.Tools.CaseInfo{Swifter.Tools.Ps{Swifter.Tools.Utf8Byte}}[],System.Reflection.Emit.Label,System.Boolean)">
            <summary>
            生成 Switch(String) 代码块。
            </summary>
            <param name="ilGen">ILGenerator IL 指令生成器</param>
            <param name="emitLoadValue">生成加载 Switch 参数的指令的委托</param>
            <param name="emitLoadItem">生成加载 Switch 项的指令的委托</param>
            <param name="cases">case 标签块集合</param>
            <param name="defaultLabel">默认标签块</param>
            <param name="ignoreCase">是否忽略大小写</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Switch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},Swifter.Tools.CaseInfo{System.Int32}[],System.Reflection.Emit.Label)">
            <summary>
            生成 Switch(int) 代码块。
            </summary>
            <param name="ilGen">ILGenerator IL 指令生成器</param>
            <param name="emitLoadValue">生成加载 Switch 参数的指令的委托</param>
            <param name="cases">case 标签块集合</param>
            <param name="defaultLabel">默认标签块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Switch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},Swifter.Tools.CaseInfo{System.IntPtr}[],System.Reflection.Emit.Label)">
            <summary>
            生成 Switch(IntPtr) 代码块。
            </summary>
            <param name="ilGen">ILGenerator IL 指令生成器</param>
            <param name="emitLoadValue">生成加载 Switch 参数的指令的委托</param>
            <param name="cases">case 标签块集合</param>
            <param name="defaultLabel">默认标签块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.Switch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},Swifter.Tools.CaseInfo{System.Int64}[],System.Reflection.Emit.Label)">
            <summary>
            生成 Switch(long) 代码块。
            </summary>
            <param name="ilGen">ILGenerator IL 指令生成器</param>
            <param name="emitLoadValue">生成加载 Switch 参数的指令的委托</param>
            <param name="cases">case 标签块集合</param>
            <param name="defaultLabel">默认标签块</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.DifferenceSwitch``1(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},System.Action{System.Reflection.Emit.ILGenerator,``0},Swifter.Tools.IDifferenceComparer{``0},Swifter.Tools.CaseInfo{``0}[],System.Reflection.Emit.Label)">
            <summary>
            生成指定类型的 Switch 代码块，使用差异位匹配算法。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="ilGen">ILGenerator IL 指令生成器</param>
            <param name="emitLoadValue">生成加载 Switch 参数的指令的委托</param>
            <param name="comparer">差异位比较器</param>
            <param name="cases">case 标签块集合</param>
            <param name="defaultLabel">默认标签块</param>
            <param name="emitLoadItem">生成加载指定 Case 块值的指定的委托</param>
        </member>
        <member name="M:Swifter.Tools.EmitHelper.HashSwitch``1(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},System.Action{System.Reflection.Emit.ILGenerator,``0},Swifter.Tools.IHashComparer{``0},Swifter.Tools.CaseInfo{``0}[],System.Reflection.Emit.Label)">
            <summary>
            生成指定类型的 Switch 代码块，使用 Hash 匹配算法。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="ilGen">ILGenerator IL 指令生成器</param>
            <param name="emitLoadValue">生成加载 Switch 参数的指令的委托</param>
            <param name="comparer">哈希比较器</param>
            <param name="cases">case 标签块集合</param>
            <param name="defaultLabel">默认标签块</param>
            <param name="emitLoadItem">生成加载指定 Case 块值的指定的委托</param>
        </member>
        <member name="T:Swifter.Tools.IDifferenceComparer`1">
            <summary>
            差异位比较器。
            </summary>
            <typeparam name="T">指定类型</typeparam>
        </member>
        <member name="M:Swifter.Tools.IDifferenceComparer`1.GetLength(`0)">
            <summary>
            获取类型实例的长度。
            </summary>
            <param name="value">类型实例</param>
            <returns>返回一个长度</returns>
        </member>
        <member name="M:Swifter.Tools.IDifferenceComparer`1.ElementAt(`0,System.Int32)">
            <summary>
            获取类型实例指定索引处的 Int32 值。
            </summary>
            <param name="value">类型实例</param>
            <param name="index">指定索引</param>
            <returns>返回一个 Int32 值</returns>
        </member>
        <member name="M:Swifter.Tools.IDifferenceComparer`1.EmitGetLength(System.Reflection.Emit.ILGenerator)">
            <summary>
            生成 获取类型实例的长度 的 IL 代码。
            </summary>
            <param name="ilGen">IL 生成器</param>
        </member>
        <member name="M:Swifter.Tools.IDifferenceComparer`1.EmitElementAt(System.Reflection.Emit.ILGenerator)">
            <summary>
            生成 获取类型实例指定索引处值 的 IL 代码。
            </summary>
            <param name="ilGen">IL 生成器</param>
        </member>
        <member name="T:Swifter.Tools.IHashComparer`1">
            <summary>
            Emit Switch 比较器。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Swifter.Tools.IHashComparer`1.GetHashCode(`0)">
            <summary>
            获取值的哈希值。
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.IHashComparer`1.Equals(`0,`0)">
            <summary>
            比较两个值是否一致。
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.IHashComparer`1.EmitGetHashCode(System.Reflection.Emit.ILGenerator)">
            <summary>
            生成获取值的哈希值的 IL 指令。
            </summary>
            <param name="ilGen"></param>
        </member>
        <member name="M:Swifter.Tools.IHashComparer`1.EmitEquals(System.Reflection.Emit.ILGenerator)">
            <summary>
            生成比较两个值是否一致的 IL 指令。
            </summary>
            <param name="ilGen"></param>
        </member>
        <member name="T:Swifter.Tools.EnumHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Swifter.Tools.EnumHelper.TryParseEnum``1(Swifter.Tools.Ps{System.Char},``0@)">
            <summary>
            尝试将字符串解析为枚举值。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="str">字符串</param>
            <param name="value">返回枚举值</param>
            <returns>返回是否解析成功</returns>
        </member>
        <member name="M:Swifter.Tools.EnumHelper.GetEnumName``1(``0)">
            <summary>
            获取指定枚举值的名称。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="value">枚举值</param>
            <returns>返回枚举名称，没有名称则返回 null</returns>
        </member>
        <member name="F:Swifter.Tools.EnumHelper.EnumSeperator">
            <summary>
            枚举分隔符。
            </summary>
        </member>
        <member name="F:Swifter.Tools.EnumHelper.EnumParsingSeperator">
            <summary>
            解析枚举时的分隔符。
            </summary>
        </member>
        <member name="M:Swifter.Tools.EnumHelper.FormatEnumFlags``1(``0,System.Char*,System.Int32,System.Int32@)">
            <summary>
            对枚举进行标识符格式化。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="value">枚举值</param>
            <param name="chars">字符串</param>
            <param name="length">字符串长度</param>
            <param name="charsWritten">写入的字符串长度</param>
            <returns>返回剩余的枚举值</returns>
        </member>
        <member name="M:Swifter.Tools.EnumHelper.IsFlagsEnum``1">
            <summary>
            获取枚举类型是否有 Flags 特性标识。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>返回一个布尔值</returns>
        </member>
        <member name="M:Swifter.Tools.EnumHelper.GetEnumTypeCode``1">
            <summary>
            获取枚举类型的 TypeCode 值。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>返回一个 TypeCode 值</returns>
        </member>
        <member name="M:Swifter.Tools.EnumHelper.AsUInt64``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.EnumHelper.AsEnum``1(System.UInt64)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Swifter.Tools.MethodHelper">
            <summary>
            函数帮助工具类。
            </summary>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.CreateDelegate``1(System.Reflection.MethodBase,System.Boolean)">
            <summary>
            创建一个指定类型的委托。
            </summary>
            <typeparam name="T">委托类型</typeparam>
            <param name="methodInfo">需要创建委托的方法</param>
            <param name="throwExceptions">当参数或返回值类型不兼容时是否发生异常。</param>
            <returns>返回一个委托或 Null。</returns>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.CreateDelegate(System.Reflection.MethodBase,System.Boolean)">
            <summary>
            创建一个未知类型的委托。
            </summary>
            <param name="methodInfo">需要创建委托的方法</param>
            <param name="throwExceptions">当参数或返回值类型不兼容时是否发生异常。</param>
            <returns>返回一个委托或 Null。</returns>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.CreateDelegate(System.Type,System.Reflection.MethodBase,System.Boolean)">
            <summary>
            创建一个指定类型的委托。
            </summary>
            <param name="delegateType">委托类型</param>
            <param name="methodBase">需要创建委托的方法</param>
            <param name="throwExceptions">当参数或返回值类型不兼容时是否发生异常。</param>
            <returns>返回一个委托或 Null。</returns>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.InternalCreateDelegateBySystem(System.Type,System.Reflection.MethodInfo)">
            <summary>
            使用系统绑定方式创建委托。
            </summary>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.InternalCreateDelegateByPointer(System.Type,System.Reflection.MethodBase)">
            <summary>
            使用函数指针方式创建委托。
            </summary>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.InternalCreateDelegateByProxy(System.Type,System.Reflection.MethodInfo)">
            <summary>
            使用动态方法代理模式创建委托。
            </summary>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.InternalCreateDelegateByDefault(System.Reflection.MethodInfo)">
            <summary>
            使用默认方式创建委托。
            </summary>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.GetParametersTypes(System.Type,System.Type[]@,System.Type@)">
            <summary>
            获取委托类型的参数类型集合和返回值类型。
            </summary>
            <param name="delegateType">委托类型</param>
            <param name="parameterTypes">返回参数类型集合</param>
            <param name="returnType">返回返回值类型</param>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.GetParametersTypes(System.Reflection.MethodBase,System.Type[]@,System.Type@)">
            <summary>
            获取方法的参数类型集合和返回值类型。
            </summary>
            <param name="methodInfo">方法</param>
            <param name="parameterTypes">返回参数类型集合</param>
            <param name="returnType">返回返回值类型</param>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.MakeDelegateType(System.Type[],System.Type)">
            <summary>
            创建一个泛型委托类型。泛型定义类型是 System.Func 或 System.Action。
            如果创建失败（仅当参数类型或返回值类型不能作为泛型时）则返回 Null。
            </summary>
            <param name="parameterTypes">参数类型集合</param>
            <param name="returnType">返回值类型</param>
            <returns>返回一个委托类型</returns>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.GetDefineDelegateName(System.Type[],System.Type)">
            <summary>
            获取定义委托类型的名称。此名称具有唯一性，当参数类型集合相同且返回值类型相同，那么获取的名称也相同。
            </summary>
            <param name="parameterTypes">参数类型集合</param>
            <param name="returnType">返回值类型</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.DefineDelegateType(System.Type[],System.Type)">
            <summary>
            在动态程序集中定义一个委托类型。如果动态程序集中已有相同的委托类型，则直接返回该委托类型。
            如果创建失败（仅当平台不支持 Emit 时）则返回 Null。
            </summary>
            <param name="parameterTypes">参数类型集合</param>
            <param name="returnType">返回值类型</param>
            <returns>返回一个委托类型</returns>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.Override(System.Reflection.MethodBase,System.Reflection.MethodBase)">
            <summary>
            使指定原函数的调用跳转到指定目标函数。
            </summary>
            <param name="sourceMethod">原方法</param>
            <param name="targetMethod">目标方法</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.Override(System.Reflection.MethodBase,System.IntPtr)">
            <summary>
            使指定原函数的调用跳转到指定目标函数。
            </summary>
            <param name="sourceMethod">原方法</param>
            <param name="targetMethodPointer">目标方法地址</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="P:Swifter.Tools.MethodHelper.OverrideIsAvailable">
            <summary>
            获取 Override 方法是否可用。
            </summary>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.GetFunctionPointer(System.Delegate)">
            <summary>
            获取委托的函数指针。
            </summary>
            <param name="delegate">委托</param>
            <returns>返回一个指针</returns>
        </member>
        <member name="M:Swifter.Tools.MethodHelper.GetFunctionPointer(System.Reflection.MethodBase)">
            <summary>
            获取方法的函数指针。
            </summary>
            <param name="methodBase">方法</param>
            <returns>返回一个指针</returns>
        </member>
        <member name="T:Swifter.Tools.MethodSign">
            <summary>
            函数参数签名标识
            </summary>
        </member>
        <member name="M:Swifter.Tools.MethodSign.#ctor(System.String,System.Type[],System.Type,System.Boolean)">
            <summary>
            构造函数参数签名标识
            </summary>
            <param name="name">函数的名称</param>
            <param name="parametersTypes">函数的参数类型</param>
            <param name="returnType">函数的返回值类型</param>
            <param name="internal">内部调用</param>
        </member>
        <member name="M:Swifter.Tools.MethodSign.#ctor(System.String,System.Type[],System.Type)">
            <summary>
            构造函数参数签名标识
            </summary>
            <param name="name">函数的名称</param>
            <param name="parametersTypes">函数的参数类型</param>
            <param name="returnType">函数的返回值类型</param>
        </member>
        <member name="M:Swifter.Tools.MethodSign.GetHashCode">
            <summary>
            返回此方法签名 HashCode。此值考虑方法名，参数，返回值生成。
            </summary>
            <returns>一个 HashCode 值。</returns>
        </member>
        <member name="M:Swifter.Tools.MethodSign.Equals(System.Object)">
            <summary>
            比较一个对象的实例是否为 MethodSign 类型，并且和当前实例的签名相同。
            </summary>
            <param name="obj">对象的实例</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.MethodSign.op_Equality(Swifter.Tools.MethodSign,Swifter.Tools.MethodSign)">
            <summary>
            比较两个 MethodSign 是否相同。
            </summary>
            <param name="XSign">第一个 MethodSign。</param>
            <param name="YSign">第二个 MethodSign。</param>
            <returns>两个 MethodSign 是否相同。</returns>
        </member>
        <member name="M:Swifter.Tools.MethodSign.op_Inequality(Swifter.Tools.MethodSign,Swifter.Tools.MethodSign)">
            <summary>
            比较两个 MethodSign 是否不相同。
            </summary>
            <param name="XSign">第一个 MethodSign。</param>
            <param name="YSign">第二个 MethodSign。</param>
            <returns>两个 MethodSign 是否不相同。</returns>
        </member>
        <member name="T:Swifter.Tools.RuntimeMethodSign">
            <summary>
            运行时函数参数签名标识
            </summary>
        </member>
        <member name="M:Swifter.Tools.RuntimeMethodSign.GetHashCode">
            <summary>
            返回此方法签名 HashCode。此值考虑方法名和参数生成。
            </summary>
            <returns>一个 HashCode 值。</returns>
        </member>
        <member name="M:Swifter.Tools.RuntimeMethodSign.Equals(System.Object)">
            <summary>
            比较一个对象的实例是否为 RuntimeMethodSign 类型，并且和当前实例的签名相同。
            </summary>
            <param name="obj">对象的实例</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.RuntimeMethodSign.op_Implicit(System.ValueTuple{System.String,System.Object[]})~Swifter.Tools.RuntimeMethodSign">
            <summary>
            构造运行时函数参数签名标识
            </summary>
            <param name="methodSign">包含函数名称和函数参数</param>
        </member>
        <member name="M:Swifter.Tools.RuntimeMethodSign.op_Implicit(System.ValueTuple{System.String,System.Type[]})~Swifter.Tools.RuntimeMethodSign">
            <summary>
            构造运行时函数参数签名标识
            </summary>
            <param name="methodSign">包含函数名称和函数参数类型</param>
        </member>
        <member name="T:Swifter.Tools.RuntimeParamsSign">
            <summary>
            表示函数的参数签名标识
            </summary>
        </member>
        <member name="M:Swifter.Tools.RuntimeParamsSign.GetHashCode">
            <summary>
            返回此方法签名 HashCode。此值只考虑参数生成。
            </summary>
            <returns>一个 HashCode 值。</returns>
        </member>
        <member name="M:Swifter.Tools.RuntimeParamsSign.Equals(System.Object)">
            <summary>
            比较一个对象的实例是否为 RuntimeParamsSign 类型，并且和当前实例的签名相同。
            </summary>
            <param name="obj">对象的实例</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.RuntimeParamsSign.op_Implicit(System.Type[])~Swifter.Tools.RuntimeParamsSign">
            <summary>
            隐式构建函数的参数签名标识。
            </summary>
            <param name="types">参数类型集合</param>
        </member>
        <member name="M:Swifter.Tools.RuntimeParamsSign.op_Implicit(System.Object[])~Swifter.Tools.RuntimeParamsSign">
            <summary>
            隐式构建函数的参数签名标识。
            </summary>
            <param name="parameters">参数对象集合</param>
        </member>
        <member name="T:Swifter.Tools.DateTimeHelper">
            <summary>
            提供对象日期和时间操作的方法。
            </summary>
        </member>
        <member name="F:Swifter.Tools.DateTimeHelper.TicksPerUnixEpoch">
            <summary>
            1970-01-01 的 Tick 值。
            </summary>
        </member>
        <member name="F:Swifter.Tools.DateTimeHelper.TicksPerUTCDifference">
            <summary>
            本地时间与 UTC 时间的时差 Tick 值。
            </summary>
        </member>
        <member name="F:Swifter.Tools.DateTimeHelper.NanosecondsPerTick">
            <summary>
            1 Tick 的纳秒值。
            </summary>
        </member>
        <member name="F:Swifter.Tools.DateTimeHelper.ISOStringMaxLength">
            <summary>
            ISO 格式日期字符串的最大长度。
            </summary>
        </member>
        <member name="F:Swifter.Tools.DateTimeHelper.DbStringMaxLength">
            <summary>
            Db 格式日期字符串的最大长度。
            </summary>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToISOString(System.DateTime,System.Char*)">
            <summary>
            将日期和时间以 ISO8061 格式字符串写入到字符串中。
            </summary>
            <param name="value">日期和时间</param>
            <param name="chars">字符串</param>
            <returns>返回写入结束位置，最后一个字符写入位置 + 1。</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToISOString(System.DateTimeOffset,System.Char*)">
            <summary>
            将日期和时间点以 ISO8061 格式字符串写入到字符串中。
            </summary>
            <param name="value">日期和时间点</param>
            <param name="chars">字符串</param>
            <returns>返回写入结束位置，最后一个字符写入位置 + 1。</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToUTCISOString(System.DateTime,System.Char*)">
            <summary>
            将日期和时间的 UTC 时间以 ISO8061 格式字符串写入到字符串中。
            </summary>
            <param name="value">日期和时间</param>
            <param name="chars">字符串</param>
            <returns>返回写入结束位置，最后一个字符写入位置 + 1。</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToISOString(System.DateTime)">
            <summary>
            将日期和时间以 ISO8061 格式化字符串。
            </summary>
            <param name="value">日期和时间</param>
            <returns>返回一个字符串。</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToISOString(System.DateTimeOffset)">
            <summary>
            将日期和时间点以 ISO8061 格式化字符串。
            </summary>
            <param name="value">日期和时间点</param>
            <returns>返回一个字符串。</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToUTCISOString(System.DateTime)">
            <summary>
            将日期和时间的 UTC 时间以 ISO8061 格式化字符串。
            </summary>
            <param name="value">日期和时间</param>
            <returns>返回一个字符串。</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToDbString(System.DateTime)">
            <summary>
            将日期和时间格式化为数据库格式的字符串。格式化字符串：'yyyy-MM-dd HH:mm:ss.fffffff'。
            </summary>
            <param name="value">日期和时间</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToDbString(System.TimeSpan)">
            <summary>
            将时间格式化为数据库格式的字符串。格式化字符串：'HH:mm:ss.fffffff'。
            </summary>
            <param name="value">时间</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToDbString(System.DateTimeOffset)">
            <summary>
            将日期和时间格式化为数据库格式的字符串。格式化字符串：'yyyy-MM-dd HH:mm:ss.fffffff zzz'。
            </summary>
            <param name="value">日期和时间</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToDbString(System.DateTime,System.Char*)">
            <summary>
            将日期和时间格式化为数据库格式的字符串。格式化字符串：'yyyy-MM-dd HH:mm:ss.fffffff'。
            </summary>
            <param name="value">日期和时间</param>
            <param name="chars">字符串</param>
            <returns>返回字符串长度</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToDbString(System.TimeSpan,System.Char*)">
            <summary>
            将时间格式化为数据库格式的字符串。格式化字符串：'HH:mm:ss.fffffff'。
            </summary>
            <param name="value">时间</param>
            <param name="chars">字符串</param>
            <returns>返回字符串长度</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.ToDbString(System.DateTimeOffset,System.Char*)">
            <summary>
            将日期和时间格式化为数据库格式的字符串。格式化字符串：'yyyy-MM-dd HH:mm:ss.fffffff zzz'。
            </summary>
            <param name="value">日期和时间</param>
            <param name="chars">字符串</param>
            <returns>返回字符串长度</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.TryParseISODateTime(System.Char*,System.Int32,System.DateTime@,System.Int64@)">
            <summary>
            尝试解析 ISO8061 格式日期和时间字符串。
            </summary>
            <param name="chars">字符串</param>
            <param name="length">解析结束位置。</param>
            <param name="value">成功返回日期和时间对象，失败返回日期和时间最小值。</param>
            <param name="difference">返回解析出的时间差</param>
            <returns>返回成功或失败。</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.TryParseISODateTime(System.Char*,System.Int32,System.DateTime@)">
            <summary>
            尝试解析 ISO8061 格式日期和时间字符串。
            </summary>
            <param name="chars">字符串</param>
            <param name="length">解析结束位置。</param>
            <param name="value">成功返回日期和时间对象，失败返回日期和时间最小值。</param>
            <returns>返回成功或失败。</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.TryParseISODateTime(System.String,System.DateTime@)">
            <summary>
            尝试解析 ISO8061 格式日期和时间字符串。
            </summary>
            <param name="text">字符串</param>
            <param name="value">成功返回日期和时间对象，失败返回日期和时间最小值。</param>
            <returns>返回成功或失败。</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.TryParseISODateTime(System.Char*,System.Int32,System.DateTimeOffset@)">
            <summary>
            尝试解析 ISO8061 格式日期和时间点字符串。
            </summary>
            <param name="chars">字符串</param>
            <param name="length">解析结束位置。</param>
            <param name="value">成功返回日期和时间点对象，失败返回日期和时间点最小值。</param>
            <returns>返回成功或失败。</returns>
        </member>
        <member name="M:Swifter.Tools.DateTimeHelper.TryParseISODateTime(System.String,System.DateTimeOffset@)">
            <summary>
            尝试解析 ISO8061 格式日期和时间点字符串。
            </summary>
            <param name="text">字符串</param>
            <param name="value">成功返回日期和时间点对象，失败返回日期和时间点最小值。</param>
            <returns>返回成功或失败。</returns>
        </member>
        <member name="T:Swifter.Tools.NumberHelper">
            <summary>
            提供数字类的方法。
            这些方法都是高效的。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.MaxRadix">
            <summary>
            支持的最大进制。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.MinRadix">
            <summary>
            支持的最小进制。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.IgnoreCaseMaxRadix">
            <summary>
            忽略大小写的前提下支持的最大进制。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.DecimalFirstRadix">
            <summary>
            十进制优先并自动匹配进制数。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.MaxFirstRadix">
            <summary>
            最大进制优先，自动匹配进制数。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.PositiveSign">
            <summary>
            正负号。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.NegativeSign">
            <summary>
            负符号。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.InfinitySign">
            <summary>
            无限大符号。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.ExponentSign">
            <summary>
            指数符号。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.exponentSign">
            <summary>
            指数符号（小写）。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.DotSign">
            <summary>
            点符号。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.HexSign">
            <summary>
            十六进制字符。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.hexSign">
            <summary>
            十六进制字符（小写）。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.BinarySign">
            <summary>
            二进制字符。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.binarySign">
            <summary>
            二进制字符（小写）。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.NaNSign">
            <summary>
            非数字符号。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.PositiveInfinitySign">
            <summary>
            正无限大符号。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.NegativeInfinitySign">
            <summary>
            负无限大符号。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.NSign">
            <summary>
            非数字符号的首字符。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.nSign">
            <summary>
            非数字符号的首字符。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.SplitSign">
            <summary>
            数字之间的分隔符。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.radix">
            <summary>
            表示当前实例的进制数。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.MaxDoubleStringLength">
            <summary>
            当前进制下 Double 的最大字符串长度。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.MaxSingleStringLength">
            <summary>
            当前进制下 Single 的最大字符串长度。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.DecimalMaxDoubleStringLength">
            <summary>
            十进制下 Double 的最大字符串长度。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.DecimalMaxSingleStringLength">
            <summary>
            十进制下 Single 的最大字符串长度。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberHelper.MaxUInt64NumbersLength">
            <summary>
            当前进制下 UInt64 的最大字符串长度。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberHelper.MaxInt64NumbersLength">
            <summary>
            当前进制下 Int64 的最大字符串长度。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.DecimalMaxUInt64NumbersLength">
            <summary>
            十进制下 UInt64 的最大字符串长度。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.DecimalMaxInt64NumbersLength">
            <summary>
            十进制下 Int64 的最大字符串长度。
            </summary>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.#ctor(System.Byte)">
            <summary>
            初始化实例。
            </summary>
            <param name="radix">指定进制</param>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.AppendD1(System.Char@,System.UInt64)">
            <summary>
            拼接一位数字。
            </summary>
            <param name="chars">字符串</param>
            <param name="value">数字，不可大于三位数</param>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.AppendD2(System.Char@,System.UInt64)">
            <summary>
            拼接两位数字。
            </summary>
            <param name="chars">字符串</param>
            <param name="value">数字，不可大于三位数</param>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.AppendD3(System.Char@,System.UInt64)">
            <summary>
            拼接三位数字。
            </summary>
            <param name="chars">字符串</param>
            <param name="value">数字，不可大于三位数</param>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.AppendD1(System.Char*,System.UInt64)">
            <summary>
            拼接一位数字。
            </summary>
            <param name="chars">字符串</param>
            <param name="value">数字，不可大于三位数</param>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.AppendD2(System.Char*,System.UInt64)">
            <summary>
            拼接两位数字。
            </summary>
            <param name="chars">字符串</param>
            <param name="value">数字，不可大于三位数</param>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.AppendD3(System.Char*,System.UInt64)">
            <summary>
            拼接三位数字。
            </summary>
            <param name="chars">字符串</param>
            <param name="value">数字，不可大于三位数</param>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.GetPositiveExponent(System.Double)">
            <summary>
            获取整数部分位数。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.GetNegativeExponent(System.Double)">
            <summary>
            获取数字需要移动多少位才能大于等于 1。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.GetExponent(System.Double)">
            <summary>
            获取 Double 的指数值。
            </summary>
            <param name="value">Double</param>
            <returns>返回指数</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.Pow(System.Double,System.Int32)">
            <summary>
            对浮点数乘以指定次数的进制数。
            </summary>
            <param name="x">浮点数</param>
            <param name="y">指定次数</param>
            <returns>返回一个浮点数</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.IsSpecialValue(System.Double)">
            <summary>
            判断一个 <see cref="T:System.Double"/> 是否为特殊值。特殊值包括 <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.NegativeInfinity"/> 和 <see cref="F:System.Double.NaN"/>。
            </summary> 
            <param name="value">需要判断的 <see cref="T:System.Double"/> 值</param>
            <returns>返回一个 <see cref="T:System.Boolean"/> 值</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.IsSpecialValue(System.Single)">
            <summary>
            判断一个 <see cref="T:System.Single"/> 是否为特殊值。特殊值包括 <see cref="F:System.Single.PositiveInfinity"/>, <see cref="F:System.Single.NegativeInfinity"/> 和 <see cref="F:System.Single.NaN"/>。
            </summary>
            <param name="value">需要判断的 <see cref="T:System.Single"/> 值</param>
            <returns>返回一个 <see cref="T:System.Boolean"/> 值</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToString(System.Double,System.Char*)">
            <summary>
            将一个 Double 值写入到空间足够的字符串中。
            </summary>
            <param name="value">Double 值</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToString(System.Single,System.Char*)">
            <summary>
            将一个 Single 值写入到空间足够的字符串中。
            </summary>
            <param name="value">Single 值</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ParseDouble(System.Char*,System.Int32)">
            <summary>
            
            </summary>
            <param name="chars"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.DecimalParseDouble(System.Char*,System.Int32)">
            <summary>
            
            </summary>
            <param name="chars"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.GetLength(System.UInt64)">
            <summary>
            获取 UInt64 值的字符串表现形式长度。
            </summary>
            <param name="value">UInt64 值</param>
            <returns>返回字符串表现形式长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToString(System.UInt64,System.Char*)">
            <summary>
            将一个 UInt64 值写入到空间足够的字符串中。
            </summary>
            <param name="value">UInt64 值</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToString(System.UInt64,System.Byte,System.Char*)">
            <summary>
            将指定长度的 UInt64 值写入到空间足够的字符串中。
            </summary>
            <param name="value">UInt64 值</param>
            <param name="length">指定长度</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToString(System.Int64,System.Char*)">
            <summary>
            将一个 Int64 值写入到空间足够的字符串中。
            </summary>
            <param name="value">Int64 值</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToString(System.UInt32*,System.Int32,System.Char*)">
            <summary>
            将一个字节正整数写入到空间足够的字符串中。
            </summary>
            <param name="value">字节正整数</param>
            <param name="length">字节正整数的长度</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.DirectOperateToString(System.UInt32*,System.Int32,System.Char*)">
            <summary>
            将一个字节正整数写入到空间足够的字符串中。此方法对字节正整数直接运算，所以会改变它的值。
            </summary>
            <param name="value">字节正整数</param>
            <param name="length">字节正整数的长度</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ParseInt64(System.Char*,System.Int32)">
            <summary>
            
            </summary>
            <param name="chars"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.DecimalParseInt64(System.Char*,System.Int32)">
            <summary>
            
            </summary>
            <param name="chars"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ParseUInt64(System.Char*,System.Int32)">
            <summary>
            
            </summary>
            <param name="chars"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.DecimalParseUInt64(System.Char*,System.Int32)">
            <summary>
            
            </summary>
            <param name="chars"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ParseBigInteger(System.Char*,System.Int32,System.UInt32*)">
            <summary>
            尝试从字符串开始位置解析一个字节正整数值。
            </summary>
            <param name="chars">字符串</param>
            <param name="length">字符串长度</param>
            <param name="value">字节正整数空间</param>
            <returns>解析成功则返回解析的长度，失败则返回 0</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.GetNumberInfo(System.Char*,System.Int32,System.Byte)">
            <summary>
            创建一个 NumberInfo。
            </summary>
            <param name="chars">字符串</param>
            <param name="length">字符串长度</param>
            <param name="max_radix">最大进制数</param>
            <returns>返回一个 NumberInfo</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToUInt64(Swifter.Tools.NumberInfo)">
            <summary>
            将 NumberInfo 转换为 UInt64。失败将引发异常。
            </summary>
            <param name="numberInfo">NumberInfo</param>
            <returns>返回一个 UInt64</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToInt64(Swifter.Tools.NumberInfo)">
            <summary>
            将 NumberInfo 转换为 Int64。失败将引发异常。
            </summary>
            <param name="numberInfo">NumberInfo</param>
            <returns>返回一个 Int64</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToDouble(Swifter.Tools.NumberInfo)">
            <summary>
            将 NumberInfo 转换为 Double。失败将引发异常。
            </summary>
            <param name="numberInfo">NumberInfo</param>
            <returns>返回一个 Double</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToDecimal(Swifter.Tools.NumberInfo)">
            <summary>
            将一个 NumberInfo 转换为 Decimal。转换失败则引发异常。
            </summary>
            <param name="numberInfo">NumberInfo</param>
            <returns>返回一个 Decimal</returns>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.DecimalStringMaxLength">
            <summary>
            十进制数字字符串最大可能的长度。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.GuidStringWithSeparatorsLength">
            <summary>
            Guid 字符串包含分隔符的长度。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.GuidStringLength">
            <summary>
            Guid 字符串的长度。
            </summary>
        </member>
        <member name="F:Swifter.Tools.NumberHelper.Decimal">
            <summary>
            十进制实例。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberHelper.Hex">
            <summary>
            十六进制实例。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberHelper.Octal">
            <summary>
            八进制实例。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberHelper.Binary">
            <summary>
            二进制实例。
            </summary>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.GetOrCreateInstance(System.Byte)">
            <summary>
            获取指定进制的 NumberHelper 实例。
            </summary>
            <param name="radix">进制数</param>
            <returns>返回 NumberHelper 实例</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToString(System.Guid,System.Char*,System.Boolean)">
            <summary>
            将一个 Guid 值写入到一个空间足够的字符串中。
            </summary>
            <param name="value">Guid 值</param>
            <param name="chars">空间足够的字符串</param>
            <param name="separator">是否包含分隔符</param>
            <returns>返回写入长度。</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.GetScale(System.Decimal)">
            <summary>
            获取一个十进制数字的小数刻度。
            </summary>
            <param name="value">十进制数字</param>
            <returns>返回小数的位数</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.GetDecimalLength(System.UInt64)">
            <summary>
            获取十进制数字的长度。
            </summary>
            <param name="value">数字</param>
            <returns>返回长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToString(System.Decimal,System.Char*)">
            <summary>
            将一个 Decimal 值写入到一个空间足够的字符串中。
            </summary>
            <param name="value">Decimal 值</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToDecimalString(System.UInt64,System.Char*)">
            <summary>
            将一个 UInt64 值以十进制格式写入到一个空间足够的字符串中。
            </summary>
            <param name="value">UInt64 值</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToDecimalString(System.Int64,System.Char*)">
            <summary>
            将一个 Int64 值写入到空间足够的字符串中。
            </summary>
            <param name="value">Int64 值</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ToDecimalString(System.UInt64,System.Byte,System.Char*)">
            <summary>
            将指定长度的 UInt64 值以十进制格式写入到空间足够的字符串中。
            </summary>
            <param name="value">UInt64 值</param>
            <param name="length">指定长度</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.DirectOperateToDecimalString(System.UInt32*,System.Int32,System.Char*)">
            <summary>
            将一个字节正整数写入到空间足够的字符串中。此方法对字节正整数直接运算，所以会改变它的值。
            </summary>
            <param name="value">字节正整数</param>
            <param name="length">字节正整数的长度</param>
            <param name="chars">空间足够的字符串</param>
            <returns>返回写入长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ParseGuid(System.Char*,System.Int32)">
            <summary>
            尝试从字符串开始位置解析一个 Guid 值。
            </summary>
            <param name="chars">字符串</param>
            <param name="length">字符串长度</param>
            <returns>解析成功则返回解析的长度，失败则返回 0</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.ParseDecimal(System.Char*,System.Int32)">
            <summary>
            
            </summary>
            <param name="chars"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.Mult(System.UInt32*,System.Int32,System.UInt32,System.UInt32@)">
            <summary>
            字节正整数乘以 UInt32 值。
            </summary>
            <param name="number">字节正整数</param>
            <param name="length">字节正整数的长度</param>
            <param name="value">UInt32 值</param>
            <param name="carry">进位值</param>
            <returns>返回字节正整数的长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.Div(System.UInt32*,System.Int32,System.UInt32,System.UInt32@)">
            <summary>
            字节正整数除以 UInt32 值。
            </summary>
            <param name="number">字节正整数</param>
            <param name="length">字节正整数的长度</param>
            <param name="value">UInt32 值</param>
            <param name="remainder">余数</param>
            <returns>返回字节正整数的长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.Add(System.UInt32*,System.Int32,System.UInt32,System.UInt32@)">
            <summary>
            字节正整数加上 UInt32 值。
            </summary>
            <param name="number">字节正整数</param>
            <param name="length">字节正整数的长度</param>
            <param name="value">UInt32 值</param>
            <param name="carry">进位值</param>
            <returns>返回字节正整数的长度</returns>
        </member>
        <member name="M:Swifter.Tools.NumberHelper.Sub(System.UInt32*,System.Int32,System.UInt32,System.UInt32@)">
            <summary>
            字节正整数减去 UInt32 值。
            </summary>
            <param name="number">字节正整数</param>
            <param name="length">字节正整数的长度</param>
            <param name="value">UInt32 值</param>
            <param name="remainder">余数</param>
            <returns>返回字节正整数的长度</returns>
        </member>
        <member name="T:Swifter.Tools.NumberInfo">
            <summary>
            表示一个字符串数字信息。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.Chars">
            <summary>
            获取该字符串的指针。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.IsNumber">
            <summary>
            获取该字符串是否是一个数字。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.IsNegative">
            <summary>
            获取该数字是否为负数。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.IntegerBegin">
            <summary>
            获取此数字的整数部分的开始位置。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.IntegerCount">
            <summary>
            获取此数字的整数部分数字的数量。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.IntegerLength">
            <summary>
            获取此数字的整数部分长度。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.HaveFractional">
            <summary>
            获取此数字是否存在小数。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.FractionalBegin">
            <summary>
            获取此数字的小数部分的开始位置。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.FractionalCount">
            <summary>
            获取此数字的小数部分数字的数量。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.FractionalLength">
            <summary>
            获取此数字的小数部分长度。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.HaveExponent">
            <summary>
            获取此数字是否存在指数。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.ExponentIsNegative">
            <summary>
            获取此数字的指数是否为负数。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.ExponentlBegin">
            <summary>
            获取此数字的指数部分的开始位置（不含符号位）。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.ExponentCount">
            <summary>
            获取此数字的指数部分数字的数量。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.ExponentLength">
            <summary>
            获取此数字的指数部分长度。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.MaxDigit">
            <summary>
            获取此数字出现的最大数字。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.MaxRadix">
            <summary>
            获取此数字允许的最大进制数。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.IsDecimal">
            <summary>
            获取是否可以为十进制。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.IsBinary">
            <summary>
            获取是否可以为二进制。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.IsHex">
            <summary>
            获取是否可以为十六进制。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.IsOctal">
            <summary>
            获取是否可以为八进制数字。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.End">
            <summary>
            获取此数字在字符串中的结束位置，数字内容不包含此位置。
            </summary>
        </member>
        <member name="P:Swifter.Tools.NumberInfo.StringLength">
            <summary>
            获取此数字的字符串长度。
            </summary>
        </member>
        <member name="M:Swifter.Tools.NumberInfo.ToString">
            <summary>
            获取此数字的字符串表现形式。
            </summary>
            <returns>返回一个 string 值</returns>
        </member>
        <member name="M:Swifter.Tools.NumberInfo.ToDouble(System.Byte)">
            <summary>
            转换为 Double。失败将引发异常。
            </summary>
            <returns>返回一个 Double</returns>
        </member>
        <member name="M:Swifter.Tools.NumberInfo.ToDecimal">
            <summary>
            转换为 Double。失败将引发异常。
            </summary>
            <returns>返回一个 Double</returns>
        </member>
        <member name="M:Swifter.Tools.NumberInfo.ToUInt64(System.Byte)">
            <summary>
            转换为 UInt64。失败将引发异常。
            </summary>
            <returns>返回一个 Double</returns>
        </member>
        <member name="M:Swifter.Tools.NumberInfo.ToInt64(System.Byte)">
            <summary>
            转换为 Int64。失败将引发异常。
            </summary>
            <returns>返回一个 Double</returns>
        </member>
        <member name="M:Swifter.Tools.NumberInfo.IsCommonRadix(System.Byte@)">
            <summary>
            尝试获取常用进制数。
            </summary>
            <param name="radix"></param>
            <returns></returns>
        </member>
        <member name="T:Swifter.Tools.ParseCode">
            <summary>
            解析的结果代码。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ParseCode.Success">
            <summary>
            正常解析。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ParseCode.OutOfRadix">
            <summary>
            出现超出基数范围内的字符。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ParseCode.OutOfRange">
            <summary>
            结果超出类型的范围。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ParseCode.WrongFormat">
            <summary>
            格式错误。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ParseCode.Empty">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="T:Swifter.Tools.ArrayAppendingInfo">
            <summary>
            为集合计算常用的长度，以获取在动态长度数组最佳的性能。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ArrayAppendingInfo.FirstCommonlyUsedLength">
            <summary>
             第一常用长度。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ArrayAppendingInfo.FirstCommonlyUsedNumber">
            <summary>
            第一常用长度使用次数。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ArrayAppendingInfo.SecondCommonlyUsedLength">
            <summary>
            第二常用长度
            </summary>
        </member>
        <member name="F:Swifter.Tools.ArrayAppendingInfo.SecondCommonlyUsedNumber">
            <summary>
            第二常用长度使用次数。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ArrayAppendingInfo.ThirdCommonlyUsedLength">
            <summary>
            第三常用长度
            </summary>
        </member>
        <member name="F:Swifter.Tools.ArrayAppendingInfo.ThirdCommonlyUsedNumber">
            <summary>
            第三常用长度使用次数。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ArrayAppendingInfo.FourthCommonlyUsedLength">
            <summary>
            第四常用长度
            </summary>
        </member>
        <member name="F:Swifter.Tools.ArrayAppendingInfo.FourthCommonlyUsedNumber">
            <summary>
            第四常用长度使用次数。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ArrayAppendingInfo.FifthCommonlyUsedLength">
            <summary>
            第五常用长度（非前四类的最后一次使用长度）
            </summary>
        </member>
        <member name="F:Swifter.Tools.ArrayAppendingInfo.FifthCommonlyUsedNumber">
            <summary>
            第五常用长度使用次数。
            </summary>
        </member>
        <member name="F:Swifter.Tools.ArrayAppendingInfo.MostClosestMeanCommonlyUsedLength">
            <summary>
            最接近平均值的常用长度。
            </summary>
        </member>
        <member name="M:Swifter.Tools.ArrayAppendingInfo.AddUsedLength(System.Int32)">
            <summary>
            添加使用长度计数。
            </summary>
            <param name="length">使用的长度</param>
        </member>
        <member name="T:Swifter.Tools.BaseObjectPool`1">
            <summary>
            提供对象池的基类。
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Swifter.Tools.BaseObjectPool`1.Rent">
            <summary>
            借出一个实例。（借出的实例不一定要归还，平衡选择，如果归还成本大于实例本身，可以选择不归还实例。）
            </summary>
            <returns>返回一个实例</returns>
        </member>
        <member name="M:Swifter.Tools.BaseObjectPool`1.Return(`0)">
            <summary>
            归还一个实例。
            </summary>
            <param name="obj">实例</param>
        </member>
        <member name="M:Swifter.Tools.BaseObjectPool`1.CreateInstance">
            <summary>
            由派生类重写的创建实例方法。
            </summary>
            <returns>返回一个实例</returns>
        </member>
        <member name="T:Swifter.Tools.Cache`2">
            <summary>
            一个键值对缓存集合。
            </summary>
            <typeparam name="TKey">缓存键</typeparam>
            <typeparam name="TValue">缓存值</typeparam>
        </member>
        <member name="T:Swifter.Tools.Cache`2.Entry">
            <summary>
            缓存实体。
            </summary>
        </member>
        <member name="F:Swifter.Tools.Cache`2.Entry.Key">
            <summary>
            该缓存的键，注意：修改此值将导致缓存集合不稳定。
            </summary>
        </member>
        <member name="F:Swifter.Tools.Cache`2.Entry.Value">
            <summary>
            该缓存的值。
            </summary>
        </member>
        <member name="P:Swifter.Tools.Cache`2.Count">
            <summary>
            获取缓存集合当前的缓存数量。
            </summary>
        </member>
        <member name="P:Swifter.Tools.Cache`2.Capacity">
            <summary>
            读取或设置缓存集合的容量。
            </summary>
        </member>
        <member name="P:Swifter.Tools.Cache`2.Keys">
            <summary>
            获取键集合。
            </summary>
        </member>
        <member name="P:Swifter.Tools.Cache`2.Values">
            <summary>
            获取值集合。
            </summary>
        </member>
        <member name="M:Swifter.Tools.Cache`2.#ctor">
            <summary>
            使用默认比较器初始化实例。
            </summary>
        </member>
        <member name="M:Swifter.Tools.Cache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            使用指定比较器初始化实例。
            </summary>
            <param name="comparer">指定比较器</param>
        </member>
        <member name="P:Swifter.Tools.Cache`2.Item(System.Int32)">
            <summary>
            获取指定索引处的缓存。
            </summary>
            <param name="index">指定索引</param>
            <returns>返回缓存的引用。</returns>
        </member>
        <member name="M:Swifter.Tools.Cache`2.SetValue(System.Int32,`1)">
            <summary>
            设置指定索引处缓存的值。
            </summary>
            <param name="index">指定索引</param>
            <param name="value">新的值</param>
        </member>
        <member name="M:Swifter.Tools.Cache`2.Add(`0,`1)">
            <summary>
            直接添加一个缓存。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
        </member>
        <member name="M:Swifter.Tools.Cache`2.SetOrAdd(`0,`1)">
            <summary>
            修改或添加一个缓存。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
        </member>
        <member name="M:Swifter.Tools.Cache`2.FindIndex(`0)">
            <summary>
            找到第一个（先进后出）缓存所在的索引。
            </summary>
            <param name="key">缓存键</param>
            <returns>返回索引，没找到则返回 -1</returns>
        </member>
        <member name="M:Swifter.Tools.Cache`2.NextIndex(System.Int32)">
            <summary>
            找到下一个（先进后出）缓存所在的索引。
            </summary>
            <param name="index">当前缓存索引</param>
            <returns>返回索引，没找到则返回 -1</returns>
        </member>
        <member name="M:Swifter.Tools.Cache`2.RemoveAt(System.Int32)">
            <summary>
            移除指定索引处的缓存。
            </summary>
            <param name="index">指定索引</param>
        </member>
        <member name="M:Swifter.Tools.Cache`2.TryGetValue(`0,`1@)">
            <summary>
            尝试获取第一个（先进后出）缓存的值。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <returns>返回是否获取成功</returns>
        </member>
        <member name="M:Swifter.Tools.Cache`2.Compress">
            <summary>
            压缩缓存集合。
            </summary>
        </member>
        <member name="M:Swifter.Tools.Cache`2.GetFirstValue(`0)">
            <summary>
            获取第一个（先进后出）缓存的值。
            </summary>
            <param name="key">缓存键</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">当缓存键不存在时引发此异常</exception>
            <returns>返回缓存的值</returns>
        </member>
        <member name="T:Swifter.Tools.HGlobalCache`1">
            <summary>
            提供指定值类型的全局内存缓存。
            </summary>
            <typeparam name="T">指定值类型</typeparam>
        </member>
        <member name="F:Swifter.Tools.HGlobalCache`1.AbsolutelyMaxSize">
            <summary>
            可以设置的最大缓存大小。
            </summary>
        </member>
        <member name="F:Swifter.Tools.HGlobalCache`1.AbsolutelyMinSize">
            <summary>
            可以设置的最小缓存大小。
            </summary>
        </member>
        <member name="P:Swifter.Tools.HGlobalCache`1.MaxSize">
            <summary>
            读取或设置最大缓存大小。
            </summary>
        </member>
        <member name="P:Swifter.Tools.HGlobalCache`1.MinSize">
            <summary>
            读取或设置最小缓存大小。
            </summary>
        </member>
        <member name="P:Swifter.Tools.HGlobalCache`1.Context">
            <summary>
            获取元数组。
            </summary>
        </member>
        <member name="P:Swifter.Tools.HGlobalCache`1.Available">
            <summary>
            可用的空间总长度。
            </summary>
        </member>
        <member name="P:Swifter.Tools.HGlobalCache`1.Rest">
            <summary>
            剩余可用的空间长度。
            </summary>
        </member>
        <member name="F:Swifter.Tools.HGlobalCache`1.Count">
            <summary>
            已使用的空间数量。
            </summary>
        </member>
        <member name="M:Swifter.Tools.HGlobalCache`1.#ctor">
            <summary>
            创建全局缓存实例。
            </summary>
        </member>
        <member name="P:Swifter.Tools.HGlobalCache`1.First">
            <summary>
            第一个元素的地址。
            </summary>
        </member>
        <member name="P:Swifter.Tools.HGlobalCache`1.Last">
            <summary>
            最后一个元素的地址。
            </summary>
        </member>
        <member name="P:Swifter.Tools.HGlobalCache`1.Current">
            <summary>
            当前元素的地址。
            </summary>
        </member>
        <member name="P:Swifter.Tools.HGlobalCache`1.Offset">
            <summary>
            获取或设置偏移量。
            </summary>
        </member>
        <member name="M:Swifter.Tools.HGlobalCache`1.Expand(System.Int32)">
            <summary>
            扩展全局缓存内存。
            </summary>
            <param name="expandMinSize">最小扩展长度</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCache`1.op_Implicit(Swifter.Tools.HGlobalCache{`0})~System.ArraySegment{`0}">
            <summary>
            返回全局缓存中的内容 ArraySegment。
            </summary>
            <param name="hGCache"></param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCache`1.op_Implicit(Swifter.Tools.HGlobalCache{`0})~Swifter.Tools.Ps{`0}">
            <summary>
            返回全局缓存中的内容段。
            </summary>
            <param name="hGCache"></param>
        </member>
        <member name="T:Swifter.Tools.HGlobalCacheExtensions">
            <summary>
            HGlobalCache 扩展方法。
            </summary>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteToAsync(Swifter.Tools.HGlobalCache{System.Char},System.IO.TextWriter)">
            <summary>
            异步将缓存中内容写入到指定的文本写入器中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="textWriter">文本写入器</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteToAsync(Swifter.Tools.HGlobalCache{System.Byte},System.IO.Stream)">
            <summary>
            异步将缓存中内容写入到指定的流中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="stream">流</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFromAsync(Swifter.Tools.HGlobalCache{System.Char},System.IO.TextReader)">
            <summary>
            异步将 TextReader 的内容缓冲到 HGlobalCache 中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="textReader">TextReader</param>
            <returns>返回缓冲的长度</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFromAsync(Swifter.Tools.HGlobalCache{System.Byte},System.IO.Stream)">
            <summary>
            异步将 Stream 的内容缓冲到 HGlobalCache 中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="stream">Stream</param>
            <returns>返回缓冲的长度</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteToAsync(Swifter.Tools.HGlobalCache{System.Char},System.IO.Stream,System.Text.Encoding)">
            <summary>
            异步将 HGlobalCache 中的内容写入到流中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="stream">流</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFromAsync(Swifter.Tools.HGlobalCache{System.Char},System.IO.Stream,System.Text.Encoding)">
            <summary>
            异步将 Stream 的内容缓存到 HGlobalCache 中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="stream">Stream</param>
            <param name="encoding">编码</param>
            <returns>返回缓冲的长度</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadToEndAsync(System.IO.Stream)">
            <summary>
            异步读取流到结尾。
            </summary>
            <param name="stream">流</param>
            <returns>返回一个数组段</returns>
        </member>
        <member name="F:Swifter.Tools.HGlobalCacheExtensions.BytesPool">
            <summary>
            字节缓存池。
            </summary>
        </member>
        <member name="F:Swifter.Tools.HGlobalCacheExtensions.CharsPool">
            <summary>
            字符缓存池。
            </summary>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteTo(Swifter.Tools.HGlobalCache{System.Char},System.IO.Stream,System.Text.Encoding)">
            <summary>
            将 HGlobalCache 中的内容写入到流中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="stream">流</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Char},System.IO.Stream,System.Text.Encoding)">
            <summary>
            将 Stream 的内容缓存到 HGlobalCache 中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="stream">Stream</param>
            <param name="encoding">编码</param>
            <returns>返回缓冲的长度</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteTo(Swifter.Tools.HGlobalCache{System.Char},Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding)">
            <summary>
            将 HGlobalCache 中的内容写入到 destination 中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="destination">destination</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Char},Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding)">
            <summary>
            将 source 的内容缓存到 HGlobalCache 中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="source">source</param>
            <param name="encoding">编码</param>
            <returns>返回缓冲的长度</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Char},System.ArraySegment{System.Byte},System.Text.Encoding)">
            <summary>
            将 source 的内容缓存到 HGlobalCache 中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="source">source</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Char},System.Byte[],System.Text.Encoding)">
            <summary>
            将 source 的内容缓存到 HGlobalCache 中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="source">source</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ToArray``1(Swifter.Tools.HGlobalCache{``0})">
            <summary>
            将缓存中的内容复制到新的数组中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <returns>返回一个新的数组</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ToBytes(Swifter.Tools.HGlobalCache{System.Char},System.Text.Encoding)">
            <summary>
            将缓存中的内容复制到新的数组中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="encoding">编码</param>
            <returns>返回一个新的数组</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ToChars(Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding)">
            <summary>
            将缓存中的内容复制到新的数组中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="encoding">编码</param>
            <returns>返回一个新的数组</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ToStringEx(Swifter.Tools.HGlobalCache{System.Char})">
            <summary>
            将缓存中的内容复制到新的字符串中。(Ex: 避免冲突)
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <returns>返回一个新的字符串</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ToHexString(Swifter.Tools.HGlobalCache{System.Byte})">
            <summary>
            将字节缓存中的内容转换为 16 进制字符串。
            </summary>
            <param name="hGCache">字节缓存</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteTo(Swifter.Tools.HGlobalCache{System.Char},System.IO.TextWriter)">
            <summary>
            将缓存中内容写入到指定的文本写入器中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="textWriter">文本写入器</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteTo(Swifter.Tools.HGlobalCache{System.Byte},System.IO.Stream)">
            <summary>
            将缓存中内容写入到指定的流中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="stream">流</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Char},System.IO.TextReader)">
            <summary>
            缓冲 TextReader 的内容到 HGlobalCache 中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="textReader">TextReader</param>
            <returns>返回缓冲的长度</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Byte},System.IO.Stream)">
            <summary>
            缓冲 Stream 的内容到 HGlobalCache 中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="stream">Stream</param>
            <returns>返回缓冲的长度</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Byte},System.String,System.Text.Encoding)">
            <summary>
            缓冲 字符串 的内容到 HGlobalCache 中。
            </summary>
            <param name="hGCache">HGlobalCache</param>
            <param name="str">字符串</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom``1(Swifter.Tools.HGlobalCache{``0},``0@,System.Int32)">
            <summary>
            将 Source 中的内容缓存到 HGlobalCache 中。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="hGCache">HGlobalCache</param>
            <param name="source">Source</param>
            <param name="length">Source 长度</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom``1(Swifter.Tools.HGlobalCache{``0},``0*,System.Int32)">
            <summary>
            将 Source 中的内容缓存到 HGlobalCache 中。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="hGCache">HGlobalCache</param>
            <param name="source">Source</param>
            <param name="length">Source 长度</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ToHexString(System.Byte@,System.Int32)">
            <summary>
            将字节码转换为 16 进制字符串。
            </summary>
            <param name="bytes">字节码</param>
            <param name="length">字节码长度</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ToHexString(System.Byte[])">
            <summary>
            将字节码转换为 16 进制字符串。
            </summary>
            <param name="bytes">字节码</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ToHexString(System.ArraySegment{System.Byte})">
            <summary>
            将字节码转换为 16 进制字符串。
            </summary>
            <param name="bytes">字节码</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ComputeHash``1(Swifter.Tools.HGlobalCache{System.Byte})">
            <summary>
            使用指定哈希算法类型计算字节缓存的哈希值。以十六进制字符串返回。
            </summary>
            <typeparam name="THashAlgorithm">哈希算法类型</typeparam>
            <param name="hGCache">字节缓存</param>
            <returns>返回 Hash 值的十六进制字符串</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ComputeHash``1(Swifter.Tools.HGlobalCache{System.Char},System.Text.Encoding)">
            <summary>
            使用指定哈希算法类型和编码类型计算字符缓存的哈希值。以十六进制字符串返回。
            </summary>
            <typeparam name="THashAlgorithm">哈希算法类型</typeparam>
            <param name="hGCache">字符缓存</param>
            <param name="encoding">指定编码</param>
            <returns>返回 Hash 值的十六进制字符串</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ComputeHash``1(Swifter.Tools.HGlobalCache{System.Char})">
            <summary>
            使用指定哈希算法类型并使用 UTF-8 编码计算字符缓存的哈希值。以十六进制字符串返回。
            </summary>
            <typeparam name="THashAlgorithm">哈希算法类型</typeparam>
            <param name="hGCache">字符缓存</param>
            <returns>返回 Hash 值的十六进制字符串</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ComputeHash``1(System.Byte[])">
            <summary>
            使用指定哈希算法类型并使用 UTF-8 编码计算字节数组的哈希值。以十六进制字符串返回。
            </summary>
            <typeparam name="THashAlgorithm">哈希算法类型</typeparam>
            <param name="data">字节数组</param>
            <returns>返回 Hash 值的十六进制字符串</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ComputeHash``1(System.String,System.Text.Encoding)">
            <summary>
            使用指定哈希算法类型和编码类型计算字符串的哈希值。以十六进制字符串返回。
            </summary>
            <typeparam name="THashAlgorithm">哈希算法类型</typeparam>
            <param name="str">字符串</param>
            <param name="encoding">指定编码</param>
            <returns>返回 Hash 值的十六进制字符串</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ComputeHash``1(System.String)">
            <summary>
            使用指定哈希算法类型并使用 UTF-8 编码计算字符串的哈希值。以十六进制字符串返回。
            </summary>
            <typeparam name="THashAlgorithm">哈希算法类型</typeparam>
            <param name="str">字符串</param>
            <returns>返回 Hash 值的十六进制字符串</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.Append(Swifter.Tools.HGlobalCache{System.Char},System.String)">
            <summary>
            在字符缓存的后面拼接一个字符串。
            </summary>
            <param name="hGCache">字符缓存</param>
            <param name="value">字符串</param>
            <returns>返回当前字符缓存</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.Append(Swifter.Tools.HGlobalCache{System.Char},System.Char)">
            <summary>
            在字符缓存的后面拼接一个字符。
            </summary>
            <param name="hGCache">字符缓存</param>
            <param name="char">字符</param>
            <returns>返回当前字符缓存</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.Append(Swifter.Tools.HGlobalCache{System.Char},System.UInt64,System.Byte,System.Byte)">
            <summary>
            在字符缓存的后面拼接一个数字格式。
            </summary>
            <param name="hGCache">字符缓存</param>
            <param name="value">数字</param>
            <param name="radix">进制数</param>
            <param name="fix">固定数字位数</param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.Append(Swifter.Tools.HGlobalCache{System.Char},System.Single,System.Byte)">
            <summary>
            在字符缓存的后面拼接一个数字格式。
            </summary>
            <param name="hGCache">字符缓存</param>
            <param name="value">数字</param>
            <param name="radix">进制数</param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.Append(Swifter.Tools.HGlobalCache{System.Char},System.Double,System.Byte)">
            <summary>
            在字符缓存的后面拼接一个数字格式。
            </summary>
            <param name="hGCache">字符缓存</param>
            <param name="value">数字</param>
            <param name="radix">进制数</param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.Append(Swifter.Tools.HGlobalCache{System.Char},System.Decimal)">
            <summary>
            在字符缓存的后面拼接一个数字格式。
            </summary>
            <param name="hGCache">字符缓存</param>
            <param name="value">数字</param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.Append(Swifter.Tools.HGlobalCache{System.Char},System.Int64,System.Byte)">
            <summary>
            在字符缓存的后面拼接一个数字格式。
            </summary>
            <param name="hGCache">字符缓存</param>
            <param name="value">数字</param>
            <param name="radix">进制数</param>
            <returns>返回当前缓存</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.Clear``1(Swifter.Tools.HGlobalCache{``0})">
            <summary>
            清除缓存中的内容
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="hGCache">缓存</param>
            <returns>返回当前缓存</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.Grow``1(Swifter.Tools.HGlobalCache{``0},System.Int32)">
            <summary>
            当缓存中剩余的空间小于指定数量时进行扩容。
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="hGCache">缓存</param>
            <param name="count">指定数量</param>
            <returns>返回当前缓存</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.GZip(Swifter.Tools.HGlobalCache{System.Byte},System.IO.Compression.CompressionMode,System.Boolean)">
            <summary>
            对缓存进行 GZip 操作。
            </summary>
            <param name="hGCache">缓存</param>
            <param name="mode">操作</param>
            <param name="ignoreLose">结果字节码的长度比原始字节码的长度长时将忽略操作</param>
            <returns>返回时候进行了操作</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadToEnd(System.IO.Stream)">
            <summary>
            读取流到结尾。
            </summary>
            <param name="stream">流</param>
            <returns>返回一个数组段</returns>
        </member>
        <member name="T:Swifter.Tools.HGlobalCachePool`1">
            <summary>
            全局缓存的对象池。
            </summary>
            <typeparam name="T">缓存类型</typeparam>
        </member>
        <member name="F:Swifter.Tools.HGlobalCachePool`1.Ratio">
            <summary>
            指示回收内存大小与平均大小的比例，超过该比例的对象将会被释放（即：不回收）。
            此值越大，回收率越低；当值小于等于 0 时，所有的对象都会被回收至池中。
            单位：千分之(‰)
            </summary>
        </member>
        <member name="M:Swifter.Tools.HGlobalCachePool`1.CreateInstance">
            <summary>
            创建全局缓存实例。
            </summary>
            <returns>返回一个实例</returns>
        </member>
        <member name="M:Swifter.Tools.HGlobalCachePool`1.Return(Swifter.Tools.HGlobalCache{`0})">
            <summary>
            归还全局缓存。
            </summary>
            <param name="hGCache">全局缓存实例</param>
        </member>
        <member name="M:Swifter.Tools.HGlobalCachePool`1.Current">
            <summary>
            获取当前线程的全局缓存。
            </summary>
            <returns>返回全局缓存实例</returns>
        </member>
        <member name="T:Swifter.Tools.StringHelper">
            <summary>
            字符串辅助类
            </summary>
            <summary>
            提供 UTF8 编码工具方法。
            </summary>
        </member>
        <member name="F:Swifter.Tools.StringHelper.Mult">
            <summary>
            HashCode 的乘数。
            </summary>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetLength(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte})">
            <summary>
            获取指定 utf-8 字符串的长度。
            </summary>
            <param name="utf8">指定 utf-8 字符串</param>
            <returns>返回该字符串的长度</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetLength(Swifter.Tools.Ps{System.Char})">
            <summary>
            获取指定 utf-16 字符串的长度。
            </summary>
            <param name="utf16">指定 utf-16 字符串</param>
            <returns>返回该字符串的长度</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.Equals(Swifter.Tools.Ps{System.Char},Swifter.Tools.Ps{System.Char})">
            <summary>
            判断两个 utf-16 字符串是否相等。
            </summary>
            <param name="utf16x">x</param>
            <param name="utf16y">y</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.Equals(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte},Swifter.Tools.Ps{Swifter.Tools.Utf8Byte})">
            <summary>
            判断两个 utf-8 字符串是否相等。
            </summary>
            <param name="utf8x">x</param>
            <param name="utf8y">y</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.Equals(System.String,System.String)">
            <summary>
            判断两个 utf-16 字符串是否相等。
            </summary>
            <param name="strx">x</param>
            <param name="stry">y</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetHashCode(Swifter.Tools.Ps{System.Char})">
            <summary>
            获取一个 utf-16 字符串的 Hash 值。
            </summary>
            <param name="utf16">字符串</param>
            <returns>返回一个 hash 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetHashCode(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte})">
            <summary>
            获取一个 utf-8 字符串的 Hash 值。
            </summary>
            <param name="utf8">字符串</param>
            <returns>返回一个 hash 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetHashCode(System.String)">
            <summary>
            获取字符串 Hash 值。
            </summary>
            <param name="str">字符串。</param>
            <returns>返回一个 int hash 值。</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.EqualsWithIgnoreCase(Swifter.Tools.Ps{System.Char},Swifter.Tools.Ps{System.Char})">
            <summary>
            判断两个 utf-16 字符串是否相等。
            </summary>
            <param name="utf16x">x</param>
            <param name="utf16y">y</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.EqualsWithIgnoreCase(Swifter.Tools.Ps{System.Char},System.String)">
            <summary>
            判断一个字符串和一个 utf-16 字符串是否相等。
            </summary>
            <param name="utf16">x</param>
            <param name="str">y</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.EqualsWithIgnoreCase(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte},System.String)">
            <summary>
            判断一个 utf8 字符串和一个字符串是否相等。
            </summary>
            <param name="utf8">x</param>
            <param name="str">y</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.EqualsWithIgnoreCase(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte},Swifter.Tools.Ps{Swifter.Tools.Utf8Byte})">
            <summary>
            判断两个 utf-8 字符串是否相等。
            </summary>
            <param name="utf8x">x</param>
            <param name="utf8y">y</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.EqualsWithIgnoreCase(System.String,System.String)">
            <summary>
            判断两个 utf-16 字符串是否相等。
            </summary>
            <param name="strx">x</param>
            <param name="stry">y</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetHashCodeWithIgnoreCase(Swifter.Tools.Ps{System.Char})">
            <summary>
            获取一个 utf-16 字符串的 Hash 值。
            </summary>
            <param name="utf16">字符串</param>
            <returns>返回一个 hash 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetHashCodeWithIgnoreCase(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte})">
            <summary>
            获取一个 utf-8 字符串的 Hash 值。
            </summary>
            <param name="utf8">字符串</param>
            <returns>返回一个 hash 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetHashCodeWithIgnoreCase(System.String)">
            <summary>
            获取字符串 Hash 值。
            </summary>
            <param name="str">字符串。</param>
            <returns>返回一个 int hash 值。</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.ToStringEx(Swifter.Tools.Ps{System.Char})">
            <summary>
            将 utf-16 字符集合转换为字符串。
            </summary>
            <param name="utf16">utf-16 字符集合</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.ToStringEx(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte})">
            <summary>
            将 utf-8 字符集合转换为字符串。
            </summary>
            <param name="utf8">utf-8 字符集合</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.CharAt(Swifter.Tools.Ps{System.Char},System.Int32)">
            <summary>
            获取指定 utf-16 字符串中位于指定索引处的字符。
            </summary>
            <param name="str">指定 utf-16 字符串</param>
            <param name="index">指定索引</param>
            <returns>返回一个字符</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.CharAt(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte},System.Int32)">
            <summary>
            获取指定 utf-8 字符串中位于指定索引处的字符。
            </summary>
            <param name="str">指定 utf-8 字符串</param>
            <param name="index">指定索引</param>
            <returns>返回一个字符</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.AsByte(Swifter.Tools.Utf8Byte)">
            <summary>
            将 utf-8 字节码转换为字节码。
            </summary>
            <param name="value">utf-8 字节码</param>
            <returns>返回字节码</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.Trim(System.Char*,System.Int32)">
            <summary>
            去除字符串两端的空白字符，然后返回一个新的字符串。
            </summary>
            <param name="chars">原始字符串</param>
            <param name="length">原始长度</param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.TrimStart(System.Char*,System.Int32)">
            <summary>
            去除字符串头部的空白字符，然后返回一个新的字符串。
            </summary>
            <param name="chars">原始字符串</param>
            <param name="length">原始长度</param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.TrimEnd(System.Char*,System.Int32)">
            <summary>
            去除字符串尾部的空白字符，然后返回一个新的字符串。
            </summary>
            <param name="chars">原始字符串</param>
            <param name="length">原始长度</param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.ToUpper(System.Char)">
            <summary>
            将小写英文字符转为大写英文字符。
            </summary>
            <param name="c"></param>
            <returns>返回一个字符。</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.ToLower(System.Char)">
            <summary>
            将大写英文字符转为小写英文字符。
            </summary>
            <param name="c"></param>
            <returns>返回一个字符。</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.ToUpper(Swifter.Tools.Utf8Byte)">
            <summary>
            将小写英文字符转为大写英文字符。
            </summary>
            <param name="c"></param>
            <returns>返回一个字符。</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.ToLower(Swifter.Tools.Utf8Byte)">
            <summary>
            将大写英文字符转为小写英文字符。
            </summary>
            <param name="c"></param>
            <returns>返回一个字符。</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.MakeString(System.Int32)">
            <summary>
            快速分配指定长度的字符串。
            </summary>
            <param name="length">指定长度</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.IsWhiteSpace(System.Char)">
            <summary>
            判断一个字符是否为空白字符
            </summary>
            <param name="c">字符</param>
            <returns>返回一个 Boolean 值。</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.IndexOf(System.Char*,System.Int32,System.Char)">
            <summary>
            在字符串中找到指定字符的索引，没找到则返回 -1。
            </summary>
            <param name="chars">字符串</param>
            <param name="c">字符</param>
            <param name="length">字符串长度</param>
            <returns>返回一个 int 值。</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.IndexOfAny(System.Char*,System.Int32,System.Char,System.Char)">
            <summary>
            在字符串中找到指定两个字符中任意字符的索引，没找到则返回 -1。
            </summary>
            <param name="chars">字符串</param>
            <param name="length">字符串长度</param>
            <param name="c1">字符1</param>
            <param name="c2">字符2</param>
            <returns>返回一个 int 值。</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.Contains(System.Char*,System.Int32,System.Char)">
            <summary>
            检索字符串中是否存在指定字符。
            </summary>
            <param name="chars">字符串</param>
            <param name="length">字符串长度</param>
            <param name="c">指定字符</param>
            <returns>返回是否存在</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetRawStringData(System.String)">
            <summary>
            获取字符串的元数据引用。
            </summary>
            <param name="str">字符串</param>
            <returns>返回第一个字符的引用</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.IsASCIIString(System.String)">
            <summary>
            判断一个字符串是否所有的字符都为 ASCII 字符。
            </summary>
            <param name="str">字符串</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.IsASCIIString(Swifter.Tools.Ps{Swifter.Tools.Utf8Byte})">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.ToString(System.Char*,System.Int32)">
            <summary>
            创建一个字符串。
            </summary>
            <param name="chars">字符串内容</param>
            <param name="length">字符串长度</param>
            <returns>返回一个新的字符串</returns>
        </member>
        <member name="F:Swifter.Tools.StringHelper.NumberOfUtf8PerUtf16">
            <summary>
            一个 UTF16 字符在 UTF8 中最多需要多少 Byte 存储。
            </summary>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetUtf8Bytes(System.Char@,System.Int32,System.Byte*)">
            <summary>
            
            </summary>
            <param name="chars"></param>
            <param name="length"></param>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.Close(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.Close2(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetUtf8Chars(System.Byte*,System.Int32,System.Char@)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="length"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.Equals(System.Byte*,System.Int32,System.Char@,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="bytesLength"></param>
            <param name="firstChar"></param>
            <param name="charCount"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.Open(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.Open2(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetUtf8CharsLength(System.Byte*,System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetUtf8BytesLength(System.Char@,System.Int32)">
            <summary>
            
            </summary>
            <param name="chars"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetUtf8MaxBytesLength(System.Int32)">
            <summary>
            
            </summary>
            <param name="charsLength"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.StringHelper.GetUtf8MaxCharsLength(System.Int32)">
            <summary>
            
            </summary>
            <param name="bytesLength"></param>
            <returns></returns>
        </member>
        <member name="T:Swifter.Tools.Utf8Byte">
            <summary>
            表示 UTF8 专用字节标识。
            </summary>
        </member>
        <member name="M:Swifter.Tools.Utf8Byte.op_Implicit(System.Byte)~Swifter.Tools.Utf8Byte">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Swifter.Tools.Utf8Byte.op_Implicit(Swifter.Tools.Utf8Byte)~System.Byte">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Swifter.Tools.TaskHelper">
            <summary>
            提供异步任务的工具函数。
            </summary>
        </member>
        <member name="M:Swifter.Tools.TaskHelper.NoWait(System.Threading.Tasks.Task)">
            <summary>
            不等待该任务执行完成。
            </summary>
        </member>
        <member name="M:Swifter.Tools.TaskHelper.NoWait``1(System.Threading.Tasks.Task{``0})">
            <summary>
            不等待该任务执行完成。
            </summary>
        </member>
        <member name="T:Swifter.Tools.DynamicAssembly">
            <summary>
            Swifter 内部动态程序集。
            </summary>
        </member>
        <member name="F:Swifter.Tools.DynamicAssembly.AssName">
            <summary>
            获取动态程序集的名称。
            </summary>
        </member>
        <member name="F:Swifter.Tools.DynamicAssembly.CanAccessNonPublicTypes">
            <summary>
            获取动态程序集是否可以访问非公开类型。
            </summary>
        </member>
        <member name="F:Swifter.Tools.DynamicAssembly.CanAccessNonPublicMembers">
            <summary>
            获取动态程序集是否可以访问非公开成员。
            </summary>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.IgnoresAccessChecksTo(System.Reflection.Assembly)">
            <summary>
            忽略对指定程序集的访问检查。
            </summary>
            <param name="assembly">指定程序集</param>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集的程序集名称。
            </summary>
            <param name="assembly">程序集</param>
            <returns>返回程序集名称</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
            <summary>
            定义一个动态类型。
            </summary>
            <param name="name">类型名称</param>
            <param name="attributes">类型属性</param>
            <param name="baseType">基类</param>
            <returns>返回一个类型生成器</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.DefineType(System.String,System.Reflection.TypeAttributes,System.Action{System.Reflection.Emit.TypeBuilder})">
            <summary>
            定义一个动态类型。
            </summary>
            <param name="name">类型名称</param>
            <param name="attributes">类型属性</param>
            <param name="callback">类型生成器回调</param>
            <returns>返回一个运行时类型</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Action{System.Reflection.Emit.TypeBuilder})">
            <summary>
            定义一个动态类型。
            </summary>
            <param name="name">类型名称</param>
            <param name="attributes">类型属性</param>
            <param name="baseType">基类</param>
            <param name="callback">类型生成器回调</param>
            <returns>返回一个运行时类型</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.DefineMethod(System.Reflection.Emit.TypeBuilder,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Action{System.Reflection.Emit.MethodBuilder,System.Reflection.Emit.ILGenerator})">
            <summary>
            定义一个动态方法。
            </summary>
            <param name="typeBuilder">类型生成器</param>
            <param name="name">方法名</param>
            <param name="attributes">方法标识</param>
            <param name="callingConvention">调用约定</param>
            <param name="returnType">返回值类型</param>
            <param name="parametersTypes">参数类型集合</param>
            <param name="callback">方法生成器回调</param>
            <returns>返回当前类型生成器</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.BuildDynamicMethod``1(System.Action{System.Reflection.Emit.DynamicMethod,System.Reflection.Emit.ILGenerator},System.Boolean)">
            <summary>
            定义一个动态方法。
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="callback">方法生成器回调</param>
            <param name="restrictedSkipVisibility">是否跳过验证</param>
            <returns>返回一个委托</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.BuildDynamicMethod``1(System.Action{System.Reflection.Emit.DynamicMethod,System.Reflection.Emit.ILGenerator},System.Reflection.Module,System.Boolean)">
            <summary>
            定义一个动态方法。
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="callback">方法生成器回调</param>
            <param name="module">绑定模块</param>
            <param name="skipVisibility">是否跳过验证</param>
            <returns>返回一个委托</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.GetType(System.String)">
            <summary>
            获取已定义的动态类型。不存在则返回 Null。
            </summary>
            <param name="typeName">动态类型名称</param>
            <returns>返回一个类型</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.IsInternalsVisibleTo(System.Reflection.Assembly)">
            <summary>
            判断指定程序集是否对动态程序集显示非共有成员。
            </summary>
            <param name="assembly">指定程序集</param>
            <returns>返回一个 <see cref="T:System.Boolean"/> 值。</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.IsIgnoresAccessChecksTo(System.Reflection.Assembly)">
            <summary>
            判断动态程序集是否对指定程序集忽略访问检查。
            </summary>
            <param name="assembly">指定程序集</param>
            <returns>返回一个 <see cref="T:System.Boolean"/> 值。</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.DefineAutoProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type,System.Reflection.PropertyAttributes,System.Reflection.FieldAttributes,System.Reflection.MethodAttributes)">
            <summary>
            定义自动完成的属性。
            </summary>
            <param name="typeBuilder">类型生成器</param>
            <param name="attributes">属性的属性</param>
            <param name="name">属性的名称</param>
            <param name="type">属性的类型</param>
            <param name="fieldAttributes">字段的属性</param>
            <param name="methodAttributes">get 和 set 方法的属性</param>
            <returns>返回当前类型生成器</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.DefineProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Reflection.PropertyAttributes,System.Type,System.Action{System.Reflection.Emit.PropertyBuilder,System.Reflection.Emit.MethodBuilder,System.Reflection.Emit.ILGenerator},System.Action{System.Reflection.Emit.PropertyBuilder,System.Reflection.Emit.MethodBuilder,System.Reflection.Emit.ILGenerator},System.Reflection.MethodAttributes)">
            <summary>
            定义属性。
            </summary>
            <param name="typeBuilder">类型生成器</param>
            <param name="name">属性名</param>
            <param name="attributes">属性的属性</param>
            <param name="type">属性的类型</param>
            <param name="getCallback">get 方法的回调</param>
            <param name="setCallback">set 方法的回调</param>
            <param name="methodAttributes">get 和 set 方法的属性</param>
            <returns>返回当前类生成器</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.DefineMethod(System.Reflection.Emit.TypeBuilder,System.String,System.Reflection.MethodAttributes,System.Type,System.Type[],System.Action{System.Reflection.Emit.MethodBuilder,System.Reflection.Emit.ILGenerator})">
            <summary>
            定义方法。
            </summary>
            <param name="typeBuilder">类型生成器</param>
            <param name="name">方法名</param>
            <param name="attributes">方法的属性</param>
            <param name="returnType">返回值类型</param>
            <param name="parameterTypes">参数类型集合</param>
            <param name="callback">方法生成器回调</param>
            <returns>返回当前类型生成器</returns>
        </member>
        <member name="M:Swifter.Tools.DynamicAssembly.ToCustomAttributeBuilder(System.Attribute)">
            <summary>
            将特性转换为特性生成器。
            </summary>
            <param name="attribute">特性实例</param>
            <returns>返回一个将特性转换为特性生成器</returns>
        </member>
        <member name="T:Swifter.Tools.IGenericInvoker">
            <summary>
            表示一个泛型执行器。
            </summary>
        </member>
        <member name="M:Swifter.Tools.IGenericInvoker.Invoke``1">
            <summary>
            泛型执行方法。
            </summary>
            <typeparam name="TKey">泛型</typeparam>
        </member>
        <member name="T:Swifter.Tools.IGenericInvoker`1">
            <summary>
            带返回值的泛型执行器。
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
        </member>
        <member name="M:Swifter.Tools.IGenericInvoker`1.Invoke``1">
            <summary>
            泛型执行方法。
            </summary>
            <typeparam name="TKey">泛型</typeparam>
            <returns>返回一个泛型值</returns>
        </member>
        <member name="T:Swifter.Tools.OverlappedValue">
            <summary>
            一个重叠的基础类型集合。
            </summary>
        </member>
        <member name="T:Swifter.Tools.Ps`1">
            <summary>
            表示一个元素连续内存信息。
            </summary>
            <typeparam name="T">元素类型</typeparam>
        </member>
        <member name="F:Swifter.Tools.Ps`1.Pointer">
            <summary>
            第一个元素的指针。
            </summary>
        </member>
        <member name="F:Swifter.Tools.Ps`1.Length">
            <summary>
            元素数量。
            </summary>
        </member>
        <member name="M:Swifter.Tools.Ps`1.#ctor(`0*,System.Int32)">
            <summary>
            初始化一个元素连续内存信息。
            </summary>
            <param name="pointer">第一个元素的指针</param>
            <param name="length">元素数量</param>
        </member>
        <member name="M:Swifter.Tools.Ps`1.Equals(Swifter.Tools.Ps{`0})">
            <summary>
            比较两个连续内存是否完全相等。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.Ps`1.Equals(System.Object)">
            <summary>
            比较两个连续内存是否完全相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.Ps`1.GetHashCode">
            <summary>
            获取连续内存的 Hash 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.Ps`1.Split(`0)">
            <summary>
            分割连续内存信息。
            </summary>
            <param name="separator">分隔符</param>
            <returns>返回一个结果迭代器</returns>
        </member>
        <member name="T:Swifter.Tools.Ps`1.SplitEnumerator">
            <summary>
            分割连续内存信息的迭代器。
            </summary>
        </member>
        <member name="F:Swifter.Tools.Ps`1.SplitEnumerator.Current">
            <summary>
            获取当前段落。
            </summary>
        </member>
        <member name="M:Swifter.Tools.Ps`1.SplitEnumerator.MoveNext">
            <summary>
            移动至下个段落。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Swifter.Tools.TypeHelper">
            <summary>
            提供类型信息的一些方法。
            </summary>
        </member>
        <member name="P:Swifter.Tools.TypeHelper.ReferenceComparer">
            <summary>
            引用比较器。
            </summary>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.OffsetOf(System.Reflection.FieldInfo)">
            <summary>
            获取一个字段的偏移量。如果是 Class 的字段则不包括 ObjectHandle 的大小。
            </summary>
            <param name="fieldInfo">字段信息</param>
            <returns>返回偏移量</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetObjectValueByteOffset">
            <summary>
            获取对象中的值的偏移量。
            </summary>
            <returns>返回一个 <see cref="T:System.Int32"/> 值</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.SizeOf(System.Type)">
            <summary>
            获取一个类型值的大小。
            </summary>
            <param name="type">类型信息</param>
            <returns>返回内存大小。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetAlignedNumInstanceFieldBytes(System.Type)">
            <summary>
            获取指定类型已对齐的实例字段 Bytes 数。
            </summary>
            <param name="type">指定类型</param>
            <returns>返回一个 int 值。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetNumInstanceFieldBytes(System.Type)">
            <summary>
            获取指定类型的实例字段 Bytes 数。
            </summary>
            <param name="type">指定类型</param>
            <returns>返回一个 int 值。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.RefValue``1(System.TypedReference)">
            <summary>
            获取托管引用的值引用。
            </summary>
            <typeparam name="T">需要获取的引用类型</typeparam>
            <param name="reference">托管引用</param>
            <returns>返回值引用</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetDefaultValue(System.Type)">
            <summary>
            获取指定类型的默认值。
            </summary>
            <param name="type">指定类型</param>
            <returns>返回该类型的默认值</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetBaseSize(System.Type)">
            <summary>
            获取一个指定类型的实例需要分配的堆大小。
            </summary>
            <param name="type">指定类型</param>
            <returns>返回一个 int 值</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.MemberwiseClone(System.Object)">
            <summary>
            浅表克隆一个对象。
            </summary>
            <param name="obj">对象实例</param>
            <returns>返回一个新的对象实例</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.Allocate(System.Type)">
            <summary>
            分配一个类型的实例。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.CanBeGenericParameter(System.Type)">
            <summary>
            判断一个类型能否作为泛型参数。
            </summary>
            <param name="type">类型</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetMethodTablePointer(System.Object)">
            <summary>
            获取实例的 ObjectHandle 值。
            </summary>
            <param name="obj">实例</param>
            <returns>返回 ObjectHandle 值。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetTypeHandle(System.Object)">
            <summary>
            获取实例的 TypeHandle 值。
            </summary>
            <param name="obj">实例</param>
            <returns>返回 ObjectHandle 值。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetTypeHandle(System.Type)">
            <summary>
            获取类型的 TypeHandle 值。
            </summary>
            <param name="type">类型信息</param>
            <returns>返回 TypeHandle 值。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetMethodTablePointer(System.Type)">
            <summary>
            获取类型的 ObjectHandle 值。
            </summary>
            <param name="type">类型信息</param>
            <returns>返回 ObjectHandle 值。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetGCStaticsBasePointer(System.Type)">
            <summary>
            获取类型的托管静态字段存储内存的地址。
            </summary>
            <param name="type">类型信息</param>
            <returns>返回内存地址。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetNonGCStaticsBasePointer(System.Type)">
            <summary>
            获取类型的非托管静态字段存储内存的地址。
            </summary>
            <param name="type">类型信息</param>
            <returns>返回内存地址。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetThreadGCStaticsBasePointer(System.Type)">
            <summary>
            获取类型的非托管静态字段存储内存的地址。
            </summary>
            <param name="type">类型信息</param>
            <returns>返回内存地址。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetThreadNonGCStaticsBasePointer(System.Type)">
            <summary>
            获取类型的非托管静态字段存储内存的地址。
            </summary>
            <param name="type">类型信息</param>
            <returns>返回内存地址。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetStaticsBasePointer(System.Reflection.FieldInfo)">
            <summary>
            获取静态字段所在堆内存的地址。
            </summary>
            <param name="fieldInfo">静态字段信息</param>
            <returns>返回内存地址。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsThreadStatic(System.Reflection.FieldInfo)">
            <summary>
            判断一个字段是否为线程静态字段。
            </summary>
            <param name="fieldInfo">静态字段信息</param>
            <returns>返回一个不二值</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsEmptyValue``1(``0)">
            <summary>
            判断一个值是否为空。
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="value">值</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsEmptyValue(System.Object)">
            <summary>
            判断一个值是否是空。
            </summary>
            <param name="value">值</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetProperty(System.Type,System.Type[])">
            <summary>
            获取指定 Type 的特定索引。
            </summary>
            <param name="type">指定 Type</param>
            <param name="types">指定索引的参数</param>
            <returns>返回索引信息</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.ParametersCompares(System.Type[],System.Object[])">
            <summary>
            比较参数类型集合和参数集合是否兼容。
            </summary>
            <param name="parametersTypes">参数类型集合。</param>
            <param name="inputParameters">参数集合。</param>
            <returns>返回兼容或不兼容。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.ParametersCompares(System.Type[],System.Type[])">
            <summary>
            比较两个参数类型集合是否一致。
            </summary>
            <param name="parametersTypes">参数类型集合。</param>
            <param name="inputParameters">参数类型集合。</param>
            <returns>返回一致或不一致。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.SlowGetValue``1(System.Type,System.String)">
            <summary>
            使用反射获取指定静态成员的值。
            </summary>
            <typeparam name="T">成员类型</typeparam>
            <param name="type">定义该成员的类</param>
            <param name="staticMemberName">成员名称</param>
            <returns>返回该静态成员的值</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.SlowGetValue``1(System.Object,System.String)">
            <summary>
            使用反射获取指定实例成员的值。
            </summary>
            <typeparam name="T">成员类型</typeparam>
            <param name="instance">定义该成员的对象</param>
            <param name="memberName">成员名称</param>
            <returns>返回该实例成员的值</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.Unbox``1(System.Object)">
            <summary>
            获取已装箱值类型的引用。
            </summary>
            <typeparam name="T">引用的类型</typeparam>
            <param name="value">已装箱值</param>
            <returns>返回结构的引用</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetDefinedAttributes``1(System.Type,System.Boolean)">
            <summary>
            获取类型已定义的指定类型的特性集合，没有则空数组。
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type">需要查找的类型</param>
            <param name="inherit">是否查询类型的父级，直到 object。</param>
            <returns>返回特性数组</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsAutoProperty(System.Reflection.PropertyInfo,System.Reflection.FieldInfo@)">
            <summary>
            判断一个属性（实例或静态）是否为自动属性（无特殊处理，直接对一个字段读写的属性）。
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="fieldInfo">返回一个字段信息</param>
            <returns>返回一个 bool 值。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsAutoGetMethod(System.Reflection.MethodInfo,System.Int32@)">
            <summary>
            判断一个方法（实例或静态）是否为直接返回一个字段值的方法。
            </summary>
            <param name="methodInfo">方法信息</param>
            <param name="fieldMetadataToken">返回字段的元数据标识</param>
            <returns>返回一个 bool 值。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsAutoSetMethod(System.Reflection.MethodInfo,System.Int32@)">
            <summary>
            判断一个方法（实例或静态）是否为直接设置一个字段值的方法。
            </summary>
            <param name="methodInfo">方法信息</param>
            <param name="fieldMetadataToken">返回字段的元数据标识</param>
            <returns>返回一个 bool 值。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetMemberByMetadataToken``1(System.Type,System.Int32)">
            <summary>
            通过元数据根获取成员信息。
            </summary>
            <typeparam name="TMemberInfo">期望获取的成员类型</typeparam>
            <param name="declaringType">成员的定义类</param>
            <param name="metadataToken">元数据根</param>
            <returns>返回一个成员信息或 null。</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.As``2(``0)">
            <summary>
            
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.GetTypeForAllAssembly(System.String)">
            <summary>
            尝试在所有程序集中通过类型名称获取类型。
            </summary>
            <param name="typeName">类型名称</param>
            <returns>返回类型信息</returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsPublic(System.Reflection.MemberInfo)">
            <summary>
            判断一个成员是否为共有的。
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsStatic(System.Reflection.EventInfo)">
            <summary>
            判断一个事件是否为静态的。
            </summary>
            <param name="eventInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsPublic(System.Reflection.EventInfo)">
            <summary>
            判断一个事件是否为共有的。
            </summary>
            <param name="eventInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsStatic(System.Reflection.PropertyInfo)">
            <summary>
            判断一个属性是否为静态的。
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsPublic(System.Reflection.PropertyInfo)">
            <summary>
            判断一个属性是否为共有的。
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Swifter.Tools.TypeHelper.IsExternalVisible(System.Reflection.MemberInfo)">
            <summary>
            判断一个成员是否外部可见。
            </summary>
            <param name="memberInfo">成员信息</param>
            <returns>返回一个 <see cref="T:System.Boolean"/> 值</returns>
        </member>
        <member name="T:Swifter.VersionDifferences">
            <summary>
            该文档用于解决版本差异性。
            </summary>
        </member>
        <member name="F:Swifter.VersionDifferences.UseInternalMethod">
            <summary>
            一个 <see cref="T:System.Boolean"/> 值，指示是否使用 .Net 内部方法。
            默认为是。
            内部方法包括：
            <br/>1: 使用反射调用私有成员
            <br/>2: 试图访问 .Net Runtime 内部数据
            <br/>3: 试图修改类型信息
            </summary>
        </member>
        <member name="P:Swifter.VersionDifferences.IsSupportEmit">
            <summary>
            获取或设置当前平台是否支持 Emit。
            </summary>
        </member>
        <member name="M:Swifter.VersionDifferences.GetTypeHandle(System.Object)">
            <summary>
            获取对象的 TypeHandle 值。
            </summary>
            <param name="obj">对象</param>
            <returns>返回一个 IntPtr 值。</returns>
        </member>
        <member name="F:Swifter.VersionDifferences.TypeHandleEqualMethodTablePointer">
            <summary>
            获取一个值，表示 TypeHandle 和 MethodTablePointer 是否一致。
            </summary>
        </member>
        <member name="F:Swifter.VersionDifferences.AggressiveInlining">
            <summary>
            表示该方法尽量内敛。
            </summary>
        </member>
        <member name="M:Swifter.VersionDifferences.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
            <summary>
            定义动态程序集。
            </summary>
            <param name="assName">程序集名称</param>
            <param name="access">程序集的可访问性</param>
            <returns>返回动态程序集生成器</returns>
        </member>
        <member name="M:Swifter.VersionDifferences.IsByRefLike(System.Type)">
            <summary>
            判断是否为引用结构。
            </summary>
            <param name="type">类型</param>
            <returns>返回一个 bool 值</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute">
            <summary>
            表示忽略对指定程序集的访问检查的特性。
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute.#ctor(System.String)">
            <summary>
            初始化特性。
            </summary>
            <param name="assemblyName">要忽略访问检查的程序集</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute.AssemblyName">
            <summary>
            要忽略访问检查的程序集。
            </summary>
        </member>
    </members>
</doc>
