<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Swifter.Json</name>
    </assembly>
    <members>
        <member name="T:Swifter.Json.IJsonReader">
            <summary>
            JSON Reader.
            注意：此接口中包含 Read，Get，Skip 开头的方法，
            Read 开头表示此方法会读取当前值，并将下标移至下一个值；
            Get 开头表示此方法会读取当前值，而不会移动下标；
            Skip 开头表示此方法不会读取当前值，直接将下标移至下一个值。
            </summary>
        </member>
        <member name="P:Swifter.Json.IJsonReader.Offset">
            <summary>
            获取已读取的字符数。
            </summary>
        </member>
        <member name="M:Swifter.Json.IJsonReader.GetToken">
            <summary>
            获取当前值的 Token。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Swifter.Json.IJsonReader.ReadGuid">
            <summary>
            读取 Guid 值。
            </summary>
        </member>
        <member name="M:Swifter.Json.IJsonReader.ReadDateTimeOffset">
            <summary>
            读取 DateTimeOffset 值。
            </summary>
        </member>
        <member name="M:Swifter.Json.IJsonReader.SkipValue">
            <summary>
            跳过一个 JSON 任意值。
            </summary>
        </member>
        <member name="M:Swifter.Json.IJsonReader.ReadPropertyName">
            <summary>
            读取 JSON 对象中字段的名称。
            </summary>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Swifter.Json.IJsonReader.TryReadBeginObject">
            <summary>
            尝试读取对象的开始标识。
            </summary>
            <returns>返回当前 JSON 标识是否为对象开始</returns>
        </member>
        <member name="M:Swifter.Json.IJsonReader.TryReadEndObject">
            <summary>
            尝试读取对象的结束标识。
            </summary>
            <returns>返回当前 JSON 标识是否为对象结束</returns>
        </member>
        <member name="M:Swifter.Json.IJsonReader.TryReadBeginArray">
            <summary>
            尝试读取数组的开始标识。
            </summary>
            <returns>返回当前 JSON 标识是否为数组开始</returns>
        </member>
        <member name="M:Swifter.Json.IJsonReader.TryReadEndArray">
            <summary>
            尝试读取数组的结束标识。
            </summary>
            <returns>返回当前 JSON 标识是否为数组结束</returns>
        </member>
        <member name="T:Swifter.Json.IJsonWriter">
            <summary>
            JSON Writer.
            </summary>
        </member>
        <member name="P:Swifter.Json.IJsonWriter.Offset">
            <summary>
            获取当前已写入的字符数。
            </summary>
        </member>
        <member name="M:Swifter.Json.IJsonWriter.Flush">
            <summary>
            设置已写入的 JSON 内容长度到 HGCache 的内容数量中。
            </summary>
        </member>
        <member name="M:Swifter.Json.IJsonWriter.Clear">
            <summary>
            重置 JSON 写入位置。
            </summary>
        </member>
        <member name="M:Swifter.Json.IJsonWriter.WriteGuid(System.Guid)">
            <summary>
            写入 Guid 值。
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:Swifter.Json.IJsonWriter.WriteDateTimeOffset(System.DateTimeOffset)">
            <summary>
            写入 DateTimeOffset 值。
            </summary>
            <param name="value">DateTimeOffset</param>
        </member>
        <member name="M:Swifter.Json.IJsonWriter.WriteBeginObject">
            <summary>
            写入 JSON 对象开始标识符。
            </summary>
        </member>
        <member name="M:Swifter.Json.IJsonWriter.WriteEndObject">
            <summary>
            写入 JSON 对象结束标识符。
            </summary>
        </member>
        <member name="M:Swifter.Json.IJsonWriter.WriteBeginArray">
            <summary>
            写入 JSON 数组开始标识符。
            </summary>
        </member>
        <member name="M:Swifter.Json.IJsonWriter.WriteEndArray">
            <summary>
            写入 JSON 数组结束标识符。
            </summary>
        </member>
        <member name="M:Swifter.Json.IJsonWriter.WritePropertyName(System.String)">
            <summary>
            写入 JSON 对象中的字段名称。
            </summary>
            <param name="name">字段名称</param>
        </member>
        <member name="M:Swifter.Json.IJsonWriter.ToString">
            <summary>
            将当前内容转换为字符串。
            </summary>
            <returns>返回一个字符串</returns>
        </member>
        <member name="T:Swifter.Json.JsonDeserializeException">
            <summary>
            Json 反序列化出错时的异常信息。
            </summary>
        </member>
        <member name="M:Swifter.Json.JsonDeserializeException.#ctor(System.Int32)">
            <summary>
            构建实例。
            </summary>
            <param name="index">反序列化出错所在索引</param>
        </member>
        <member name="P:Swifter.Json.JsonDeserializeException.Index">
            <summary>
            反序列化出错所在索引。
            </summary>
        </member>
        <member name="T:Swifter.Json.JsonEventHandler`1">
            <summary>
            JSON 事件委托。
            </summary>
            <typeparam name="TEventArgs">事件类型</typeparam>
            <param name="sender">发送者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:Swifter.Json.JsonFilteringEventArgs`1">
            <summary>
            JSON 序列化元素时事件参数。
            </summary>
            <typeparam name="TKey">元素键类型</typeparam>
        </member>
        <member name="F:Swifter.Json.JsonFilteringEventArgs`1.JsonWriter">
            <summary>
            当前 Json 写入器。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFilteringEventArgs`1.ValueInfo">
            <summary>
            当前值信息。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFilteringEventArgs`1.Result">
            <summary>
            是否写入该值。
            </summary>
        </member>
        <member name="T:Swifter.Json.JsonFormatter">
            <summary>
            JSON 文档格式化器。
            此类所有的静态方法和实例方法都是线程安全的。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatter.GlobalTargetedId">
            <summary>
            JsonFormatter 的全局针对目标的 Id。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatter.CharsPool">
            <summary>
            获取 JsonFormatter 使用的全局缓存池。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatter.DefaultMaxDepth">
            <summary>
            默认最大结构深度。
            可以通过枚举 <see cref="F:Swifter.Json.JsonFormatterOptions.OutOfDepthException"/> 来配置序列化或反序列化时 Json 结构深度超出该值时选择抛出异常还是不解析超出部分。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatter.DefaultIndentedChars">
            <summary>
            默认缩进符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatter.DefaultLineCharsBreak">
            <summary>
            默认换行符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatter.DefaultMiddleChars">
            <summary>
            默认 Key 与 Value 之间的分隔符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.MaxDepth">
            <summary>
            读取或设置最大结构深度。
            可以通过枚举 <see cref="F:Swifter.Json.JsonFormatterOptions.OutOfDepthException"/> 来配置序列化或反序列化时 Json 结构深度超出该值时选择抛出异常还是不解析超出部分。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.IndentedChars">
            <summary>
            读取或设置缩进符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.LineBreakChars">
            <summary>
            读取或设置换行符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.MiddleChars">
            <summary>
            读取或设置默认 Key 与 Value 之间的分隔符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.Options">
            <summary>
            JSON 格式化器配置项。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonFormatter.Encoding">
            <summary>
            获取或设置字符编码。
            </summary>
        </member>
        <member name="E:Swifter.Json.JsonFormatter.ObjectFiltering">
            <summary>
            当序列化对象字段时触发。
            </summary>
        </member>
        <member name="E:Swifter.Json.JsonFormatter.ArrayFiltering">
            <summary>
            当序列化数组元素时触发。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatter.targeted_id">
            <summary>
            作为自定义值读写接口的 Id。
            </summary>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.#ctor(System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
            <summary>
            初始化具有指定编码和指定配置项的 Json 格式化器。
            </summary>
            <param name="encoding">指定编码</param>
            <param name="options">指定配置项</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.#ctor(Swifter.Json.JsonFormatterOptions)">
            <summary>
            初始化默认编码 (UTF-8) 和指定配置项的 Json 格式化器。
            </summary>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Finalize">
            <summary>
            释放对象时移除读写接口实例。
            </summary>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,Swifter.Tools.HGlobalCache{System.Char})">
            <summary>
            将指定类型的实例序列化到 Json 缓存中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="hGCache">Json 缓存</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.IO.TextWriter)">
            <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="textWriter">Json 写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.CreateJsonReader(System.Char*,System.Int32)">
            <summary>
            创建 JSON 文档读取器。注意：在读取器中，每个值都必须读且只读一次！
            </summary>
            <param name="chars">JSON 字符串</param>
            <param name="length">JSON 字符串长度</param>
            <returns>返回一个 JSON 文档读取器</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.CreateJsonReader(Swifter.Tools.HGlobalCache{System.Char})">
            <summary>
            创建 JSON 文档读取器。注意：在读取器中，每个值都必须读且只读一次！
            </summary>
            <param name="hGCache">JSON 内容缓存</param>
            <returns>返回一个 JSON 文档读取器</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.CreateJsonWriter(Swifter.Tools.HGlobalCache{System.Char})">
            <summary>
            创建 JSON 文档写入器。注意：在写入器中请遵守规则写入，否则生成的 JSON 将不正常。
            </summary>
            <returns>返回一个 JSON 文档写入器</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0)">
            <summary>
            将指定类型的实例序列化为 Json 字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将指定类型的实例序列化为 Json 字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="options">指定配置项</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,Swifter.Tools.HGlobalCache{System.Char},Swifter.Json.JsonFormatterOptions)">
            <summary>
            将指定类型的实例序列化到 Json 缓存中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="hGCache">Json 缓存</param>
            <param name="options">指定配置项</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.IO.TextWriter,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="textWriter">Json 写入器</param>
            <param name="options">指定配置项</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObjectAsync``1(``0,System.IO.TextWriter)">
            <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="textWriter">Json 写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObjectAsync``1(``0,System.IO.TextWriter,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="textWriter">Json 写入器</param>
            <param name="options">指定配置项</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.Text.Encoding)">
            <summary>
            将指定类型的实例序列化为 Json 字节数组。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="encoding">指定编码</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding)">
            <summary>
            将指定类型的实例序列化到 Json 字节缓存中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="hGCache">Json 字节缓存</param>
            <param name="encoding">指定编码</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.IO.Stream,System.Text.Encoding)">
            <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="stream">Json 输出流</param>
            <param name="encoding">指定编码</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将指定类型的实例序列化为 Json 字节数组。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="encoding">指定编码</param>
            <param name="options">指定配置项</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将指定类型的实例序列化到 Json 字节缓存中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="hGCache">Json 字节缓存</param>
            <param name="encoding">指定编码</param>
            <param name="options">指定配置项</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.IO.Stream,System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="stream">Json 输出流</param>
            <param name="encoding">指定编码</param>
            <param name="options">指定配置项</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObjectAsync``1(``0,System.IO.Stream,System.Text.Encoding)">
            <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="stream">Json 输出流</param>
            <param name="encoding">指定编码</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeObjectAsync``1(``0,System.IO.Stream,System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="stream">Json 输出流</param>
            <param name="encoding">指定编码</param>
            <param name="options">指定配置项</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0)">
            <summary>
            将指定类型的实例序列化为 Json 字符串。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0,Swifter.Tools.HGlobalCache{System.Char})">
            <summary>
            将指定类型的实例序列化到 Json 缓存中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="hGCache">Json 缓存</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0,System.IO.TextWriter)">
            <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="textWriter">Json 写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeAsync``1(``0,System.IO.TextWriter)">
            <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="textWriter">Json 写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0,System.Byte[]@)">
            <summary>
            将指定类型的实例序列化到 Json 字节数组中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="bytes">Json 字节数组</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0,Swifter.Tools.HGlobalCache{System.Byte})">
            <summary>
            将指定类型的实例序列化到 Json 字节缓存中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="hGCache">Json 字节缓存</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0,System.IO.Stream)">
            <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="stream">Json 输出流</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.SerializeAsync``1(``0,System.IO.Stream)">
            <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="value">指定类型的实例</param>
            <param name="stream">Json 输出流</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.String,System.Type)">
            <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
            <param name="text">Json 字符串</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(Swifter.Tools.HGlobalCache{System.Char},System.Type)">
            <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 缓存</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.IO.TextReader,System.Type)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.String)">
            <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
            <param name="text">Json 字符串</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(Swifter.Tools.HGlobalCache{System.Char})">
            <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 缓存</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.IO.TextReader)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync``1(System.IO.TextReader)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync(System.IO.TextReader,System.Type)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.String,System.Type,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
            <param name="text">Json 字符串</param>
            <param name="type">指定类型</param>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(Swifter.Tools.HGlobalCache{System.Char},System.Type,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 缓存</param>
            <param name="type">指定类型</param>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.IO.TextReader,System.Type,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <param name="type">指定类型</param>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.String,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
            <param name="text">Json 字符串</param>
            <typeparam name="T">指定类型</typeparam>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(Swifter.Tools.HGlobalCache{System.Char},Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 缓存</param>
            <typeparam name="T">指定类型</typeparam>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.IO.TextReader,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <typeparam name="T">指定类型</typeparam>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync``1(System.IO.TextReader,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <typeparam name="T">指定类型</typeparam>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync(System.IO.TextReader,System.Type,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <param name="type">指定类型</param>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize(System.String,System.Type)">
            <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
            <param name="text">Json 字符串</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize(Swifter.Tools.HGlobalCache{System.Char},System.Type)">
            <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 缓存</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(System.String)">
            <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
            <param name="text">Json 字符串</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(Swifter.Tools.HGlobalCache{System.Char})">
            <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 缓存</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(System.IO.TextReader)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeAsync``1(System.IO.TextReader)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeAsync(System.IO.TextReader,System.Type)">
            <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
            <param name="textReader">Json 读取器</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.ArraySegment{System.Byte},System.Text.Encoding,System.Type)">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <param name="encoding">指定编码</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.Byte[],System.Text.Encoding,System.Type)">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <param name="encoding">指定编码</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding,System.Type)">
            <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 字节缓存</param>
            <param name="encoding">指定编码</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.IO.Stream,System.Text.Encoding,System.Type)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="encoding">指定编码</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.ArraySegment{System.Byte},System.Text.Encoding)">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <param name="encoding">指定编码</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.Byte[],System.Text.Encoding)">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <param name="encoding">指定编码</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding)">
            <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 字节缓存</param>
            <param name="encoding">指定编码</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.IO.Stream,System.Text.Encoding)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="encoding">指定编码</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync``1(System.IO.Stream,System.Text.Encoding)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="encoding">指定编码</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync(System.IO.Stream,System.Text.Encoding,System.Type)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="encoding">指定编码</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.ArraySegment{System.Byte},System.Text.Encoding,System.Type,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <param name="encoding">指定编码</param>
            <param name="type">指定类型</param>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.Byte[],System.Text.Encoding,System.Type,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <param name="encoding">指定编码</param>
            <param name="type">指定类型</param>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding,System.Type,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 字节缓存</param>
            <param name="encoding">指定编码</param>
            <param name="type">指定类型</param>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.IO.Stream,System.Text.Encoding,System.Type,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="encoding">指定编码</param>
            <param name="type">指定类型</param>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.ArraySegment{System.Byte},System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <param name="encoding">指定编码</param>
            <typeparam name="T">指定类型</typeparam>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.Byte[],System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <param name="encoding">指定编码</param>
            <typeparam name="T">指定类型</typeparam>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 字节缓存</param>
            <param name="encoding">指定编码</param>
            <typeparam name="T">指定类型</typeparam>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.IO.Stream,System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="encoding">指定编码</param>
            <typeparam name="T">指定类型</typeparam>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync``1(System.IO.Stream,System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="encoding">指定编码</param>
            <typeparam name="T">指定类型</typeparam>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync(System.IO.Stream,System.Text.Encoding,System.Type,Swifter.Json.JsonFormatterOptions)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="encoding">指定编码</param>
            <param name="type">指定类型</param>
            <param name="options">指定配置项</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize(System.ArraySegment{System.Byte},System.Type)">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize(System.Byte[],System.Type)">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize(Swifter.Tools.HGlobalCache{System.Byte},System.Type)">
            <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 字节缓存</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(System.ArraySegment{System.Byte})">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(System.Byte[])">
            <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(Swifter.Tools.HGlobalCache{System.Byte})">
            <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
            <param name="hGCache">Json 字节缓存</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(System.IO.Stream)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeAsync``1(System.IO.Stream)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <typeparam name="T">指定类型</typeparam>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeAsync(System.IO.Stream,System.Type)">
            <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="type">指定类型</param>
            <returns>返回指定类型的实例</returns>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(System.String,Swifter.RW.IDataWriter)">
            <summary>
            将 Json 字符串反序列化到指定的数据写入器中。
            </summary>
            <param name="text">Json 字符串</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(Swifter.Tools.HGlobalCache{System.Char},Swifter.RW.IDataWriter)">
            <summary>
            将 Json 缓存反序列化到指定的数据写入器中。
            </summary>
            <param name="hGCache">Json 缓存</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(System.IO.TextReader,Swifter.RW.IDataWriter)">
            <summary>
            将 Json 读取器反序列化到指定的数据写入器中。
            </summary>
            <param name="textReader">Json 读取器</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeToAsync(System.IO.TextReader,Swifter.RW.IDataWriter)">
            <summary>
            将 Json 读取器反序列化到指定的数据写入器中。
            </summary>
            <param name="textReader">Json 读取器</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(System.ArraySegment{System.Byte},Swifter.RW.IDataWriter)">
            <summary>
            将 Json 字节数组反序列化到指定的数据写入器中。
            </summary>
            <param name="bytes">Json 字节数组</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(Swifter.Tools.HGlobalCache{System.Byte},Swifter.RW.IDataWriter)">
            <summary>
            将 Json 字节缓存反序列化到指定的数据写入器中。
            </summary>
            <param name="hGCache">Json 字节缓存</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(System.IO.Stream,Swifter.RW.IDataWriter)">
            <summary>
            将 Json 输入流反序列化到指定的数据写入器中。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="M:Swifter.Json.JsonFormatter.DeserializeToAsync(System.IO.Stream,Swifter.RW.IDataWriter)">
            <summary>
            将 Json 输入流反序列化到指定的数据写入器中。
            </summary>
            <param name="stream">Json 输入流</param>
            <param name="dataWriter">数据写入器</param>
        </member>
        <member name="T:Swifter.Json.JsonFormatterOptions">
            <summary>
            JSON 格式化器配置项。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.Default">
            <summary>
            默认配置项。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.LoopReferencingException">
            <summary>
            在序列化时出现循环引用的对象时将发生异常。该选项不能和其他引用配置复用。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.LoopReferencingNull">
            <summary>
            在序列化时出现循环引用的对象时将用 Null 表示。该选项不能和其他引用配置复用。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.MultiReferencingNull">
            <summary>
            在序列化时出现已序列化的对象时将用 Null 表示。该选项不能和其他引用配置复用。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.MultiReferencingReference">
            <summary>
            在序列化和反序列化时允许使用 $ref 写法表示重复引用的对象。该选项不能和其他引用配置复用。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.MultiReferencingOptimizeLayout">
            <summary>
            此配置是 <see cref="F:Swifter.Json.JsonFormatterOptions.MultiReferencingNull"/> 和 <see cref="F:Swifter.Json.JsonFormatterOptions.MultiReferencingReference"/> 的可选配置。<br/>
            此配置将会优化结构布局，使被引用对象始终为最浅层的引用（而不是第一次出现的引用）。<br/>
            此配置会将浅层对象或数组先遍历保存引用，然再执行序列化和引用检查，性能损耗较大。<br/>
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.MultiReferencingAlsoString">
            <summary>
            此配置是 <see cref="F:Swifter.Json.JsonFormatterOptions.MultiReferencingNull"/> 和 <see cref="F:Swifter.Json.JsonFormatterOptions.MultiReferencingReference"/> 的可选配置。<br/>
            开启此配置将字符串也纳入多引用范畴。<br/>
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.AsOrderedObjectDeserialize">
            <summary>
            在反序列化对象时，将执行假定字段顺序对应的解析。<br/>
            如果启用此配置；那么当 Json 对象与目标对象的字段顺序相同时效率更快，反之则变慢。<br/>
            原理时在反序列化时，将循环一次目标对象的所有字段；<br/>
            当目标对象的字段名与当前正在解析的 Json 字段名一致时（忽略大小写），则读取 Json 字段对应的值到目标对象的字段对应的值中；<br/>
            如果字段名称不匹配，则跳过读取，并继续循环目标对象的字段。<br/>
            当满足顺序要求时，如果目标对象的字段数多于或等于 Json 对象中的字段数，这个假定有序的解析会成功。<br/>
            但如果目标对象的字段数少于 Json 对象中的字段数那么假定有序的解析不成功，会降低性能。<br/>
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.DeflateDeserialize">
            <summary>
            执行紧凑（无多余空格）且标准的 JSON 反序列化，此配置有效提高反序列化性能。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.StandardDeserialize">
            <summary>
            执行标准的 JSON 反序列化（即 不执行部分验证）。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.VerifiedDeserialize">
            <summary>
            执行完全验证的 JSON 反序列化（这是默认行为）。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.EmptyStringAsNull">
            <summary>
            反序列化的配置项，当反序列化除字符串和通用类型外的可空类型时，如果 Json 值是 0 长度的字符串，则解析为 Null。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.EmptyStringAsDefault">
            <summary>
            反序列化的配置项，当反序列化非字符串和通用类型时，如果 Json 值是 0 长度的字符串，则解析为 Default。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.ModifiableOriginal">
            <summary>
            反序列化的内部配置项，传入反序列化器的原始内容可以被作为缓存区而修改。<br/>
            此配置会提高解析字符串的性能，但是原始内容会被修改而不能再使用。<br/>
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.Indented">
            <summary>
            序列化时对 JSON 进行缩进美化。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.OutOfDepthException">
            <summary>
            如果启用，在序列化或反序列化时当 Json 结构超出深度限制（<see cref="P:Swifter.Json.JsonFormatter.MaxDepth"/>）则抛出异常。<br/>
            如果不启用，超出深度限制部分将不会被序列化或反序列化。<br/>
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.UseSystemFloatingPointsMethods">
            <summary>
            如果启用，则在序列化和反序列化时，使用 System 命名空间里的浮点数算法，浮点数是 <see cref="T:System.Single"/> 和 <see cref="T:System.Double"/>。<br/>
            此配置能让浮点数的格式化和解析的结果始终和 ToString 和 Parse 的结果保持一致；<br/>
            缺点是性能变低，尤其是在早期 .NET 版本为 40 倍性能差，在 Core3.0 下缩减为 4 倍。<br/>
            默认情况下，Swifter 的浮点数算法在浮点数特别大或特别小时，得出的结果可能和 System 里的算法得出的结果不一致；<br/>
            这是浮点数的特点之一，在不同的系统，平台，CPU或算法下都会产生这个问题，这是正常的。<br/>
            由于早期 .NET 版本的浮点数算法缺陷，导致开启此配置后在浮点数特别大或特别小时，反序列化可能会引发 <see cref="T:System.OverflowException"/> 异常。<br/>
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.CamelCaseWhenSerialize">
            <summary>
            序列化对象时，字段名使用驼峰命名法。即：如果字段名首字母为大写，则将首字母写入为小写字母。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.OnFilter">
            <summary>
            启用对象字段和值的筛选。<br/>
            此配置与 <see cref="E:Swifter.Json.JsonFormatter.ObjectFiltering"/> 事件相互影响。<br/>
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.IgnoreNull">
            <summary>
            在序列化或反序列化时忽略 Null 值。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.IgnoreZero">
            <summary>
            在序列化或反序列化时忽略 0 值。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.IgnoreEmptyString">
            <summary>
            在序列化时忽略 ""(空字符串) 值。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonFormatterOptions.ArrayOnFilter">
            <summary>
            启用数组元素的筛选。<br/>
            此配置与 <see cref="E:Swifter.Json.JsonFormatter.ArrayFiltering"/> 事件相互影响。<br/>
            </summary>
        </member>
        <member name="T:Swifter.Json.JsonLoopReferencingException">
            <summary>
            Json 序列化时出现循环引用引发的异常信息。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonLoopReferencingException.LoopingObject">
            <summary>
            出现循环引用的对象。
            </summary>
        </member>
        <member name="M:Swifter.Json.JsonLoopReferencingException.#ctor(Swifter.RW.RWPathInfo,Swifter.RW.RWPathInfo,System.Object)">
            <summary>
            构建实例
            </summary>
        </member>
        <member name="T:Swifter.Json.JsonOutOfDepthException">
            <summary>
            JSON 序列化或反序列化时结构深度超出最大深度的异常。
            </summary>
        </member>
        <member name="M:Swifter.Json.JsonOutOfDepthException.#ctor">
            <summary>
            构建实例
            </summary>
        </member>
        <member name="T:Swifter.Json.JsonToken">
            <summary>
            表示 JSON 值的 Token。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonToken.Object">
            <summary>
            表示一个键值对值。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonToken.Array">
            <summary>
            表示一个数组值。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonToken.Boolean">
            <summary>
            表示一个 Boolean 值，包括 True 和 False。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonToken.Null">
            <summary>
            表示一个空值，包括 Null 和 Undefined。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonToken.Number">
            <summary>
            表示一个数值，包括整数和浮点数。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonToken.String">
            <summary>
            表示一个字符串值，包括双引号和单引号。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonToken.End">
            <summary>
            这不表示一个值，而是表示一个 JSON 的结尾。
            </summary>
        </member>
        <member name="F:Swifter.Json.JsonToken.Other">
            <summary>
            其他值，非上述的任何其他值。
            </summary>
        </member>
        <member name="T:Swifter.Json.JsonValue">
            <summary>
            表示一个 Json 值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.IsArray">
            <summary>
            获取这个 Json 值是否为数组。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.IsObject">
            <summary>
            获取这个 Json 值是否为对象。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.IsValue">
            <summary>
            获取这个 Json 值是否是一个基础值（数字，字符串，布尔，Null）。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.ObjectKeysCount">
            <summary>
            获取这个 Json 对象的字段数量。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.ObjectKeys">
            <summary>
            获取这个 Json 对象的字段集合。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.ObjectItems">
            <summary>
            获取这个 Json 对象的键值对集合。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.ArrayLength">
            <summary>
            获取这个 Json 数组的长度。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.Value">
            <summary>
            获取这个基础值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.Item(System.String)">
            <summary>
            获取这个 Json 对象中指定字段名称的 Json 值，没有该字段则返回 Null。
            </summary>
            <param name="name">指定字段名称</param>
            <returns>返回一个 Json 值</returns>
        </member>
        <member name="P:Swifter.Json.JsonValue.Item(System.Int32)">
            <summary>
            获取这个 Json 数组中指定索引处的 Json 值。超出索引将发生异常。
            </summary>
            <param name="index">指定索引</param>
            <returns>返回一个 Json 值</returns>
        </member>
        <member name="P:Swifter.Json.JsonValue.BooleanValue">
            <summary>
            获取这个 Json 值的布尔形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.CharValue">
            <summary>
            获取这个 Json 值的字符形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.SByteValue">
            <summary>
            获取这个 Json 值的有符号字节形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.ByteValue">
            <summary>
            获取这个 Json 值的无符号字节形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.Int16Value">
            <summary>
            获取这个 Json 值的 16 位有符号整数形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.UInt16Value">
            <summary>
            获取这个 Json 值的 16 位无符号整数形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.Int32Value">
            <summary>
            获取这个 Json 值的 32 位有符号整数形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.UInt32Value">
            <summary>
            获取这个 Json 值的 32 位无符号整数形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.Int64Value">
            <summary>
            获取这个 Json 值的 64 位有符号整数形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.UInt64Value">
            <summary>
            获取这个 Json 值的 64 位无符号整数形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.SingleValue">
            <summary>
            获取这个 Json 值的单精度浮点数形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.DoubleValue">
            <summary>
            获取这个 Json 值的双精度浮点数形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.DecimalValue">
            <summary>
            获取这个 Json 值的十进制数字形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.DateTimeValue">
            <summary>
            获取这个 Json 值的日期形式值。
            </summary>
        </member>
        <member name="P:Swifter.Json.JsonValue.StringValue">
            <summary>
            获取这个 Json 值的字符串形式值。
            </summary>
        </member>
        <member name="M:Swifter.Json.JsonValue.ToString">
            <summary>
            获取这个值的 Json 字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Swifter.Json.JsonValue.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Dynamic 对象尝试获取成员值。
            </summary>
            <param name="binder">成员信息</param>
            <param name="result">返回结果值</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:Swifter.Json.JsonValue.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Dynamic 对象尝试获取索引器的值。
            </summary>
            <param name="binder">索引器信息</param>
            <param name="indexes">参数</param>
            <param name="result">返回结果值</param>
            <returns>是否获取成功</returns>
        </member>
    </members>
</doc>
